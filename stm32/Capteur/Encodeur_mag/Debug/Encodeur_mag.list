
Encodeur_mag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08004d7c  08004d7c  00014d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e08  08004e08  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004e08  08004e08  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e08  08004e08  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e08  08004e08  00014e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e0c  08004e0c  00014e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000070  08004e80  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08004e80  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f15e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020ba  00000000  00000000  0002f1fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  000312b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d78  00000000  00000000  00032138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021afc  00000000  00000000  00032eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fcd4  00000000  00000000  000549ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1381  00000000  00000000  00064680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00135a01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040a8  00000000  00000000  00135a54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d64 	.word	0x08004d64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004d64 	.word	0x08004d64

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <as5600_init>:
 * @retval              AS5600_ERROR_SUCCESS    If everything went well
 * @retval              AS5600_ERROR_RUNTIME_ERROR Module already initialized
 * @retval              AS5600_ERROR_BAD_PARAMETER Invalid transfer function pointer
 */
as5600_error_t as5600_init(pf_i2c_xfer_as5600_t const pf_transfer_func)
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
        as5600_error_t result = AS5600_ERROR_SUCCESS;
 8000288:	2300      	movs	r3, #0
 800028a:	73fb      	strb	r3, [r7, #15]

        if (m_is_initialized) {
 800028c:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <as5600_init+0x44>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d002      	beq.n	800029a <as5600_init+0x1a>
                result = AS5600_ERROR_RUNTIME_ERROR;
 8000294:	2302      	movs	r3, #2
 8000296:	73fb      	strb	r3, [r7, #15]
 8000298:	e004      	b.n	80002a4 <as5600_init+0x24>
        } else if (NULL == pf_transfer_func) {
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d101      	bne.n	80002a4 <as5600_init+0x24>
                result = AS5600_ERROR_BAD_PARAMETER;
 80002a0:	2301      	movs	r3, #1
 80002a2:	73fb      	strb	r3, [r7, #15]
        }

        if (AS5600_ERROR_SUCCESS == result) {
 80002a4:	7bfb      	ldrb	r3, [r7, #15]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d105      	bne.n	80002b6 <as5600_init+0x36>
                m_as5600_xfer_func = pf_transfer_func;
 80002aa:	4a07      	ldr	r2, [pc, #28]	; (80002c8 <as5600_init+0x48>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	6013      	str	r3, [r2, #0]
                m_is_initialized = true;
 80002b0:	4b04      	ldr	r3, [pc, #16]	; (80002c4 <as5600_init+0x44>)
 80002b2:	2201      	movs	r2, #1
 80002b4:	701a      	strb	r2, [r3, #0]
        }

        return result;
 80002b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80002b8:	4618      	mov	r0, r3
 80002ba:	3714      	adds	r7, #20
 80002bc:	46bd      	mov	sp, r7
 80002be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c2:	4770      	bx	lr
 80002c4:	20000090 	.word	0x20000090
 80002c8:	2000008c 	.word	0x2000008c

080002cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b088      	sub	sp, #32
 80002d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d2:	f000 fb9a 	bl	8000a0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002d6:	f000 f83d 	bl	8000354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002da:	f000 f94f 	bl	800057c <MX_GPIO_Init>
  MX_ADC1_Init();
 80002de:	f000 f87f 	bl	80003e0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80002e2:	f000 f8e1 	bl	80004a8 <MX_I2C1_Init>
  MX_USART2_Init();
 80002e6:	f000 f91d 	bl	8000524 <MX_USART2_Init>
  /* USER CODE BEGIN 2 */
  as5600_error_t result = as5600_init(my_i2c_xfer);
 80002ea:	4814      	ldr	r0, [pc, #80]	; (800033c <main+0x70>)
 80002ec:	f7ff ffc8 	bl	8000280 <as5600_init>
 80002f0:	4603      	mov	r3, r0
 80002f2:	77fb      	strb	r3, [r7, #31]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 80002f4:	4812      	ldr	r0, [pc, #72]	; (8000340 <main+0x74>)
 80002f6:	f000 ff31 	bl	800115c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 20);
 80002fa:	2114      	movs	r1, #20
 80002fc:	4810      	ldr	r0, [pc, #64]	; (8000340 <main+0x74>)
 80002fe:	f000 ff90 	bl	8001222 <HAL_ADC_PollForConversion>
	  angle = HAL_ADC_GetValue(&hadc1);
 8000302:	480f      	ldr	r0, [pc, #60]	; (8000340 <main+0x74>)
 8000304:	f001 f81c 	bl	8001340 <HAL_ADC_GetValue>
 8000308:	4603      	mov	r3, r0
 800030a:	b29a      	uxth	r2, r3
 800030c:	4b0d      	ldr	r3, [pc, #52]	; (8000344 <main+0x78>)
 800030e:	801a      	strh	r2, [r3, #0]
	  sprintf(msg, "Angle: %hu \r\n", angle);
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <main+0x78>)
 8000312:	881b      	ldrh	r3, [r3, #0]
 8000314:	461a      	mov	r2, r3
 8000316:	490c      	ldr	r1, [pc, #48]	; (8000348 <main+0x7c>)
 8000318:	480c      	ldr	r0, [pc, #48]	; (800034c <main+0x80>)
 800031a:	f004 f8b5 	bl	8004488 <siprintf>
	  HAL_USART_Transmit(&husart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 800031e:	480b      	ldr	r0, [pc, #44]	; (800034c <main+0x80>)
 8000320:	f7ff ff56 	bl	80001d0 <strlen>
 8000324:	4603      	mov	r3, r0
 8000326:	b29a      	uxth	r2, r3
 8000328:	f04f 33ff 	mov.w	r3, #4294967295
 800032c:	4907      	ldr	r1, [pc, #28]	; (800034c <main+0x80>)
 800032e:	4808      	ldr	r0, [pc, #32]	; (8000350 <main+0x84>)
 8000330:	f003 fe22 	bl	8003f78 <HAL_USART_Transmit>
	  HAL_Delay(200);
 8000334:	20c8      	movs	r0, #200	; 0xc8
 8000336:	f000 fbdd 	bl	8000af4 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 800033a:	e7db      	b.n	80002f4 <main+0x28>
 800033c:	080005c5 	.word	0x080005c5
 8000340:	20000094 	.word	0x20000094
 8000344:	2000019c 	.word	0x2000019c
 8000348:	08004d7c 	.word	0x08004d7c
 800034c:	200001a0 	.word	0x200001a0
 8000350:	2000014c 	.word	0x2000014c

08000354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b096      	sub	sp, #88	; 0x58
 8000358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035a:	f107 0314 	add.w	r3, r7, #20
 800035e:	2244      	movs	r2, #68	; 0x44
 8000360:	2100      	movs	r1, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f004 f888 	bl	8004478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000368:	463b      	mov	r3, r7
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]
 8000374:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000376:	f44f 7000 	mov.w	r0, #512	; 0x200
 800037a:	f002 fc3d 	bl	8002bf8 <HAL_PWREx_ControlVoltageScaling>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000384:	f000 f968 	bl	8000658 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000388:	2310      	movs	r3, #16
 800038a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800038c:	2301      	movs	r3, #1
 800038e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000390:	2300      	movs	r3, #0
 8000392:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000394:	2360      	movs	r3, #96	; 0x60
 8000396:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000398:	2300      	movs	r3, #0
 800039a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800039c:	f107 0314 	add.w	r3, r7, #20
 80003a0:	4618      	mov	r0, r3
 80003a2:	f002 fc7f 	bl	8002ca4 <HAL_RCC_OscConfig>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80003ac:	f000 f954 	bl	8000658 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b0:	230f      	movs	r3, #15
 80003b2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80003b4:	2300      	movs	r3, #0
 80003b6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003bc:	2300      	movs	r3, #0
 80003be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003c0:	2300      	movs	r3, #0
 80003c2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003c4:	463b      	mov	r3, r7
 80003c6:	2100      	movs	r1, #0
 80003c8:	4618      	mov	r0, r3
 80003ca:	f003 f87f 	bl	80034cc <HAL_RCC_ClockConfig>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80003d4:	f000 f940 	bl	8000658 <Error_Handler>
  }
}
 80003d8:	bf00      	nop
 80003da:	3758      	adds	r7, #88	; 0x58
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}

080003e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b086      	sub	sp, #24
 80003e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003e6:	463b      	mov	r3, r7
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
 80003ec:	605a      	str	r2, [r3, #4]
 80003ee:	609a      	str	r2, [r3, #8]
 80003f0:	60da      	str	r2, [r3, #12]
 80003f2:	611a      	str	r2, [r3, #16]
 80003f4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003f6:	4b29      	ldr	r3, [pc, #164]	; (800049c <MX_ADC1_Init+0xbc>)
 80003f8:	4a29      	ldr	r2, [pc, #164]	; (80004a0 <MX_ADC1_Init+0xc0>)
 80003fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003fc:	4b27      	ldr	r3, [pc, #156]	; (800049c <MX_ADC1_Init+0xbc>)
 80003fe:	2200      	movs	r2, #0
 8000400:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000402:	4b26      	ldr	r3, [pc, #152]	; (800049c <MX_ADC1_Init+0xbc>)
 8000404:	2200      	movs	r2, #0
 8000406:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000408:	4b24      	ldr	r3, [pc, #144]	; (800049c <MX_ADC1_Init+0xbc>)
 800040a:	2200      	movs	r2, #0
 800040c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800040e:	4b23      	ldr	r3, [pc, #140]	; (800049c <MX_ADC1_Init+0xbc>)
 8000410:	2200      	movs	r2, #0
 8000412:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000414:	4b21      	ldr	r3, [pc, #132]	; (800049c <MX_ADC1_Init+0xbc>)
 8000416:	2204      	movs	r2, #4
 8000418:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800041a:	4b20      	ldr	r3, [pc, #128]	; (800049c <MX_ADC1_Init+0xbc>)
 800041c:	2200      	movs	r2, #0
 800041e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000420:	4b1e      	ldr	r3, [pc, #120]	; (800049c <MX_ADC1_Init+0xbc>)
 8000422:	2200      	movs	r2, #0
 8000424:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000426:	4b1d      	ldr	r3, [pc, #116]	; (800049c <MX_ADC1_Init+0xbc>)
 8000428:	2201      	movs	r2, #1
 800042a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800042c:	4b1b      	ldr	r3, [pc, #108]	; (800049c <MX_ADC1_Init+0xbc>)
 800042e:	2200      	movs	r2, #0
 8000430:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000434:	4b19      	ldr	r3, [pc, #100]	; (800049c <MX_ADC1_Init+0xbc>)
 8000436:	2200      	movs	r2, #0
 8000438:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800043a:	4b18      	ldr	r3, [pc, #96]	; (800049c <MX_ADC1_Init+0xbc>)
 800043c:	2200      	movs	r2, #0
 800043e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000440:	4b16      	ldr	r3, [pc, #88]	; (800049c <MX_ADC1_Init+0xbc>)
 8000442:	2200      	movs	r2, #0
 8000444:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000448:	4b14      	ldr	r3, [pc, #80]	; (800049c <MX_ADC1_Init+0xbc>)
 800044a:	2200      	movs	r2, #0
 800044c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800044e:	4b13      	ldr	r3, [pc, #76]	; (800049c <MX_ADC1_Init+0xbc>)
 8000450:	2200      	movs	r2, #0
 8000452:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000456:	4811      	ldr	r0, [pc, #68]	; (800049c <MX_ADC1_Init+0xbc>)
 8000458:	f000 fd38 	bl	8000ecc <HAL_ADC_Init>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000462:	f000 f8f9 	bl	8000658 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000466:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <MX_ADC1_Init+0xc4>)
 8000468:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800046a:	2306      	movs	r3, #6
 800046c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800046e:	2300      	movs	r3, #0
 8000470:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000472:	237f      	movs	r3, #127	; 0x7f
 8000474:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000476:	2304      	movs	r3, #4
 8000478:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800047a:	2300      	movs	r3, #0
 800047c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800047e:	463b      	mov	r3, r7
 8000480:	4619      	mov	r1, r3
 8000482:	4806      	ldr	r0, [pc, #24]	; (800049c <MX_ADC1_Init+0xbc>)
 8000484:	f000 ff6a 	bl	800135c <HAL_ADC_ConfigChannel>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800048e:	f000 f8e3 	bl	8000658 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000492:	bf00      	nop
 8000494:	3718      	adds	r7, #24
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	20000094 	.word	0x20000094
 80004a0:	50040000 	.word	0x50040000
 80004a4:	14f00020 	.word	0x14f00020

080004a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004ac:	4b1b      	ldr	r3, [pc, #108]	; (800051c <MX_I2C1_Init+0x74>)
 80004ae:	4a1c      	ldr	r2, [pc, #112]	; (8000520 <MX_I2C1_Init+0x78>)
 80004b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80004b2:	4b1a      	ldr	r3, [pc, #104]	; (800051c <MX_I2C1_Init+0x74>)
 80004b4:	f640 6214 	movw	r2, #3604	; 0xe14
 80004b8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004ba:	4b18      	ldr	r3, [pc, #96]	; (800051c <MX_I2C1_Init+0x74>)
 80004bc:	2200      	movs	r2, #0
 80004be:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004c0:	4b16      	ldr	r3, [pc, #88]	; (800051c <MX_I2C1_Init+0x74>)
 80004c2:	2201      	movs	r2, #1
 80004c4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004c6:	4b15      	ldr	r3, [pc, #84]	; (800051c <MX_I2C1_Init+0x74>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004cc:	4b13      	ldr	r3, [pc, #76]	; (800051c <MX_I2C1_Init+0x74>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004d2:	4b12      	ldr	r3, [pc, #72]	; (800051c <MX_I2C1_Init+0x74>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004d8:	4b10      	ldr	r3, [pc, #64]	; (800051c <MX_I2C1_Init+0x74>)
 80004da:	2200      	movs	r2, #0
 80004dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004de:	4b0f      	ldr	r3, [pc, #60]	; (800051c <MX_I2C1_Init+0x74>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004e4:	480d      	ldr	r0, [pc, #52]	; (800051c <MX_I2C1_Init+0x74>)
 80004e6:	f001 fdef 	bl	80020c8 <HAL_I2C_Init>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80004f0:	f000 f8b2 	bl	8000658 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004f4:	2100      	movs	r1, #0
 80004f6:	4809      	ldr	r0, [pc, #36]	; (800051c <MX_I2C1_Init+0x74>)
 80004f8:	f002 fad8 	bl	8002aac <HAL_I2CEx_ConfigAnalogFilter>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000502:	f000 f8a9 	bl	8000658 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000506:	2100      	movs	r1, #0
 8000508:	4804      	ldr	r0, [pc, #16]	; (800051c <MX_I2C1_Init+0x74>)
 800050a:	f002 fb1a 	bl	8002b42 <HAL_I2CEx_ConfigDigitalFilter>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000514:	f000 f8a0 	bl	8000658 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}
 800051c:	200000f8 	.word	0x200000f8
 8000520:	40005400 	.word	0x40005400

08000524 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <MX_USART2_Init+0x50>)
 800052a:	4a13      	ldr	r2, [pc, #76]	; (8000578 <MX_USART2_Init+0x54>)
 800052c:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 800052e:	4b11      	ldr	r3, [pc, #68]	; (8000574 <MX_USART2_Init+0x50>)
 8000530:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000534:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8000536:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <MX_USART2_Init+0x50>)
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 800053c:	4b0d      	ldr	r3, [pc, #52]	; (8000574 <MX_USART2_Init+0x50>)
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8000542:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <MX_USART2_Init+0x50>)
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8000548:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <MX_USART2_Init+0x50>)
 800054a:	220c      	movs	r2, #12
 800054c:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 800054e:	4b09      	ldr	r3, [pc, #36]	; (8000574 <MX_USART2_Init+0x50>)
 8000550:	2200      	movs	r2, #0
 8000552:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8000554:	4b07      	ldr	r3, [pc, #28]	; (8000574 <MX_USART2_Init+0x50>)
 8000556:	2200      	movs	r2, #0
 8000558:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800055a:	4b06      	ldr	r3, [pc, #24]	; (8000574 <MX_USART2_Init+0x50>)
 800055c:	2200      	movs	r2, #0
 800055e:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8000560:	4804      	ldr	r0, [pc, #16]	; (8000574 <MX_USART2_Init+0x50>)
 8000562:	f003 fcbf 	bl	8003ee4 <HAL_USART_Init>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 800056c:	f000 f874 	bl	8000658 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	2000014c 	.word	0x2000014c
 8000578:	40004400 	.word	0x40004400

0800057c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <MX_GPIO_Init+0x44>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	4a0e      	ldr	r2, [pc, #56]	; (80005c0 <MX_GPIO_Init+0x44>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <MX_GPIO_Init+0x44>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059a:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <MX_GPIO_Init+0x44>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059e:	4a08      	ldr	r2, [pc, #32]	; (80005c0 <MX_GPIO_Init+0x44>)
 80005a0:	f043 0302 	orr.w	r3, r3, #2
 80005a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a6:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <MX_GPIO_Init+0x44>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005aa:	f003 0302 	and.w	r3, r3, #2
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005b2:	bf00      	nop
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000

080005c4 <my_i2c_xfer>:
uint32_t const my_i2c_xfer(uint8_t const slave_address,
                           uint8_t const * const p_tx_buffer,
                           size_t const tx_buffer_size,
                           uint8_t * const p_rx_buffer,
                           size_t const rx_buffer_size)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b088      	sub	sp, #32
 80005c8:	af02      	add	r7, sp, #8
 80005ca:	60b9      	str	r1, [r7, #8]
 80005cc:	607a      	str	r2, [r7, #4]
 80005ce:	603b      	str	r3, [r7, #0]
 80005d0:	4603      	mov	r3, r0
 80005d2:	73fb      	strb	r3, [r7, #15]

        uint32_t const timeout = 100;
 80005d4:	2364      	movs	r3, #100	; 0x64
 80005d6:	613b      	str	r3, [r7, #16]
        HAL_StatusTypeDef result = HAL_OK;
 80005d8:	2300      	movs	r3, #0
 80005da:	75fb      	strb	r3, [r7, #23]
        bool is_rx_operation = true;
 80005dc:	2301      	movs	r3, #1
 80005de:	75bb      	strb	r3, [r7, #22]

        if ((NULL == p_tx_buffer) || (0 == tx_buffer_size)) {
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d002      	beq.n	80005ec <my_i2c_xfer+0x28>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d102      	bne.n	80005f2 <my_i2c_xfer+0x2e>
                result = HAL_ERROR;
 80005ec:	2301      	movs	r3, #1
 80005ee:	75fb      	strb	r3, [r7, #23]
 80005f0:	e007      	b.n	8000602 <my_i2c_xfer+0x3e>

        } else if ((NULL == p_rx_buffer) || (0 == rx_buffer_size)) {
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d002      	beq.n	80005fe <my_i2c_xfer+0x3a>
 80005f8:	6a3b      	ldr	r3, [r7, #32]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d101      	bne.n	8000602 <my_i2c_xfer+0x3e>
                is_rx_operation = false;
 80005fe:	2300      	movs	r3, #0
 8000600:	75bb      	strb	r3, [r7, #22]
        }

        if (HAL_OK == result) {
 8000602:	7dfb      	ldrb	r3, [r7, #23]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d10c      	bne.n	8000622 <my_i2c_xfer+0x5e>
                // TX operation
                result = HAL_I2C_Master_Transmit(&hi2c1,
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	b299      	uxth	r1, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	b29a      	uxth	r2, r3
 8000610:	693b      	ldr	r3, [r7, #16]
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	4613      	mov	r3, r2
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	480e      	ldr	r0, [pc, #56]	; (8000654 <my_i2c_xfer+0x90>)
 800061a:	f001 fde5 	bl	80021e8 <HAL_I2C_Master_Transmit>
 800061e:	4603      	mov	r3, r0
 8000620:	75fb      	strb	r3, [r7, #23]
                                                 p_tx_buffer,
                                                 (uint16_t)tx_buffer_size,
                                                 timeout);
        }

        if ((HAL_OK == result) && (is_rx_operation)) {
 8000622:	7dfb      	ldrb	r3, [r7, #23]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d10f      	bne.n	8000648 <my_i2c_xfer+0x84>
 8000628:	7dbb      	ldrb	r3, [r7, #22]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d00c      	beq.n	8000648 <my_i2c_xfer+0x84>
                // RX operation
                result = HAL_I2C_Master_Receive(&hi2c1,
 800062e:	7bfb      	ldrb	r3, [r7, #15]
 8000630:	b299      	uxth	r1, r3
 8000632:	6a3b      	ldr	r3, [r7, #32]
 8000634:	b29a      	uxth	r2, r3
 8000636:	693b      	ldr	r3, [r7, #16]
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	4613      	mov	r3, r2
 800063c:	683a      	ldr	r2, [r7, #0]
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <my_i2c_xfer+0x90>)
 8000640:	f001 fec6 	bl	80023d0 <HAL_I2C_Master_Receive>
 8000644:	4603      	mov	r3, r0
 8000646:	75fb      	strb	r3, [r7, #23]
                                                p_rx_buffer,
                                                rx_buffer_size,
                                                timeout);
        }

        return result;
 8000648:	7dfb      	ldrb	r3, [r7, #23]
}
 800064a:	4618      	mov	r0, r3
 800064c:	3718      	adds	r7, #24
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	200000f8 	.word	0x200000f8

08000658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800065c:	b672      	cpsid	i
}
 800065e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000660:	e7fe      	b.n	8000660 <Error_Handler+0x8>
	...

08000664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <HAL_MspInit+0x44>)
 800066c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800066e:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <HAL_MspInit+0x44>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6613      	str	r3, [r2, #96]	; 0x60
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <HAL_MspInit+0x44>)
 8000678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <HAL_MspInit+0x44>)
 8000684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000686:	4a08      	ldr	r2, [pc, #32]	; (80006a8 <HAL_MspInit+0x44>)
 8000688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068c:	6593      	str	r3, [r2, #88]	; 0x58
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <HAL_MspInit+0x44>)
 8000690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000

080006ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b09e      	sub	sp, #120	; 0x78
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	2254      	movs	r2, #84	; 0x54
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f003 fed3 	bl	8004478 <memset>
  if(hadc->Instance==ADC1)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a25      	ldr	r2, [pc, #148]	; (800076c <HAL_ADC_MspInit+0xc0>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d143      	bne.n	8000764 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006e0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80006e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006e6:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80006e8:	2301      	movs	r3, #1
 80006ea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006ec:	2301      	movs	r3, #1
 80006ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80006f0:	2308      	movs	r3, #8
 80006f2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006f4:	2307      	movs	r3, #7
 80006f6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000700:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000704:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000706:	f107 0310 	add.w	r3, r7, #16
 800070a:	4618      	mov	r0, r3
 800070c:	f003 f902 	bl	8003914 <HAL_RCCEx_PeriphCLKConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000716:	f7ff ff9f 	bl	8000658 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <HAL_ADC_MspInit+0xc4>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	4a14      	ldr	r2, [pc, #80]	; (8000770 <HAL_ADC_MspInit+0xc4>)
 8000720:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000726:	4b12      	ldr	r3, [pc, #72]	; (8000770 <HAL_ADC_MspInit+0xc4>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <HAL_ADC_MspInit+0xc4>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	4a0e      	ldr	r2, [pc, #56]	; (8000770 <HAL_ADC_MspInit+0xc4>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <HAL_ADC_MspInit+0xc4>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800074a:	2301      	movs	r3, #1
 800074c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800074e:	230b      	movs	r3, #11
 8000750:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000756:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800075a:	4619      	mov	r1, r3
 800075c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000760:	f001 fb48 	bl	8001df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000764:	bf00      	nop
 8000766:	3778      	adds	r7, #120	; 0x78
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	50040000 	.word	0x50040000
 8000770:	40021000 	.word	0x40021000

08000774 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b09e      	sub	sp, #120	; 0x78
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800078c:	f107 0310 	add.w	r3, r7, #16
 8000790:	2254      	movs	r2, #84	; 0x54
 8000792:	2100      	movs	r1, #0
 8000794:	4618      	mov	r0, r3
 8000796:	f003 fe6f 	bl	8004478 <memset>
  if(hi2c->Instance==I2C1)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a1e      	ldr	r2, [pc, #120]	; (8000818 <HAL_I2C_MspInit+0xa4>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d135      	bne.n	8000810 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007a4:	2340      	movs	r3, #64	; 0x40
 80007a6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ac:	f107 0310 	add.w	r3, r7, #16
 80007b0:	4618      	mov	r0, r3
 80007b2:	f003 f8af 	bl	8003914 <HAL_RCCEx_PeriphCLKConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80007bc:	f7ff ff4c 	bl	8000658 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c0:	4b16      	ldr	r3, [pc, #88]	; (800081c <HAL_I2C_MspInit+0xa8>)
 80007c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c4:	4a15      	ldr	r2, [pc, #84]	; (800081c <HAL_I2C_MspInit+0xa8>)
 80007c6:	f043 0302 	orr.w	r3, r3, #2
 80007ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007cc:	4b13      	ldr	r3, [pc, #76]	; (800081c <HAL_I2C_MspInit+0xa8>)
 80007ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d0:	f003 0302 	and.w	r3, r3, #2
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007d8:	23c0      	movs	r3, #192	; 0xc0
 80007da:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007dc:	2312      	movs	r3, #18
 80007de:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e4:	2303      	movs	r3, #3
 80007e6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007e8:	2304      	movs	r3, #4
 80007ea:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80007f0:	4619      	mov	r1, r3
 80007f2:	480b      	ldr	r0, [pc, #44]	; (8000820 <HAL_I2C_MspInit+0xac>)
 80007f4:	f001 fafe 	bl	8001df4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007f8:	4b08      	ldr	r3, [pc, #32]	; (800081c <HAL_I2C_MspInit+0xa8>)
 80007fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007fc:	4a07      	ldr	r2, [pc, #28]	; (800081c <HAL_I2C_MspInit+0xa8>)
 80007fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000802:	6593      	str	r3, [r2, #88]	; 0x58
 8000804:	4b05      	ldr	r3, [pc, #20]	; (800081c <HAL_I2C_MspInit+0xa8>)
 8000806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000810:	bf00      	nop
 8000812:	3778      	adds	r7, #120	; 0x78
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40005400 	.word	0x40005400
 800081c:	40021000 	.word	0x40021000
 8000820:	48000400 	.word	0x48000400

08000824 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b09e      	sub	sp, #120	; 0x78
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800083c:	f107 0310 	add.w	r3, r7, #16
 8000840:	2254      	movs	r2, #84	; 0x54
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f003 fe17 	bl	8004478 <memset>
  if(husart->Instance==USART2)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a1f      	ldr	r2, [pc, #124]	; (80008cc <HAL_USART_MspInit+0xa8>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d136      	bne.n	80008c2 <HAL_USART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000854:	2302      	movs	r3, #2
 8000856:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000858:	2300      	movs	r3, #0
 800085a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	4618      	mov	r0, r3
 8000862:	f003 f857 	bl	8003914 <HAL_RCCEx_PeriphCLKConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 800086c:	f7ff fef4 	bl	8000658 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000870:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <HAL_USART_MspInit+0xac>)
 8000872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000874:	4a16      	ldr	r2, [pc, #88]	; (80008d0 <HAL_USART_MspInit+0xac>)
 8000876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800087a:	6593      	str	r3, [r2, #88]	; 0x58
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <HAL_USART_MspInit+0xac>)
 800087e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <HAL_USART_MspInit+0xac>)
 800088a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088c:	4a10      	ldr	r2, [pc, #64]	; (80008d0 <HAL_USART_MspInit+0xac>)
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000894:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <HAL_USART_MspInit+0xac>)
 8000896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80008a0:	231c      	movs	r3, #28
 80008a2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ac:	2303      	movs	r3, #3
 80008ae:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008b0:	2307      	movs	r3, #7
 80008b2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008b8:	4619      	mov	r1, r3
 80008ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008be:	f001 fa99 	bl	8001df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008c2:	bf00      	nop
 80008c4:	3778      	adds	r7, #120	; 0x78
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40004400 	.word	0x40004400
 80008d0:	40021000 	.word	0x40021000

080008d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <NMI_Handler+0x4>

080008da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <HardFault_Handler+0x4>

080008e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <MemManage_Handler+0x4>

080008e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <BusFault_Handler+0x4>

080008ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <UsageFault_Handler+0x4>

080008f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000920:	f000 f8c8 	bl	8000ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}

08000928 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000930:	4a14      	ldr	r2, [pc, #80]	; (8000984 <_sbrk+0x5c>)
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <_sbrk+0x60>)
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <_sbrk+0x64>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d102      	bne.n	800094a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <_sbrk+0x64>)
 8000946:	4a12      	ldr	r2, [pc, #72]	; (8000990 <_sbrk+0x68>)
 8000948:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <_sbrk+0x64>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4413      	add	r3, r2
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	429a      	cmp	r2, r3
 8000956:	d207      	bcs.n	8000968 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000958:	f003 fd64 	bl	8004424 <__errno>
 800095c:	4603      	mov	r3, r0
 800095e:	220c      	movs	r2, #12
 8000960:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000962:	f04f 33ff 	mov.w	r3, #4294967295
 8000966:	e009      	b.n	800097c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <_sbrk+0x64>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <_sbrk+0x64>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4413      	add	r3, r2
 8000976:	4a05      	ldr	r2, [pc, #20]	; (800098c <_sbrk+0x64>)
 8000978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800097a:	68fb      	ldr	r3, [r7, #12]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20010000 	.word	0x20010000
 8000988:	00000400 	.word	0x00000400
 800098c:	200001b4 	.word	0x200001b4
 8000990:	200001d0 	.word	0x200001d0

08000994 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <SystemInit+0x20>)
 800099a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <SystemInit+0x20>)
 80009a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009bc:	f7ff ffea 	bl	8000994 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c0:	480c      	ldr	r0, [pc, #48]	; (80009f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80009c2:	490d      	ldr	r1, [pc, #52]	; (80009f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c4:	4a0d      	ldr	r2, [pc, #52]	; (80009fc <LoopForever+0xe>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c8:	e002      	b.n	80009d0 <LoopCopyDataInit>

080009ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ce:	3304      	adds	r3, #4

080009d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d4:	d3f9      	bcc.n	80009ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d6:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d8:	4c0a      	ldr	r4, [pc, #40]	; (8000a04 <LoopForever+0x16>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009dc:	e001      	b.n	80009e2 <LoopFillZerobss>

080009de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e0:	3204      	adds	r2, #4

080009e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e4:	d3fb      	bcc.n	80009de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009e6:	f003 fd23 	bl	8004430 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009ea:	f7ff fc6f 	bl	80002cc <main>

080009ee <LoopForever>:

LoopForever:
    b LoopForever
 80009ee:	e7fe      	b.n	80009ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009f0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80009fc:	08004e10 	.word	0x08004e10
  ldr r2, =_sbss
 8000a00:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a04:	200001cc 	.word	0x200001cc

08000a08 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a08:	e7fe      	b.n	8000a08 <ADC1_IRQHandler>

08000a0a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a10:	2300      	movs	r3, #0
 8000a12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a14:	2003      	movs	r0, #3
 8000a16:	f001 f9b9 	bl	8001d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a1a:	200f      	movs	r0, #15
 8000a1c:	f000 f80e 	bl	8000a3c <HAL_InitTick>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d002      	beq.n	8000a2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	71fb      	strb	r3, [r7, #7]
 8000a2a:	e001      	b.n	8000a30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a2c:	f7ff fe1a 	bl	8000664 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a30:	79fb      	ldrb	r3, [r7, #7]
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a44:	2300      	movs	r3, #0
 8000a46:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a48:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <HAL_InitTick+0x6c>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d023      	beq.n	8000a98 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a50:	4b16      	ldr	r3, [pc, #88]	; (8000aac <HAL_InitTick+0x70>)
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <HAL_InitTick+0x6c>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a66:	4618      	mov	r0, r3
 8000a68:	f001 f9b7 	bl	8001dda <HAL_SYSTICK_Config>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d10f      	bne.n	8000a92 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2b0f      	cmp	r3, #15
 8000a76:	d809      	bhi.n	8000a8c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	6879      	ldr	r1, [r7, #4]
 8000a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a80:	f001 f98f 	bl	8001da2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a84:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <HAL_InitTick+0x74>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6013      	str	r3, [r2, #0]
 8000a8a:	e007      	b.n	8000a9c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	73fb      	strb	r3, [r7, #15]
 8000a90:	e004      	b.n	8000a9c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	73fb      	strb	r3, [r7, #15]
 8000a96:	e001      	b.n	8000a9c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000008 	.word	0x20000008
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	20000004 	.word	0x20000004

08000ab4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_IncTick+0x20>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_IncTick+0x24>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <HAL_IncTick+0x24>)
 8000ac6:	6013      	str	r3, [r2, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	200001b8 	.word	0x200001b8

08000adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <HAL_GetTick+0x14>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	200001b8 	.word	0x200001b8

08000af4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000afc:	f7ff ffee 	bl	8000adc <HAL_GetTick>
 8000b00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b0c:	d005      	beq.n	8000b1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <HAL_Delay+0x44>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	461a      	mov	r2, r3
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	4413      	add	r3, r2
 8000b18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b1a:	bf00      	nop
 8000b1c:	f7ff ffde 	bl	8000adc <HAL_GetTick>
 8000b20:	4602      	mov	r2, r0
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d8f7      	bhi.n	8000b1c <HAL_Delay+0x28>
  {
  }
}
 8000b2c:	bf00      	nop
 8000b2e:	bf00      	nop
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000008 	.word	0x20000008

08000b3c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	431a      	orrs	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	609a      	str	r2, [r3, #8]
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
 8000b6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	431a      	orrs	r2, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b087      	sub	sp, #28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
 8000bb0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	3360      	adds	r3, #96	; 0x60
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	4413      	add	r3, r2
 8000bbe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <LL_ADC_SetOffset+0x44>)
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000bce:	683a      	ldr	r2, [r7, #0]
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000bdc:	bf00      	nop
 8000bde:	371c      	adds	r7, #28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	03fff000 	.word	0x03fff000

08000bec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	3360      	adds	r3, #96	; 0x60
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	4413      	add	r3, r2
 8000c02:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b087      	sub	sp, #28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	3360      	adds	r3, #96	; 0x60
 8000c28:	461a      	mov	r2, r3
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	4413      	add	r3, r2
 8000c30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	431a      	orrs	r2, r3
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000c42:	bf00      	nop
 8000c44:	371c      	adds	r7, #28
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	b083      	sub	sp, #12
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d101      	bne.n	8000c66 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000c62:	2301      	movs	r3, #1
 8000c64:	e000      	b.n	8000c68 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000c66:	2300      	movs	r3, #0
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b087      	sub	sp, #28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	3330      	adds	r3, #48	; 0x30
 8000c84:	461a      	mov	r2, r3
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	0a1b      	lsrs	r3, r3, #8
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	f003 030c 	and.w	r3, r3, #12
 8000c90:	4413      	add	r3, r2
 8000c92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	f003 031f 	and.w	r3, r3, #31
 8000c9e:	211f      	movs	r1, #31
 8000ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	0e9b      	lsrs	r3, r3, #26
 8000cac:	f003 011f 	and.w	r1, r3, #31
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	f003 031f 	and.w	r3, r3, #31
 8000cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cba:	431a      	orrs	r2, r3
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000cc0:	bf00      	nop
 8000cc2:	371c      	adds	r7, #28
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b087      	sub	sp, #28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	3314      	adds	r3, #20
 8000cdc:	461a      	mov	r2, r3
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	0e5b      	lsrs	r3, r3, #25
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	4413      	add	r3, r2
 8000cea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	0d1b      	lsrs	r3, r3, #20
 8000cf4:	f003 031f 	and.w	r3, r3, #31
 8000cf8:	2107      	movs	r1, #7
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	401a      	ands	r2, r3
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	0d1b      	lsrs	r3, r3, #20
 8000d06:	f003 031f 	and.w	r3, r3, #31
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d10:	431a      	orrs	r2, r3
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000d16:	bf00      	nop
 8000d18:	371c      	adds	r7, #28
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
	...

08000d24 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	401a      	ands	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f003 0318 	and.w	r3, r3, #24
 8000d46:	4908      	ldr	r1, [pc, #32]	; (8000d68 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000d48:	40d9      	lsrs	r1, r3
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	400b      	ands	r3, r1
 8000d4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d52:	431a      	orrs	r2, r3
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000d5a:	bf00      	nop
 8000d5c:	3714      	adds	r7, #20
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	0007ffff 	.word	0x0007ffff

08000d6c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000d7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	6093      	str	r3, [r2, #8]
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000da0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000da4:	d101      	bne.n	8000daa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000da6:	2301      	movs	r3, #1
 8000da8:	e000      	b.n	8000dac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000daa:	2300      	movs	r3, #0
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000dc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000dcc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000df4:	d101      	bne.n	8000dfa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000df6:	2301      	movs	r3, #1
 8000df8:	e000      	b.n	8000dfc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000dfa:	2300      	movs	r3, #0
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000e18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e1c:	f043 0201 	orr.w	r2, r3, #1
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d101      	bne.n	8000e48 <LL_ADC_IsEnabled+0x18>
 8000e44:	2301      	movs	r3, #1
 8000e46:	e000      	b.n	8000e4a <LL_ADC_IsEnabled+0x1a>
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b083      	sub	sp, #12
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000e66:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e6a:	f043 0204 	orr.w	r2, r3, #4
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	b083      	sub	sp, #12
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	f003 0304 	and.w	r3, r3, #4
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	d101      	bne.n	8000e96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000e92:	2301      	movs	r3, #1
 8000e94:	e000      	b.n	8000e98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000e96:	2300      	movs	r3, #0
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	f003 0308 	and.w	r3, r3, #8
 8000eb4:	2b08      	cmp	r3, #8
 8000eb6:	d101      	bne.n	8000ebc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e000      	b.n	8000ebe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b088      	sub	sp, #32
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d101      	bne.n	8000ee6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e12c      	b.n	8001140 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	691b      	ldr	r3, [r3, #16]
 8000eea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d109      	bne.n	8000f08 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff fbd9 	bl	80006ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff3f 	bl	8000d90 <LL_ADC_IsDeepPowerDownEnabled>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d004      	beq.n	8000f22 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff25 	bl	8000d6c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff ff5a 	bl	8000de0 <LL_ADC_IsInternalRegulatorEnabled>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d115      	bne.n	8000f5e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff ff3e 	bl	8000db8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000f3c:	4b82      	ldr	r3, [pc, #520]	; (8001148 <HAL_ADC_Init+0x27c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	099b      	lsrs	r3, r3, #6
 8000f42:	4a82      	ldr	r2, [pc, #520]	; (800114c <HAL_ADC_Init+0x280>)
 8000f44:	fba2 2303 	umull	r2, r3, r2, r3
 8000f48:	099b      	lsrs	r3, r3, #6
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000f50:	e002      	b.n	8000f58 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	3b01      	subs	r3, #1
 8000f56:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1f9      	bne.n	8000f52 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff ff3c 	bl	8000de0 <LL_ADC_IsInternalRegulatorEnabled>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d10d      	bne.n	8000f8a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f72:	f043 0210 	orr.w	r2, r3, #16
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7e:	f043 0201 	orr.w	r2, r3, #1
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff ff75 	bl	8000e7e <LL_ADC_REG_IsConversionOngoing>
 8000f94:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f9a:	f003 0310 	and.w	r3, r3, #16
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f040 80c5 	bne.w	800112e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	f040 80c1 	bne.w	800112e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fb0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000fb4:	f043 0202 	orr.w	r2, r3, #2
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ff35 	bl	8000e30 <LL_ADC_IsEnabled>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d10b      	bne.n	8000fe4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000fcc:	4860      	ldr	r0, [pc, #384]	; (8001150 <HAL_ADC_Init+0x284>)
 8000fce:	f7ff ff2f 	bl	8000e30 <LL_ADC_IsEnabled>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d105      	bne.n	8000fe4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	485d      	ldr	r0, [pc, #372]	; (8001154 <HAL_ADC_Init+0x288>)
 8000fe0:	f7ff fdac 	bl	8000b3c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	7e5b      	ldrb	r3, [r3, #25]
 8000fe8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000fee:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000ff4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000ffa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001002:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d106      	bne.n	8001020 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001016:	3b01      	subs	r3, #1
 8001018:	045b      	lsls	r3, r3, #17
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001024:	2b00      	cmp	r3, #0
 8001026:	d009      	beq.n	800103c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800102c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001034:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	68da      	ldr	r2, [r3, #12]
 8001042:	4b45      	ldr	r3, [pc, #276]	; (8001158 <HAL_ADC_Init+0x28c>)
 8001044:	4013      	ands	r3, r2
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	6812      	ldr	r2, [r2, #0]
 800104a:	69b9      	ldr	r1, [r7, #24]
 800104c:	430b      	orrs	r3, r1
 800104e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff12 	bl	8000e7e <LL_ADC_REG_IsConversionOngoing>
 800105a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff1f 	bl	8000ea4 <LL_ADC_INJ_IsConversionOngoing>
 8001066:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d13d      	bne.n	80010ea <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d13a      	bne.n	80010ea <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001078:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001080:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001090:	f023 0302 	bic.w	r3, r3, #2
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	6812      	ldr	r2, [r2, #0]
 8001098:	69b9      	ldr	r1, [r7, #24]
 800109a:	430b      	orrs	r3, r1
 800109c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d118      	bne.n	80010da <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	691b      	ldr	r3, [r3, #16]
 80010ae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80010b2:	f023 0304 	bic.w	r3, r3, #4
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80010be:	4311      	orrs	r1, r2
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80010c4:	4311      	orrs	r1, r2
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80010ca:	430a      	orrs	r2, r1
 80010cc:	431a      	orrs	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f042 0201 	orr.w	r2, r2, #1
 80010d6:	611a      	str	r2, [r3, #16]
 80010d8:	e007      	b.n	80010ea <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	691a      	ldr	r2, [r3, #16]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 0201 	bic.w	r2, r2, #1
 80010e8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d10c      	bne.n	800110c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f8:	f023 010f 	bic.w	r1, r3, #15
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69db      	ldr	r3, [r3, #28]
 8001100:	1e5a      	subs	r2, r3, #1
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	430a      	orrs	r2, r1
 8001108:	631a      	str	r2, [r3, #48]	; 0x30
 800110a:	e007      	b.n	800111c <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f022 020f 	bic.w	r2, r2, #15
 800111a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001120:	f023 0303 	bic.w	r3, r3, #3
 8001124:	f043 0201 	orr.w	r2, r3, #1
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	655a      	str	r2, [r3, #84]	; 0x54
 800112c:	e007      	b.n	800113e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001132:	f043 0210 	orr.w	r2, r3, #16
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800113e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3720      	adds	r7, #32
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000000 	.word	0x20000000
 800114c:	053e2d63 	.word	0x053e2d63
 8001150:	50040000 	.word	0x50040000
 8001154:	50040300 	.word	0x50040300
 8001158:	fff0c007 	.word	0xfff0c007

0800115c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fe88 	bl	8000e7e <LL_ADC_REG_IsConversionOngoing>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d14f      	bne.n	8001214 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800117a:	2b01      	cmp	r3, #1
 800117c:	d101      	bne.n	8001182 <HAL_ADC_Start+0x26>
 800117e:	2302      	movs	r3, #2
 8001180:	e04b      	b.n	800121a <HAL_ADC_Start+0xbe>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2201      	movs	r2, #1
 8001186:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 fcc6 	bl	8001b1c <ADC_Enable>
 8001190:	4603      	mov	r3, r0
 8001192:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d137      	bne.n	800120a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800119e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80011a2:	f023 0301 	bic.w	r3, r3, #1
 80011a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011ba:	d106      	bne.n	80011ca <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c0:	f023 0206 	bic.w	r2, r3, #6
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	659a      	str	r2, [r3, #88]	; 0x58
 80011c8:	e002      	b.n	80011d0 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	221c      	movs	r2, #28
 80011d6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d007      	beq.n	80011fe <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff fe27 	bl	8000e56 <LL_ADC_REG_StartConversion>
 8001208:	e006      	b.n	8001218 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001212:	e001      	b.n	8001218 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001214:	2302      	movs	r3, #2
 8001216:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001218:	7bfb      	ldrb	r3, [r7, #15]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b086      	sub	sp, #24
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	695b      	ldr	r3, [r3, #20]
 8001230:	2b08      	cmp	r3, #8
 8001232:	d102      	bne.n	800123a <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001234:	2308      	movs	r3, #8
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	e010      	b.n	800125c <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	2b00      	cmp	r3, #0
 8001246:	d007      	beq.n	8001258 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800124c:	f043 0220 	orr.w	r2, r3, #32
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e06f      	b.n	8001338 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001258:	2304      	movs	r3, #4
 800125a:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800125c:	f7ff fc3e 	bl	8000adc <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001262:	e021      	b.n	80012a8 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800126a:	d01d      	beq.n	80012a8 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800126c:	f7ff fc36 	bl	8000adc <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	683a      	ldr	r2, [r7, #0]
 8001278:	429a      	cmp	r2, r3
 800127a:	d302      	bcc.n	8001282 <HAL_ADC_PollForConversion+0x60>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d112      	bne.n	80012a8 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	4013      	ands	r3, r2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d10b      	bne.n	80012a8 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001294:	f043 0204 	orr.w	r2, r3, #4
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e047      	b.n	8001338 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	4013      	ands	r3, r2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0d6      	beq.n	8001264 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fcc1 	bl	8000c4e <LL_ADC_REG_IsTriggerSourceSWStart>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d01c      	beq.n	800130c <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7e5b      	ldrb	r3, [r3, #25]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d118      	bne.n	800130c <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0308 	and.w	r3, r3, #8
 80012e4:	2b08      	cmp	r3, #8
 80012e6:	d111      	bne.n	800130c <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d105      	bne.n	800130c <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001304:	f043 0201 	orr.w	r2, r3, #1
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	2b08      	cmp	r3, #8
 8001318:	d104      	bne.n	8001324 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2208      	movs	r2, #8
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	e008      	b.n	8001336 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d103      	bne.n	8001336 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	220c      	movs	r2, #12
 8001334:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001336:	2300      	movs	r3, #0
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b0b6      	sub	sp, #216	; 0xd8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001366:	2300      	movs	r3, #0
 8001368:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001376:	2b01      	cmp	r3, #1
 8001378:	d101      	bne.n	800137e <HAL_ADC_ConfigChannel+0x22>
 800137a:	2302      	movs	r3, #2
 800137c:	e3b9      	b.n	8001af2 <HAL_ADC_ConfigChannel+0x796>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2201      	movs	r2, #1
 8001382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fd77 	bl	8000e7e <LL_ADC_REG_IsConversionOngoing>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	f040 839e 	bne.w	8001ad4 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b05      	cmp	r3, #5
 800139e:	d824      	bhi.n	80013ea <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	3b02      	subs	r3, #2
 80013a6:	2b03      	cmp	r3, #3
 80013a8:	d81b      	bhi.n	80013e2 <HAL_ADC_ConfigChannel+0x86>
 80013aa:	a201      	add	r2, pc, #4	; (adr r2, 80013b0 <HAL_ADC_ConfigChannel+0x54>)
 80013ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b0:	080013c1 	.word	0x080013c1
 80013b4:	080013c9 	.word	0x080013c9
 80013b8:	080013d1 	.word	0x080013d1
 80013bc:	080013d9 	.word	0x080013d9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	220c      	movs	r2, #12
 80013c4:	605a      	str	r2, [r3, #4]
          break;
 80013c6:	e011      	b.n	80013ec <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	2212      	movs	r2, #18
 80013cc:	605a      	str	r2, [r3, #4]
          break;
 80013ce:	e00d      	b.n	80013ec <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	2218      	movs	r2, #24
 80013d4:	605a      	str	r2, [r3, #4]
          break;
 80013d6:	e009      	b.n	80013ec <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013de:	605a      	str	r2, [r3, #4]
          break;
 80013e0:	e004      	b.n	80013ec <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	2206      	movs	r2, #6
 80013e6:	605a      	str	r2, [r3, #4]
          break;
 80013e8:	e000      	b.n	80013ec <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80013ea:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6818      	ldr	r0, [r3, #0]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	6859      	ldr	r1, [r3, #4]
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	f7ff fc3b 	bl	8000c74 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fd3b 	bl	8000e7e <LL_ADC_REG_IsConversionOngoing>
 8001408:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fd47 	bl	8000ea4 <LL_ADC_INJ_IsConversionOngoing>
 8001416:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800141a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800141e:	2b00      	cmp	r3, #0
 8001420:	f040 81a6 	bne.w	8001770 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001424:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001428:	2b00      	cmp	r3, #0
 800142a:	f040 81a1 	bne.w	8001770 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6818      	ldr	r0, [r3, #0]
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	6819      	ldr	r1, [r3, #0]
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	461a      	mov	r2, r3
 800143c:	f7ff fc46 	bl	8000ccc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	695a      	ldr	r2, [r3, #20]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	08db      	lsrs	r3, r3, #3
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	2b04      	cmp	r3, #4
 8001460:	d00a      	beq.n	8001478 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6818      	ldr	r0, [r3, #0]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	6919      	ldr	r1, [r3, #16]
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001472:	f7ff fb97 	bl	8000ba4 <LL_ADC_SetOffset>
 8001476:	e17b      	b.n	8001770 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2100      	movs	r1, #0
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fbb4 	bl	8000bec <LL_ADC_GetOffsetChannel>
 8001484:	4603      	mov	r3, r0
 8001486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10a      	bne.n	80014a4 <HAL_ADC_ConfigChannel+0x148>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2100      	movs	r1, #0
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fba9 	bl	8000bec <LL_ADC_GetOffsetChannel>
 800149a:	4603      	mov	r3, r0
 800149c:	0e9b      	lsrs	r3, r3, #26
 800149e:	f003 021f 	and.w	r2, r3, #31
 80014a2:	e01e      	b.n	80014e2 <HAL_ADC_ConfigChannel+0x186>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2100      	movs	r1, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fb9e 	bl	8000bec <LL_ADC_GetOffsetChannel>
 80014b0:	4603      	mov	r3, r0
 80014b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80014ba:	fa93 f3a3 	rbit	r3, r3
 80014be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80014c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80014ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80014d2:	2320      	movs	r3, #32
 80014d4:	e004      	b.n	80014e0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80014d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80014da:	fab3 f383 	clz	r3, r3
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d105      	bne.n	80014fa <HAL_ADC_ConfigChannel+0x19e>
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	0e9b      	lsrs	r3, r3, #26
 80014f4:	f003 031f 	and.w	r3, r3, #31
 80014f8:	e018      	b.n	800152c <HAL_ADC_ConfigChannel+0x1d0>
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001502:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001506:	fa93 f3a3 	rbit	r3, r3
 800150a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800150e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001512:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001516:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800151e:	2320      	movs	r3, #32
 8001520:	e004      	b.n	800152c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001522:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001526:	fab3 f383 	clz	r3, r3
 800152a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800152c:	429a      	cmp	r2, r3
 800152e:	d106      	bne.n	800153e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2200      	movs	r2, #0
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fb6d 	bl	8000c18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2101      	movs	r1, #1
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fb51 	bl	8000bec <LL_ADC_GetOffsetChannel>
 800154a:	4603      	mov	r3, r0
 800154c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001550:	2b00      	cmp	r3, #0
 8001552:	d10a      	bne.n	800156a <HAL_ADC_ConfigChannel+0x20e>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2101      	movs	r1, #1
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fb46 	bl	8000bec <LL_ADC_GetOffsetChannel>
 8001560:	4603      	mov	r3, r0
 8001562:	0e9b      	lsrs	r3, r3, #26
 8001564:	f003 021f 	and.w	r2, r3, #31
 8001568:	e01e      	b.n	80015a8 <HAL_ADC_ConfigChannel+0x24c>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2101      	movs	r1, #1
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fb3b 	bl	8000bec <LL_ADC_GetOffsetChannel>
 8001576:	4603      	mov	r3, r0
 8001578:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001580:	fa93 f3a3 	rbit	r3, r3
 8001584:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001588:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800158c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001590:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001594:	2b00      	cmp	r3, #0
 8001596:	d101      	bne.n	800159c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001598:	2320      	movs	r3, #32
 800159a:	e004      	b.n	80015a6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800159c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015a0:	fab3 f383 	clz	r3, r3
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d105      	bne.n	80015c0 <HAL_ADC_ConfigChannel+0x264>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	0e9b      	lsrs	r3, r3, #26
 80015ba:	f003 031f 	and.w	r3, r3, #31
 80015be:	e018      	b.n	80015f2 <HAL_ADC_ConfigChannel+0x296>
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80015cc:	fa93 f3a3 	rbit	r3, r3
 80015d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80015d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80015d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80015dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d101      	bne.n	80015e8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80015e4:	2320      	movs	r3, #32
 80015e6:	e004      	b.n	80015f2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80015e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80015ec:	fab3 f383 	clz	r3, r3
 80015f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d106      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2200      	movs	r2, #0
 80015fc:	2101      	movs	r1, #1
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fb0a 	bl	8000c18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2102      	movs	r1, #2
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff faee 	bl	8000bec <LL_ADC_GetOffsetChannel>
 8001610:	4603      	mov	r3, r0
 8001612:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001616:	2b00      	cmp	r3, #0
 8001618:	d10a      	bne.n	8001630 <HAL_ADC_ConfigChannel+0x2d4>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2102      	movs	r1, #2
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fae3 	bl	8000bec <LL_ADC_GetOffsetChannel>
 8001626:	4603      	mov	r3, r0
 8001628:	0e9b      	lsrs	r3, r3, #26
 800162a:	f003 021f 	and.w	r2, r3, #31
 800162e:	e01e      	b.n	800166e <HAL_ADC_ConfigChannel+0x312>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2102      	movs	r1, #2
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fad8 	bl	8000bec <LL_ADC_GetOffsetChannel>
 800163c:	4603      	mov	r3, r0
 800163e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001642:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001646:	fa93 f3a3 	rbit	r3, r3
 800164a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800164e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001652:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001656:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800165e:	2320      	movs	r3, #32
 8001660:	e004      	b.n	800166c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001662:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001666:	fab3 f383 	clz	r3, r3
 800166a:	b2db      	uxtb	r3, r3
 800166c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001676:	2b00      	cmp	r3, #0
 8001678:	d105      	bne.n	8001686 <HAL_ADC_ConfigChannel+0x32a>
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	0e9b      	lsrs	r3, r3, #26
 8001680:	f003 031f 	and.w	r3, r3, #31
 8001684:	e016      	b.n	80016b4 <HAL_ADC_ConfigChannel+0x358>
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001692:	fa93 f3a3 	rbit	r3, r3
 8001696:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001698:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800169a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800169e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80016a6:	2320      	movs	r3, #32
 80016a8:	e004      	b.n	80016b4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80016aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016ae:	fab3 f383 	clz	r3, r3
 80016b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d106      	bne.n	80016c6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2200      	movs	r2, #0
 80016be:	2102      	movs	r1, #2
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff faa9 	bl	8000c18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2103      	movs	r1, #3
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fa8d 	bl	8000bec <LL_ADC_GetOffsetChannel>
 80016d2:	4603      	mov	r3, r0
 80016d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d10a      	bne.n	80016f2 <HAL_ADC_ConfigChannel+0x396>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2103      	movs	r1, #3
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fa82 	bl	8000bec <LL_ADC_GetOffsetChannel>
 80016e8:	4603      	mov	r3, r0
 80016ea:	0e9b      	lsrs	r3, r3, #26
 80016ec:	f003 021f 	and.w	r2, r3, #31
 80016f0:	e017      	b.n	8001722 <HAL_ADC_ConfigChannel+0x3c6>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2103      	movs	r1, #3
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fa77 	bl	8000bec <LL_ADC_GetOffsetChannel>
 80016fe:	4603      	mov	r3, r0
 8001700:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001702:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001704:	fa93 f3a3 	rbit	r3, r3
 8001708:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800170a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800170c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800170e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001710:	2b00      	cmp	r3, #0
 8001712:	d101      	bne.n	8001718 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001714:	2320      	movs	r3, #32
 8001716:	e003      	b.n	8001720 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001718:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800171a:	fab3 f383 	clz	r3, r3
 800171e:	b2db      	uxtb	r3, r3
 8001720:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800172a:	2b00      	cmp	r3, #0
 800172c:	d105      	bne.n	800173a <HAL_ADC_ConfigChannel+0x3de>
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	0e9b      	lsrs	r3, r3, #26
 8001734:	f003 031f 	and.w	r3, r3, #31
 8001738:	e011      	b.n	800175e <HAL_ADC_ConfigChannel+0x402>
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001740:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001742:	fa93 f3a3 	rbit	r3, r3
 8001746:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001748:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800174a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800174c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001752:	2320      	movs	r3, #32
 8001754:	e003      	b.n	800175e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001758:	fab3 f383 	clz	r3, r3
 800175c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800175e:	429a      	cmp	r2, r3
 8001760:	d106      	bne.n	8001770 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2200      	movs	r2, #0
 8001768:	2103      	movs	r1, #3
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fa54 	bl	8000c18 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fb5b 	bl	8000e30 <LL_ADC_IsEnabled>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	f040 813f 	bne.w	8001a00 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6818      	ldr	r0, [r3, #0]
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	6819      	ldr	r1, [r3, #0]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	461a      	mov	r2, r3
 8001790:	f7ff fac8 	bl	8000d24 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	4a8e      	ldr	r2, [pc, #568]	; (80019d4 <HAL_ADC_ConfigChannel+0x678>)
 800179a:	4293      	cmp	r3, r2
 800179c:	f040 8130 	bne.w	8001a00 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d10b      	bne.n	80017c8 <HAL_ADC_ConfigChannel+0x46c>
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	0e9b      	lsrs	r3, r3, #26
 80017b6:	3301      	adds	r3, #1
 80017b8:	f003 031f 	and.w	r3, r3, #31
 80017bc:	2b09      	cmp	r3, #9
 80017be:	bf94      	ite	ls
 80017c0:	2301      	movls	r3, #1
 80017c2:	2300      	movhi	r3, #0
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	e019      	b.n	80017fc <HAL_ADC_ConfigChannel+0x4a0>
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017d0:	fa93 f3a3 	rbit	r3, r3
 80017d4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80017d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017d8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80017da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80017e0:	2320      	movs	r3, #32
 80017e2:	e003      	b.n	80017ec <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80017e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017e6:	fab3 f383 	clz	r3, r3
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	3301      	adds	r3, #1
 80017ee:	f003 031f 	and.w	r3, r3, #31
 80017f2:	2b09      	cmp	r3, #9
 80017f4:	bf94      	ite	ls
 80017f6:	2301      	movls	r3, #1
 80017f8:	2300      	movhi	r3, #0
 80017fa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d079      	beq.n	80018f4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001808:	2b00      	cmp	r3, #0
 800180a:	d107      	bne.n	800181c <HAL_ADC_ConfigChannel+0x4c0>
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	0e9b      	lsrs	r3, r3, #26
 8001812:	3301      	adds	r3, #1
 8001814:	069b      	lsls	r3, r3, #26
 8001816:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800181a:	e015      	b.n	8001848 <HAL_ADC_ConfigChannel+0x4ec>
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001822:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001824:	fa93 f3a3 	rbit	r3, r3
 8001828:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800182a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800182c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800182e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001834:	2320      	movs	r3, #32
 8001836:	e003      	b.n	8001840 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800183a:	fab3 f383 	clz	r3, r3
 800183e:	b2db      	uxtb	r3, r3
 8001840:	3301      	adds	r3, #1
 8001842:	069b      	lsls	r3, r3, #26
 8001844:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001850:	2b00      	cmp	r3, #0
 8001852:	d109      	bne.n	8001868 <HAL_ADC_ConfigChannel+0x50c>
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	0e9b      	lsrs	r3, r3, #26
 800185a:	3301      	adds	r3, #1
 800185c:	f003 031f 	and.w	r3, r3, #31
 8001860:	2101      	movs	r1, #1
 8001862:	fa01 f303 	lsl.w	r3, r1, r3
 8001866:	e017      	b.n	8001898 <HAL_ADC_ConfigChannel+0x53c>
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001870:	fa93 f3a3 	rbit	r3, r3
 8001874:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001878:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800187a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001880:	2320      	movs	r3, #32
 8001882:	e003      	b.n	800188c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001886:	fab3 f383 	clz	r3, r3
 800188a:	b2db      	uxtb	r3, r3
 800188c:	3301      	adds	r3, #1
 800188e:	f003 031f 	and.w	r3, r3, #31
 8001892:	2101      	movs	r1, #1
 8001894:	fa01 f303 	lsl.w	r3, r1, r3
 8001898:	ea42 0103 	orr.w	r1, r2, r3
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d10a      	bne.n	80018be <HAL_ADC_ConfigChannel+0x562>
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	0e9b      	lsrs	r3, r3, #26
 80018ae:	3301      	adds	r3, #1
 80018b0:	f003 021f 	and.w	r2, r3, #31
 80018b4:	4613      	mov	r3, r2
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4413      	add	r3, r2
 80018ba:	051b      	lsls	r3, r3, #20
 80018bc:	e018      	b.n	80018f0 <HAL_ADC_ConfigChannel+0x594>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018c6:	fa93 f3a3 	rbit	r3, r3
 80018ca:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80018cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80018d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80018d6:	2320      	movs	r3, #32
 80018d8:	e003      	b.n	80018e2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80018da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018dc:	fab3 f383 	clz	r3, r3
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	3301      	adds	r3, #1
 80018e4:	f003 021f 	and.w	r2, r3, #31
 80018e8:	4613      	mov	r3, r2
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	4413      	add	r3, r2
 80018ee:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018f0:	430b      	orrs	r3, r1
 80018f2:	e080      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d107      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x5b4>
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	0e9b      	lsrs	r3, r3, #26
 8001906:	3301      	adds	r3, #1
 8001908:	069b      	lsls	r3, r3, #26
 800190a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800190e:	e015      	b.n	800193c <HAL_ADC_ConfigChannel+0x5e0>
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001918:	fa93 f3a3 	rbit	r3, r3
 800191c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800191e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001920:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001928:	2320      	movs	r3, #32
 800192a:	e003      	b.n	8001934 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800192c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800192e:	fab3 f383 	clz	r3, r3
 8001932:	b2db      	uxtb	r3, r3
 8001934:	3301      	adds	r3, #1
 8001936:	069b      	lsls	r3, r3, #26
 8001938:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001944:	2b00      	cmp	r3, #0
 8001946:	d109      	bne.n	800195c <HAL_ADC_ConfigChannel+0x600>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	0e9b      	lsrs	r3, r3, #26
 800194e:	3301      	adds	r3, #1
 8001950:	f003 031f 	and.w	r3, r3, #31
 8001954:	2101      	movs	r1, #1
 8001956:	fa01 f303 	lsl.w	r3, r1, r3
 800195a:	e017      	b.n	800198c <HAL_ADC_ConfigChannel+0x630>
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001962:	6a3b      	ldr	r3, [r7, #32]
 8001964:	fa93 f3a3 	rbit	r3, r3
 8001968:	61fb      	str	r3, [r7, #28]
  return result;
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001974:	2320      	movs	r3, #32
 8001976:	e003      	b.n	8001980 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197a:	fab3 f383 	clz	r3, r3
 800197e:	b2db      	uxtb	r3, r3
 8001980:	3301      	adds	r3, #1
 8001982:	f003 031f 	and.w	r3, r3, #31
 8001986:	2101      	movs	r1, #1
 8001988:	fa01 f303 	lsl.w	r3, r1, r3
 800198c:	ea42 0103 	orr.w	r1, r2, r3
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10d      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x65c>
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	0e9b      	lsrs	r3, r3, #26
 80019a2:	3301      	adds	r3, #1
 80019a4:	f003 021f 	and.w	r2, r3, #31
 80019a8:	4613      	mov	r3, r2
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	4413      	add	r3, r2
 80019ae:	3b1e      	subs	r3, #30
 80019b0:	051b      	lsls	r3, r3, #20
 80019b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019b6:	e01d      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x698>
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	fa93 f3a3 	rbit	r3, r3
 80019c4:	613b      	str	r3, [r7, #16]
  return result;
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d103      	bne.n	80019d8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80019d0:	2320      	movs	r3, #32
 80019d2:	e005      	b.n	80019e0 <HAL_ADC_ConfigChannel+0x684>
 80019d4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	fab3 f383 	clz	r3, r3
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	3301      	adds	r3, #1
 80019e2:	f003 021f 	and.w	r2, r3, #31
 80019e6:	4613      	mov	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4413      	add	r3, r2
 80019ec:	3b1e      	subs	r3, #30
 80019ee:	051b      	lsls	r3, r3, #20
 80019f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019f4:	430b      	orrs	r3, r1
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	6892      	ldr	r2, [r2, #8]
 80019fa:	4619      	mov	r1, r3
 80019fc:	f7ff f966 	bl	8000ccc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b3d      	ldr	r3, [pc, #244]	; (8001afc <HAL_ADC_ConfigChannel+0x7a0>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d06c      	beq.n	8001ae6 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a0c:	483c      	ldr	r0, [pc, #240]	; (8001b00 <HAL_ADC_ConfigChannel+0x7a4>)
 8001a0e:	f7ff f8bb 	bl	8000b88 <LL_ADC_GetCommonPathInternalCh>
 8001a12:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a3a      	ldr	r2, [pc, #232]	; (8001b04 <HAL_ADC_ConfigChannel+0x7a8>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d127      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001a20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d121      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a35      	ldr	r2, [pc, #212]	; (8001b08 <HAL_ADC_ConfigChannel+0x7ac>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d157      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a3e:	4619      	mov	r1, r3
 8001a40:	482f      	ldr	r0, [pc, #188]	; (8001b00 <HAL_ADC_ConfigChannel+0x7a4>)
 8001a42:	f7ff f88e 	bl	8000b62 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a46:	4b31      	ldr	r3, [pc, #196]	; (8001b0c <HAL_ADC_ConfigChannel+0x7b0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	099b      	lsrs	r3, r3, #6
 8001a4c:	4a30      	ldr	r2, [pc, #192]	; (8001b10 <HAL_ADC_ConfigChannel+0x7b4>)
 8001a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a52:	099b      	lsrs	r3, r3, #6
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	4613      	mov	r3, r2
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	4413      	add	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001a60:	e002      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	3b01      	subs	r3, #1
 8001a66:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f9      	bne.n	8001a62 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a6e:	e03a      	b.n	8001ae6 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a27      	ldr	r2, [pc, #156]	; (8001b14 <HAL_ADC_ConfigChannel+0x7b8>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d113      	bne.n	8001aa2 <HAL_ADC_ConfigChannel+0x746>
 8001a7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10d      	bne.n	8001aa2 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a1f      	ldr	r2, [pc, #124]	; (8001b08 <HAL_ADC_ConfigChannel+0x7ac>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d12a      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4819      	ldr	r0, [pc, #100]	; (8001b00 <HAL_ADC_ConfigChannel+0x7a4>)
 8001a9c:	f7ff f861 	bl	8000b62 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001aa0:	e021      	b.n	8001ae6 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a1c      	ldr	r2, [pc, #112]	; (8001b18 <HAL_ADC_ConfigChannel+0x7bc>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d11c      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001aac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ab0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d116      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a12      	ldr	r2, [pc, #72]	; (8001b08 <HAL_ADC_ConfigChannel+0x7ac>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d111      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ac2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ac6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001aca:	4619      	mov	r1, r3
 8001acc:	480c      	ldr	r0, [pc, #48]	; (8001b00 <HAL_ADC_ConfigChannel+0x7a4>)
 8001ace:	f7ff f848 	bl	8000b62 <LL_ADC_SetCommonPathInternalCh>
 8001ad2:	e008      	b.n	8001ae6 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad8:	f043 0220 	orr.w	r2, r3, #32
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001aee:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	37d8      	adds	r7, #216	; 0xd8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	80080000 	.word	0x80080000
 8001b00:	50040300 	.word	0x50040300
 8001b04:	c7520000 	.word	0xc7520000
 8001b08:	50040000 	.word	0x50040000
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	053e2d63 	.word	0x053e2d63
 8001b14:	cb840000 	.word	0xcb840000
 8001b18:	80000001 	.word	0x80000001

08001b1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff f97f 	bl	8000e30 <LL_ADC_IsEnabled>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d169      	bne.n	8001c0c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689a      	ldr	r2, [r3, #8]
 8001b3e:	4b36      	ldr	r3, [pc, #216]	; (8001c18 <ADC_Enable+0xfc>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00d      	beq.n	8001b62 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4a:	f043 0210 	orr.w	r2, r3, #16
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b56:	f043 0201 	orr.w	r2, r3, #1
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e055      	b.n	8001c0e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff f94e 	bl	8000e08 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001b6c:	482b      	ldr	r0, [pc, #172]	; (8001c1c <ADC_Enable+0x100>)
 8001b6e:	f7ff f80b 	bl	8000b88 <LL_ADC_GetCommonPathInternalCh>
 8001b72:	4603      	mov	r3, r0
 8001b74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d013      	beq.n	8001ba4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b7c:	4b28      	ldr	r3, [pc, #160]	; (8001c20 <ADC_Enable+0x104>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	099b      	lsrs	r3, r3, #6
 8001b82:	4a28      	ldr	r2, [pc, #160]	; (8001c24 <ADC_Enable+0x108>)
 8001b84:	fba2 2303 	umull	r2, r3, r2, r3
 8001b88:	099b      	lsrs	r3, r3, #6
 8001b8a:	1c5a      	adds	r2, r3, #1
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	4413      	add	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001b96:	e002      	b.n	8001b9e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1f9      	bne.n	8001b98 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001ba4:	f7fe ff9a 	bl	8000adc <HAL_GetTick>
 8001ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001baa:	e028      	b.n	8001bfe <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff f93d 	bl	8000e30 <LL_ADC_IsEnabled>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d104      	bne.n	8001bc6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff f921 	bl	8000e08 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001bc6:	f7fe ff89 	bl	8000adc <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d914      	bls.n	8001bfe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d00d      	beq.n	8001bfe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be6:	f043 0210 	orr.w	r2, r3, #16
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf2:	f043 0201 	orr.w	r2, r3, #1
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e007      	b.n	8001c0e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d1cf      	bne.n	8001bac <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	8000003f 	.word	0x8000003f
 8001c1c:	50040300 	.word	0x50040300
 8001c20:	20000000 	.word	0x20000000
 8001c24:	053e2d63 	.word	0x053e2d63

08001c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <__NVIC_SetPriorityGrouping+0x44>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c44:	4013      	ands	r3, r2
 8001c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c5a:	4a04      	ldr	r2, [pc, #16]	; (8001c6c <__NVIC_SetPriorityGrouping+0x44>)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	60d3      	str	r3, [r2, #12]
}
 8001c60:	bf00      	nop
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c74:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <__NVIC_GetPriorityGrouping+0x18>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	0a1b      	lsrs	r3, r3, #8
 8001c7a:	f003 0307 	and.w	r3, r3, #7
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	6039      	str	r1, [r7, #0]
 8001c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	db0a      	blt.n	8001cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	490c      	ldr	r1, [pc, #48]	; (8001cd8 <__NVIC_SetPriority+0x4c>)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	0112      	lsls	r2, r2, #4
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	440b      	add	r3, r1
 8001cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb4:	e00a      	b.n	8001ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	4908      	ldr	r1, [pc, #32]	; (8001cdc <__NVIC_SetPriority+0x50>)
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	3b04      	subs	r3, #4
 8001cc4:	0112      	lsls	r2, r2, #4
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	440b      	add	r3, r1
 8001cca:	761a      	strb	r2, [r3, #24]
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000e100 	.word	0xe000e100
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b089      	sub	sp, #36	; 0x24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f1c3 0307 	rsb	r3, r3, #7
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	bf28      	it	cs
 8001cfe:	2304      	movcs	r3, #4
 8001d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3304      	adds	r3, #4
 8001d06:	2b06      	cmp	r3, #6
 8001d08:	d902      	bls.n	8001d10 <NVIC_EncodePriority+0x30>
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3b03      	subs	r3, #3
 8001d0e:	e000      	b.n	8001d12 <NVIC_EncodePriority+0x32>
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	f04f 32ff 	mov.w	r2, #4294967295
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43da      	mvns	r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	401a      	ands	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d28:	f04f 31ff 	mov.w	r1, #4294967295
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d32:	43d9      	mvns	r1, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	4313      	orrs	r3, r2
         );
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3724      	adds	r7, #36	; 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d58:	d301      	bcc.n	8001d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e00f      	b.n	8001d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d5e:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <SysTick_Config+0x40>)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d66:	210f      	movs	r1, #15
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295
 8001d6c:	f7ff ff8e 	bl	8001c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d70:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <SysTick_Config+0x40>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d76:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <SysTick_Config+0x40>)
 8001d78:	2207      	movs	r2, #7
 8001d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	e000e010 	.word	0xe000e010

08001d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ff47 	bl	8001c28 <__NVIC_SetPriorityGrouping>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b086      	sub	sp, #24
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001db4:	f7ff ff5c 	bl	8001c70 <__NVIC_GetPriorityGrouping>
 8001db8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	68b9      	ldr	r1, [r7, #8]
 8001dbe:	6978      	ldr	r0, [r7, #20]
 8001dc0:	f7ff ff8e 	bl	8001ce0 <NVIC_EncodePriority>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff5d 	bl	8001c8c <__NVIC_SetPriority>
}
 8001dd2:	bf00      	nop
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff ffb0 	bl	8001d48 <SysTick_Config>
 8001de8:	4603      	mov	r3, r0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b087      	sub	sp, #28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e02:	e148      	b.n	8002096 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	2101      	movs	r1, #1
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e10:	4013      	ands	r3, r2
 8001e12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 813a 	beq.w	8002090 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d005      	beq.n	8001e34 <HAL_GPIO_Init+0x40>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d130      	bne.n	8001e96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	2203      	movs	r2, #3
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	68da      	ldr	r2, [r3, #12]
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4013      	ands	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	091b      	lsrs	r3, r3, #4
 8001e80:	f003 0201 	and.w	r2, r3, #1
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	2b03      	cmp	r3, #3
 8001ea0:	d017      	beq.n	8001ed2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	2203      	movs	r2, #3
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d123      	bne.n	8001f26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	08da      	lsrs	r2, r3, #3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3208      	adds	r2, #8
 8001ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	220f      	movs	r2, #15
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4013      	ands	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	691a      	ldr	r2, [r3, #16]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	08da      	lsrs	r2, r3, #3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3208      	adds	r2, #8
 8001f20:	6939      	ldr	r1, [r7, #16]
 8001f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	2203      	movs	r2, #3
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 0203 	and.w	r2, r3, #3
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 8094 	beq.w	8002090 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f68:	4b52      	ldr	r3, [pc, #328]	; (80020b4 <HAL_GPIO_Init+0x2c0>)
 8001f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f6c:	4a51      	ldr	r2, [pc, #324]	; (80020b4 <HAL_GPIO_Init+0x2c0>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	6613      	str	r3, [r2, #96]	; 0x60
 8001f74:	4b4f      	ldr	r3, [pc, #316]	; (80020b4 <HAL_GPIO_Init+0x2c0>)
 8001f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f80:	4a4d      	ldr	r2, [pc, #308]	; (80020b8 <HAL_GPIO_Init+0x2c4>)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	089b      	lsrs	r3, r3, #2
 8001f86:	3302      	adds	r3, #2
 8001f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	220f      	movs	r2, #15
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001faa:	d00d      	beq.n	8001fc8 <HAL_GPIO_Init+0x1d4>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a43      	ldr	r2, [pc, #268]	; (80020bc <HAL_GPIO_Init+0x2c8>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d007      	beq.n	8001fc4 <HAL_GPIO_Init+0x1d0>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a42      	ldr	r2, [pc, #264]	; (80020c0 <HAL_GPIO_Init+0x2cc>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d101      	bne.n	8001fc0 <HAL_GPIO_Init+0x1cc>
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	e004      	b.n	8001fca <HAL_GPIO_Init+0x1d6>
 8001fc0:	2307      	movs	r3, #7
 8001fc2:	e002      	b.n	8001fca <HAL_GPIO_Init+0x1d6>
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <HAL_GPIO_Init+0x1d6>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	f002 0203 	and.w	r2, r2, #3
 8001fd0:	0092      	lsls	r2, r2, #2
 8001fd2:	4093      	lsls	r3, r2
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fda:	4937      	ldr	r1, [pc, #220]	; (80020b8 <HAL_GPIO_Init+0x2c4>)
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fe8:	4b36      	ldr	r3, [pc, #216]	; (80020c4 <HAL_GPIO_Init+0x2d0>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	4313      	orrs	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800200c:	4a2d      	ldr	r2, [pc, #180]	; (80020c4 <HAL_GPIO_Init+0x2d0>)
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002012:	4b2c      	ldr	r3, [pc, #176]	; (80020c4 <HAL_GPIO_Init+0x2d0>)
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	43db      	mvns	r3, r3
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	4013      	ands	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4313      	orrs	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002036:	4a23      	ldr	r2, [pc, #140]	; (80020c4 <HAL_GPIO_Init+0x2d0>)
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800203c:	4b21      	ldr	r3, [pc, #132]	; (80020c4 <HAL_GPIO_Init+0x2d0>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	43db      	mvns	r3, r3
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4013      	ands	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	4313      	orrs	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002060:	4a18      	ldr	r2, [pc, #96]	; (80020c4 <HAL_GPIO_Init+0x2d0>)
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002066:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <HAL_GPIO_Init+0x2d0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	43db      	mvns	r3, r3
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4013      	ands	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4313      	orrs	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800208a:	4a0e      	ldr	r2, [pc, #56]	; (80020c4 <HAL_GPIO_Init+0x2d0>)
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	3301      	adds	r3, #1
 8002094:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	fa22 f303 	lsr.w	r3, r2, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f47f aeaf 	bne.w	8001e04 <HAL_GPIO_Init+0x10>
  }
}
 80020a6:	bf00      	nop
 80020a8:	bf00      	nop
 80020aa:	371c      	adds	r7, #28
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40010000 	.word	0x40010000
 80020bc:	48000400 	.word	0x48000400
 80020c0:	48000800 	.word	0x48000800
 80020c4:	40010400 	.word	0x40010400

080020c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e081      	b.n	80021de <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d106      	bne.n	80020f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7fe fb40 	bl	8000774 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2224      	movs	r2, #36	; 0x24
 80020f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0201 	bic.w	r2, r2, #1
 800210a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002118:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002128:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d107      	bne.n	8002142 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	e006      	b.n	8002150 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800214e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	2b02      	cmp	r3, #2
 8002156:	d104      	bne.n	8002162 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002160:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6812      	ldr	r2, [r2, #0]
 800216c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002170:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002174:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68da      	ldr	r2, [r3, #12]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002184:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691a      	ldr	r2, [r3, #16]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	430a      	orrs	r2, r1
 800219e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69d9      	ldr	r1, [r3, #28]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1a      	ldr	r2, [r3, #32]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0201 	orr.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2220      	movs	r2, #32
 80021ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af02      	add	r7, sp, #8
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	607a      	str	r2, [r7, #4]
 80021f2:	461a      	mov	r2, r3
 80021f4:	460b      	mov	r3, r1
 80021f6:	817b      	strh	r3, [r7, #10]
 80021f8:	4613      	mov	r3, r2
 80021fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b20      	cmp	r3, #32
 8002206:	f040 80da 	bne.w	80023be <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002210:	2b01      	cmp	r3, #1
 8002212:	d101      	bne.n	8002218 <HAL_I2C_Master_Transmit+0x30>
 8002214:	2302      	movs	r3, #2
 8002216:	e0d3      	b.n	80023c0 <HAL_I2C_Master_Transmit+0x1d8>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002220:	f7fe fc5c 	bl	8000adc <HAL_GetTick>
 8002224:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	2319      	movs	r3, #25
 800222c:	2201      	movs	r2, #1
 800222e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 f9e6 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e0be      	b.n	80023c0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2221      	movs	r2, #33	; 0x21
 8002246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2210      	movs	r2, #16
 800224e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	893a      	ldrh	r2, [r7, #8]
 8002262:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226e:	b29b      	uxth	r3, r3
 8002270:	2bff      	cmp	r3, #255	; 0xff
 8002272:	d90e      	bls.n	8002292 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	22ff      	movs	r2, #255	; 0xff
 8002278:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800227e:	b2da      	uxtb	r2, r3
 8002280:	8979      	ldrh	r1, [r7, #10]
 8002282:	4b51      	ldr	r3, [pc, #324]	; (80023c8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 fbdc 	bl	8002a48 <I2C_TransferConfig>
 8002290:	e06c      	b.n	800236c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002296:	b29a      	uxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	8979      	ldrh	r1, [r7, #10]
 80022a4:	4b48      	ldr	r3, [pc, #288]	; (80023c8 <HAL_I2C_Master_Transmit+0x1e0>)
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 fbcb 	bl	8002a48 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80022b2:	e05b      	b.n	800236c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	6a39      	ldr	r1, [r7, #32]
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 f9e3 	bl	8002684 <I2C_WaitOnTXISFlagUntilTimeout>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e07b      	b.n	80023c0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	781a      	ldrb	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	3b01      	subs	r3, #1
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d034      	beq.n	800236c <HAL_I2C_Master_Transmit+0x184>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002306:	2b00      	cmp	r3, #0
 8002308:	d130      	bne.n	800236c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	6a3b      	ldr	r3, [r7, #32]
 8002310:	2200      	movs	r2, #0
 8002312:	2180      	movs	r1, #128	; 0x80
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f000 f975 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e04d      	b.n	80023c0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002328:	b29b      	uxth	r3, r3
 800232a:	2bff      	cmp	r3, #255	; 0xff
 800232c:	d90e      	bls.n	800234c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	22ff      	movs	r2, #255	; 0xff
 8002332:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002338:	b2da      	uxtb	r2, r3
 800233a:	8979      	ldrh	r1, [r7, #10]
 800233c:	2300      	movs	r3, #0
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 fb7f 	bl	8002a48 <I2C_TransferConfig>
 800234a:	e00f      	b.n	800236c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002350:	b29a      	uxth	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235a:	b2da      	uxtb	r2, r3
 800235c:	8979      	ldrh	r1, [r7, #10]
 800235e:	2300      	movs	r3, #0
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f000 fb6e 	bl	8002a48 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002370:	b29b      	uxth	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d19e      	bne.n	80022b4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	6a39      	ldr	r1, [r7, #32]
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 f9c2 	bl	8002704 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e01a      	b.n	80023c0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2220      	movs	r2, #32
 8002390:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6859      	ldr	r1, [r3, #4]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <HAL_I2C_Master_Transmit+0x1e4>)
 800239e:	400b      	ands	r3, r1
 80023a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2220      	movs	r2, #32
 80023a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023ba:	2300      	movs	r3, #0
 80023bc:	e000      	b.n	80023c0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80023be:	2302      	movs	r3, #2
  }
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	80002000 	.word	0x80002000
 80023cc:	fe00e800 	.word	0xfe00e800

080023d0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af02      	add	r7, sp, #8
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	607a      	str	r2, [r7, #4]
 80023da:	461a      	mov	r2, r3
 80023dc:	460b      	mov	r3, r1
 80023de:	817b      	strh	r3, [r7, #10]
 80023e0:	4613      	mov	r3, r2
 80023e2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b20      	cmp	r3, #32
 80023ee:	f040 80db 	bne.w	80025a8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_I2C_Master_Receive+0x30>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e0d4      	b.n	80025aa <HAL_I2C_Master_Receive+0x1da>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002408:	f7fe fb68 	bl	8000adc <HAL_GetTick>
 800240c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	2319      	movs	r3, #25
 8002414:	2201      	movs	r2, #1
 8002416:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f8f2 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e0bf      	b.n	80025aa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2222      	movs	r2, #34	; 0x22
 800242e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2210      	movs	r2, #16
 8002436:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	893a      	ldrh	r2, [r7, #8]
 800244a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002456:	b29b      	uxth	r3, r3
 8002458:	2bff      	cmp	r3, #255	; 0xff
 800245a:	d90e      	bls.n	800247a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	22ff      	movs	r2, #255	; 0xff
 8002460:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002466:	b2da      	uxtb	r2, r3
 8002468:	8979      	ldrh	r1, [r7, #10]
 800246a:	4b52      	ldr	r3, [pc, #328]	; (80025b4 <HAL_I2C_Master_Receive+0x1e4>)
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 fae8 	bl	8002a48 <I2C_TransferConfig>
 8002478:	e06d      	b.n	8002556 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247e:	b29a      	uxth	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002488:	b2da      	uxtb	r2, r3
 800248a:	8979      	ldrh	r1, [r7, #10]
 800248c:	4b49      	ldr	r3, [pc, #292]	; (80025b4 <HAL_I2C_Master_Receive+0x1e4>)
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f000 fad7 	bl	8002a48 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800249a:	e05c      	b.n	8002556 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	6a39      	ldr	r1, [r7, #32]
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 f96b 	bl	800277c <I2C_WaitOnRXNEFlagUntilTimeout>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e07c      	b.n	80025aa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d8:	b29b      	uxth	r3, r3
 80024da:	3b01      	subs	r3, #1
 80024dc:	b29a      	uxth	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d034      	beq.n	8002556 <HAL_I2C_Master_Receive+0x186>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d130      	bne.n	8002556 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	2200      	movs	r2, #0
 80024fc:	2180      	movs	r1, #128	; 0x80
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 f880 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e04d      	b.n	80025aa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002512:	b29b      	uxth	r3, r3
 8002514:	2bff      	cmp	r3, #255	; 0xff
 8002516:	d90e      	bls.n	8002536 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	22ff      	movs	r2, #255	; 0xff
 800251c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002522:	b2da      	uxtb	r2, r3
 8002524:	8979      	ldrh	r1, [r7, #10]
 8002526:	2300      	movs	r3, #0
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 fa8a 	bl	8002a48 <I2C_TransferConfig>
 8002534:	e00f      	b.n	8002556 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002544:	b2da      	uxtb	r2, r3
 8002546:	8979      	ldrh	r1, [r7, #10]
 8002548:	2300      	movs	r3, #0
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f000 fa79 	bl	8002a48 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255a:	b29b      	uxth	r3, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	d19d      	bne.n	800249c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	6a39      	ldr	r1, [r7, #32]
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 f8cd 	bl	8002704 <I2C_WaitOnSTOPFlagUntilTimeout>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e01a      	b.n	80025aa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2220      	movs	r2, #32
 800257a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6859      	ldr	r1, [r3, #4]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <HAL_I2C_Master_Receive+0x1e8>)
 8002588:	400b      	ands	r3, r1
 800258a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2220      	movs	r2, #32
 8002590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025a4:	2300      	movs	r3, #0
 80025a6:	e000      	b.n	80025aa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80025a8:	2302      	movs	r3, #2
  }
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3718      	adds	r7, #24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	80002400 	.word	0x80002400
 80025b8:	fe00e800 	.word	0xfe00e800

080025bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d103      	bne.n	80025da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2200      	movs	r2, #0
 80025d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d007      	beq.n	80025f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	699a      	ldr	r2, [r3, #24]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0201 	orr.w	r2, r2, #1
 80025f6:	619a      	str	r2, [r3, #24]
  }
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	603b      	str	r3, [r7, #0]
 8002610:	4613      	mov	r3, r2
 8002612:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002614:	e022      	b.n	800265c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800261c:	d01e      	beq.n	800265c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800261e:	f7fe fa5d 	bl	8000adc <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	429a      	cmp	r2, r3
 800262c:	d302      	bcc.n	8002634 <I2C_WaitOnFlagUntilTimeout+0x30>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d113      	bne.n	800265c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002638:	f043 0220 	orr.w	r2, r3, #32
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2220      	movs	r2, #32
 8002644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e00f      	b.n	800267c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699a      	ldr	r2, [r3, #24]
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	4013      	ands	r3, r2
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	429a      	cmp	r2, r3
 800266a:	bf0c      	ite	eq
 800266c:	2301      	moveq	r3, #1
 800266e:	2300      	movne	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	461a      	mov	r2, r3
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	429a      	cmp	r2, r3
 8002678:	d0cd      	beq.n	8002616 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002690:	e02c      	b.n	80026ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	68b9      	ldr	r1, [r7, #8]
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 f8ea 	bl	8002870 <I2C_IsErrorOccurred>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e02a      	b.n	80026fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ac:	d01e      	beq.n	80026ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ae:	f7fe fa15 	bl	8000adc <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d302      	bcc.n	80026c4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d113      	bne.n	80026ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c8:	f043 0220 	orr.w	r2, r3, #32
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e007      	b.n	80026fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d1cb      	bne.n	8002692 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002710:	e028      	b.n	8002764 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	68b9      	ldr	r1, [r7, #8]
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 f8aa 	bl	8002870 <I2C_IsErrorOccurred>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e026      	b.n	8002774 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002726:	f7fe f9d9 	bl	8000adc <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	429a      	cmp	r2, r3
 8002734:	d302      	bcc.n	800273c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d113      	bne.n	8002764 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002740:	f043 0220 	orr.w	r2, r3, #32
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2220      	movs	r2, #32
 800274c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e007      	b.n	8002774 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	f003 0320 	and.w	r3, r3, #32
 800276e:	2b20      	cmp	r3, #32
 8002770:	d1cf      	bne.n	8002712 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002788:	e064      	b.n	8002854 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	68b9      	ldr	r1, [r7, #8]
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 f86e 	bl	8002870 <I2C_IsErrorOccurred>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e062      	b.n	8002864 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	f003 0320 	and.w	r3, r3, #32
 80027a8:	2b20      	cmp	r3, #32
 80027aa:	d138      	bne.n	800281e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d105      	bne.n	80027c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80027c2:	2300      	movs	r3, #0
 80027c4:	e04e      	b.n	8002864 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	f003 0310 	and.w	r3, r3, #16
 80027d0:	2b10      	cmp	r3, #16
 80027d2:	d107      	bne.n	80027e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2210      	movs	r2, #16
 80027da:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2204      	movs	r2, #4
 80027e0:	645a      	str	r2, [r3, #68]	; 0x44
 80027e2:	e002      	b.n	80027ea <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2220      	movs	r2, #32
 80027f0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6859      	ldr	r1, [r3, #4]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b1b      	ldr	r3, [pc, #108]	; (800286c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80027fe:	400b      	ands	r3, r1
 8002800:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2220      	movs	r2, #32
 8002806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e022      	b.n	8002864 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800281e:	f7fe f95d 	bl	8000adc <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	429a      	cmp	r2, r3
 800282c:	d302      	bcc.n	8002834 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10f      	bne.n	8002854 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002838:	f043 0220 	orr.w	r2, r3, #32
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2220      	movs	r2, #32
 8002844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e007      	b.n	8002864 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	f003 0304 	and.w	r3, r3, #4
 800285e:	2b04      	cmp	r3, #4
 8002860:	d193      	bne.n	800278a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	fe00e800 	.word	0xfe00e800

08002870 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08a      	sub	sp, #40	; 0x28
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800287c:	2300      	movs	r3, #0
 800287e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800288a:	2300      	movs	r3, #0
 800288c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	f003 0310 	and.w	r3, r3, #16
 8002898:	2b00      	cmp	r3, #0
 800289a:	d075      	beq.n	8002988 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2210      	movs	r2, #16
 80028a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028a4:	e056      	b.n	8002954 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ac:	d052      	beq.n	8002954 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028ae:	f7fe f915 	bl	8000adc <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d302      	bcc.n	80028c4 <I2C_IsErrorOccurred+0x54>
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d147      	bne.n	8002954 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80028d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028e6:	d12e      	bne.n	8002946 <I2C_IsErrorOccurred+0xd6>
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028ee:	d02a      	beq.n	8002946 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80028f0:	7cfb      	ldrb	r3, [r7, #19]
 80028f2:	2b20      	cmp	r3, #32
 80028f4:	d027      	beq.n	8002946 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002904:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002906:	f7fe f8e9 	bl	8000adc <HAL_GetTick>
 800290a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800290c:	e01b      	b.n	8002946 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800290e:	f7fe f8e5 	bl	8000adc <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b19      	cmp	r3, #25
 800291a:	d914      	bls.n	8002946 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002920:	f043 0220 	orr.w	r2, r3, #32
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2220      	movs	r2, #32
 800292c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	f003 0320 	and.w	r3, r3, #32
 8002950:	2b20      	cmp	r3, #32
 8002952:	d1dc      	bne.n	800290e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	f003 0320 	and.w	r3, r3, #32
 800295e:	2b20      	cmp	r3, #32
 8002960:	d003      	beq.n	800296a <I2C_IsErrorOccurred+0xfa>
 8002962:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002966:	2b00      	cmp	r3, #0
 8002968:	d09d      	beq.n	80028a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800296a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800296e:	2b00      	cmp	r3, #0
 8002970:	d103      	bne.n	800297a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2220      	movs	r2, #32
 8002978:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	f043 0304 	orr.w	r3, r3, #4
 8002980:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00b      	beq.n	80029b2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800299a:	6a3b      	ldr	r3, [r7, #32]
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00b      	beq.n	80029d4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	f043 0308 	orr.w	r3, r3, #8
 80029c2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00b      	beq.n	80029f6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	f043 0302 	orr.w	r3, r3, #2
 80029e4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80029f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d01c      	beq.n	8002a38 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f7ff fddc 	bl	80025bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6859      	ldr	r1, [r3, #4]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	4b0d      	ldr	r3, [pc, #52]	; (8002a44 <I2C_IsErrorOccurred+0x1d4>)
 8002a10:	400b      	ands	r3, r1
 8002a12:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002a38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3728      	adds	r7, #40	; 0x28
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	fe00e800 	.word	0xfe00e800

08002a48 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b087      	sub	sp, #28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	607b      	str	r3, [r7, #4]
 8002a52:	460b      	mov	r3, r1
 8002a54:	817b      	strh	r3, [r7, #10]
 8002a56:	4613      	mov	r3, r2
 8002a58:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a5a:	897b      	ldrh	r3, [r7, #10]
 8002a5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a60:	7a7b      	ldrb	r3, [r7, #9]
 8002a62:	041b      	lsls	r3, r3, #16
 8002a64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a68:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a76:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	6a3b      	ldr	r3, [r7, #32]
 8002a80:	0d5b      	lsrs	r3, r3, #21
 8002a82:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002a86:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <I2C_TransferConfig+0x60>)
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	ea02 0103 	and.w	r1, r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a9a:	bf00      	nop
 8002a9c:	371c      	adds	r7, #28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	03ff63ff 	.word	0x03ff63ff

08002aac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b20      	cmp	r3, #32
 8002ac0:	d138      	bne.n	8002b34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002acc:	2302      	movs	r3, #2
 8002ace:	e032      	b.n	8002b36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2224      	movs	r2, #36	; 0x24
 8002adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0201 	bic.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002afe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6819      	ldr	r1, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0201 	orr.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2220      	movs	r2, #32
 8002b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b30:	2300      	movs	r3, #0
 8002b32:	e000      	b.n	8002b36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b34:	2302      	movs	r3, #2
  }
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b085      	sub	sp, #20
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b20      	cmp	r3, #32
 8002b56:	d139      	bne.n	8002bcc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d101      	bne.n	8002b66 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b62:	2302      	movs	r3, #2
 8002b64:	e033      	b.n	8002bce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2224      	movs	r2, #36	; 0x24
 8002b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0201 	bic.w	r2, r2, #1
 8002b84:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b94:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	021b      	lsls	r3, r3, #8
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0201 	orr.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	e000      	b.n	8002bce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002bcc:	2302      	movs	r3, #2
  }
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
	...

08002bdc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002be0:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	40007000 	.word	0x40007000

08002bf8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c06:	d130      	bne.n	8002c6a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c08:	4b23      	ldr	r3, [pc, #140]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c14:	d038      	beq.n	8002c88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c16:	4b20      	ldr	r3, [pc, #128]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c1e:	4a1e      	ldr	r2, [pc, #120]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c24:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c26:	4b1d      	ldr	r3, [pc, #116]	; (8002c9c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2232      	movs	r2, #50	; 0x32
 8002c2c:	fb02 f303 	mul.w	r3, r2, r3
 8002c30:	4a1b      	ldr	r2, [pc, #108]	; (8002ca0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c32:	fba2 2303 	umull	r2, r3, r2, r3
 8002c36:	0c9b      	lsrs	r3, r3, #18
 8002c38:	3301      	adds	r3, #1
 8002c3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c3c:	e002      	b.n	8002c44 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	3b01      	subs	r3, #1
 8002c42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c44:	4b14      	ldr	r3, [pc, #80]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c50:	d102      	bne.n	8002c58 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1f2      	bne.n	8002c3e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c58:	4b0f      	ldr	r3, [pc, #60]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c64:	d110      	bne.n	8002c88 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e00f      	b.n	8002c8a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c6a:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c76:	d007      	beq.n	8002c88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c78:	4b07      	ldr	r3, [pc, #28]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c80:	4a05      	ldr	r2, [pc, #20]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c86:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40007000 	.word	0x40007000
 8002c9c:	20000000 	.word	0x20000000
 8002ca0:	431bde83 	.word	0x431bde83

08002ca4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d102      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	f000 bc02 	b.w	80034bc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb8:	4b96      	ldr	r3, [pc, #600]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 030c 	and.w	r3, r3, #12
 8002cc0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cc2:	4b94      	ldr	r3, [pc, #592]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0310 	and.w	r3, r3, #16
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 80e4 	beq.w	8002ea2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d007      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x4c>
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	2b0c      	cmp	r3, #12
 8002ce4:	f040 808b 	bne.w	8002dfe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	f040 8087 	bne.w	8002dfe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cf0:	4b88      	ldr	r3, [pc, #544]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <HAL_RCC_OscConfig+0x64>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e3d9      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a1a      	ldr	r2, [r3, #32]
 8002d0c:	4b81      	ldr	r3, [pc, #516]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d004      	beq.n	8002d22 <HAL_RCC_OscConfig+0x7e>
 8002d18:	4b7e      	ldr	r3, [pc, #504]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d20:	e005      	b.n	8002d2e <HAL_RCC_OscConfig+0x8a>
 8002d22:	4b7c      	ldr	r3, [pc, #496]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d28:	091b      	lsrs	r3, r3, #4
 8002d2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d223      	bcs.n	8002d7a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f000 fd8c 	bl	8003854 <RCC_SetFlashLatencyFromMSIRange>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e3ba      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d46:	4b73      	ldr	r3, [pc, #460]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a72      	ldr	r2, [pc, #456]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d4c:	f043 0308 	orr.w	r3, r3, #8
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	4b70      	ldr	r3, [pc, #448]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	496d      	ldr	r1, [pc, #436]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d64:	4b6b      	ldr	r3, [pc, #428]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	021b      	lsls	r3, r3, #8
 8002d72:	4968      	ldr	r1, [pc, #416]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	604b      	str	r3, [r1, #4]
 8002d78:	e025      	b.n	8002dc6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d7a:	4b66      	ldr	r3, [pc, #408]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a65      	ldr	r2, [pc, #404]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d80:	f043 0308 	orr.w	r3, r3, #8
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	4b63      	ldr	r3, [pc, #396]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	4960      	ldr	r1, [pc, #384]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d98:	4b5e      	ldr	r3, [pc, #376]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	495b      	ldr	r1, [pc, #364]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d109      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 fd4c 	bl	8003854 <RCC_SetFlashLatencyFromMSIRange>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e37a      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dc6:	f000 fc81 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	4b51      	ldr	r3, [pc, #324]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	091b      	lsrs	r3, r3, #4
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	4950      	ldr	r1, [pc, #320]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002dd8:	5ccb      	ldrb	r3, [r1, r3]
 8002dda:	f003 031f 	and.w	r3, r3, #31
 8002dde:	fa22 f303 	lsr.w	r3, r2, r3
 8002de2:	4a4e      	ldr	r2, [pc, #312]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002de4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002de6:	4b4e      	ldr	r3, [pc, #312]	; (8002f20 <HAL_RCC_OscConfig+0x27c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fd fe26 	bl	8000a3c <HAL_InitTick>
 8002df0:	4603      	mov	r3, r0
 8002df2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d052      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
 8002dfc:	e35e      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d032      	beq.n	8002e6c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e06:	4b43      	ldr	r3, [pc, #268]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a42      	ldr	r2, [pc, #264]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e12:	f7fd fe63 	bl	8000adc <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e1a:	f7fd fe5f 	bl	8000adc <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e347      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e2c:	4b39      	ldr	r3, [pc, #228]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e38:	4b36      	ldr	r3, [pc, #216]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a35      	ldr	r2, [pc, #212]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e3e:	f043 0308 	orr.w	r3, r3, #8
 8002e42:	6013      	str	r3, [r2, #0]
 8002e44:	4b33      	ldr	r3, [pc, #204]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	4930      	ldr	r1, [pc, #192]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e56:	4b2f      	ldr	r3, [pc, #188]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	492b      	ldr	r1, [pc, #172]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	604b      	str	r3, [r1, #4]
 8002e6a:	e01a      	b.n	8002ea2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e6c:	4b29      	ldr	r3, [pc, #164]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a28      	ldr	r2, [pc, #160]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e72:	f023 0301 	bic.w	r3, r3, #1
 8002e76:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e78:	f7fd fe30 	bl	8000adc <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e80:	f7fd fe2c 	bl	8000adc <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e314      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e92:	4b20      	ldr	r3, [pc, #128]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f0      	bne.n	8002e80 <HAL_RCC_OscConfig+0x1dc>
 8002e9e:	e000      	b.n	8002ea2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ea0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d073      	beq.n	8002f96 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d005      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x21c>
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	2b0c      	cmp	r3, #12
 8002eb8:	d10e      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d10b      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec0:	4b14      	ldr	r3, [pc, #80]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d063      	beq.n	8002f94 <HAL_RCC_OscConfig+0x2f0>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d15f      	bne.n	8002f94 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e2f1      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee0:	d106      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x24c>
 8002ee2:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a0b      	ldr	r2, [pc, #44]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	e025      	b.n	8002f3c <HAL_RCC_OscConfig+0x298>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ef8:	d114      	bne.n	8002f24 <HAL_RCC_OscConfig+0x280>
 8002efa:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a05      	ldr	r2, [pc, #20]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	4b03      	ldr	r3, [pc, #12]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a02      	ldr	r2, [pc, #8]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	e013      	b.n	8002f3c <HAL_RCC_OscConfig+0x298>
 8002f14:	40021000 	.word	0x40021000
 8002f18:	08004d8c 	.word	0x08004d8c
 8002f1c:	20000000 	.word	0x20000000
 8002f20:	20000004 	.word	0x20000004
 8002f24:	4ba0      	ldr	r3, [pc, #640]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a9f      	ldr	r2, [pc, #636]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f2e:	6013      	str	r3, [r2, #0]
 8002f30:	4b9d      	ldr	r3, [pc, #628]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a9c      	ldr	r2, [pc, #624]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002f36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d013      	beq.n	8002f6c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f44:	f7fd fdca 	bl	8000adc <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f4c:	f7fd fdc6 	bl	8000adc <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b64      	cmp	r3, #100	; 0x64
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e2ae      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f5e:	4b92      	ldr	r3, [pc, #584]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0f0      	beq.n	8002f4c <HAL_RCC_OscConfig+0x2a8>
 8002f6a:	e014      	b.n	8002f96 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6c:	f7fd fdb6 	bl	8000adc <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f74:	f7fd fdb2 	bl	8000adc <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b64      	cmp	r3, #100	; 0x64
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e29a      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f86:	4b88      	ldr	r3, [pc, #544]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f0      	bne.n	8002f74 <HAL_RCC_OscConfig+0x2d0>
 8002f92:	e000      	b.n	8002f96 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d060      	beq.n	8003064 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d005      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x310>
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	2b0c      	cmp	r3, #12
 8002fac:	d119      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d116      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fb4:	4b7c      	ldr	r3, [pc, #496]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <HAL_RCC_OscConfig+0x328>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e277      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fcc:	4b76      	ldr	r3, [pc, #472]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	061b      	lsls	r3, r3, #24
 8002fda:	4973      	ldr	r1, [pc, #460]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fe0:	e040      	b.n	8003064 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d023      	beq.n	8003032 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fea:	4b6f      	ldr	r3, [pc, #444]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a6e      	ldr	r2, [pc, #440]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff6:	f7fd fd71 	bl	8000adc <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ffe:	f7fd fd6d 	bl	8000adc <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e255      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003010:	4b65      	ldr	r3, [pc, #404]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0f0      	beq.n	8002ffe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301c:	4b62      	ldr	r3, [pc, #392]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	061b      	lsls	r3, r3, #24
 800302a:	495f      	ldr	r1, [pc, #380]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 800302c:	4313      	orrs	r3, r2
 800302e:	604b      	str	r3, [r1, #4]
 8003030:	e018      	b.n	8003064 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003032:	4b5d      	ldr	r3, [pc, #372]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a5c      	ldr	r2, [pc, #368]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8003038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800303c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303e:	f7fd fd4d 	bl	8000adc <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003046:	f7fd fd49 	bl	8000adc <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e231      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003058:	4b53      	ldr	r3, [pc, #332]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1f0      	bne.n	8003046 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b00      	cmp	r3, #0
 800306e:	d03c      	beq.n	80030ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d01c      	beq.n	80030b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003078:	4b4b      	ldr	r3, [pc, #300]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 800307a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800307e:	4a4a      	ldr	r2, [pc, #296]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003088:	f7fd fd28 	bl	8000adc <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003090:	f7fd fd24 	bl	8000adc <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e20c      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030a2:	4b41      	ldr	r3, [pc, #260]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 80030a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0ef      	beq.n	8003090 <HAL_RCC_OscConfig+0x3ec>
 80030b0:	e01b      	b.n	80030ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030b2:	4b3d      	ldr	r3, [pc, #244]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 80030b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b8:	4a3b      	ldr	r2, [pc, #236]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 80030ba:	f023 0301 	bic.w	r3, r3, #1
 80030be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c2:	f7fd fd0b 	bl	8000adc <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ca:	f7fd fd07 	bl	8000adc <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e1ef      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030dc:	4b32      	ldr	r3, [pc, #200]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 80030de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1ef      	bne.n	80030ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0304 	and.w	r3, r3, #4
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 80a6 	beq.w	8003244 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030f8:	2300      	movs	r3, #0
 80030fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80030fc:	4b2a      	ldr	r3, [pc, #168]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 80030fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10d      	bne.n	8003124 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003108:	4b27      	ldr	r3, [pc, #156]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 800310a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310c:	4a26      	ldr	r2, [pc, #152]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 800310e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003112:	6593      	str	r3, [r2, #88]	; 0x58
 8003114:	4b24      	ldr	r3, [pc, #144]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8003116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311c:	60bb      	str	r3, [r7, #8]
 800311e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003120:	2301      	movs	r3, #1
 8003122:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003124:	4b21      	ldr	r3, [pc, #132]	; (80031ac <HAL_RCC_OscConfig+0x508>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312c:	2b00      	cmp	r3, #0
 800312e:	d118      	bne.n	8003162 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003130:	4b1e      	ldr	r3, [pc, #120]	; (80031ac <HAL_RCC_OscConfig+0x508>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a1d      	ldr	r2, [pc, #116]	; (80031ac <HAL_RCC_OscConfig+0x508>)
 8003136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800313a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800313c:	f7fd fcce 	bl	8000adc <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003144:	f7fd fcca 	bl	8000adc <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e1b2      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003156:	4b15      	ldr	r3, [pc, #84]	; (80031ac <HAL_RCC_OscConfig+0x508>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0f0      	beq.n	8003144 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d108      	bne.n	800317c <HAL_RCC_OscConfig+0x4d8>
 800316a:	4b0f      	ldr	r3, [pc, #60]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 800316c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003170:	4a0d      	ldr	r2, [pc, #52]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8003172:	f043 0301 	orr.w	r3, r3, #1
 8003176:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800317a:	e029      	b.n	80031d0 <HAL_RCC_OscConfig+0x52c>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	2b05      	cmp	r3, #5
 8003182:	d115      	bne.n	80031b0 <HAL_RCC_OscConfig+0x50c>
 8003184:	4b08      	ldr	r3, [pc, #32]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8003186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318a:	4a07      	ldr	r2, [pc, #28]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 800318c:	f043 0304 	orr.w	r3, r3, #4
 8003190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003194:	4b04      	ldr	r3, [pc, #16]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8003196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319a:	4a03      	ldr	r2, [pc, #12]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031a4:	e014      	b.n	80031d0 <HAL_RCC_OscConfig+0x52c>
 80031a6:	bf00      	nop
 80031a8:	40021000 	.word	0x40021000
 80031ac:	40007000 	.word	0x40007000
 80031b0:	4b9a      	ldr	r3, [pc, #616]	; (800341c <HAL_RCC_OscConfig+0x778>)
 80031b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b6:	4a99      	ldr	r2, [pc, #612]	; (800341c <HAL_RCC_OscConfig+0x778>)
 80031b8:	f023 0301 	bic.w	r3, r3, #1
 80031bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031c0:	4b96      	ldr	r3, [pc, #600]	; (800341c <HAL_RCC_OscConfig+0x778>)
 80031c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c6:	4a95      	ldr	r2, [pc, #596]	; (800341c <HAL_RCC_OscConfig+0x778>)
 80031c8:	f023 0304 	bic.w	r3, r3, #4
 80031cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d016      	beq.n	8003206 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d8:	f7fd fc80 	bl	8000adc <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031de:	e00a      	b.n	80031f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e0:	f7fd fc7c 	bl	8000adc <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e162      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031f6:	4b89      	ldr	r3, [pc, #548]	; (800341c <HAL_RCC_OscConfig+0x778>)
 80031f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0ed      	beq.n	80031e0 <HAL_RCC_OscConfig+0x53c>
 8003204:	e015      	b.n	8003232 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003206:	f7fd fc69 	bl	8000adc <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800320c:	e00a      	b.n	8003224 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800320e:	f7fd fc65 	bl	8000adc <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	f241 3288 	movw	r2, #5000	; 0x1388
 800321c:	4293      	cmp	r3, r2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e14b      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003224:	4b7d      	ldr	r3, [pc, #500]	; (800341c <HAL_RCC_OscConfig+0x778>)
 8003226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1ed      	bne.n	800320e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003232:	7ffb      	ldrb	r3, [r7, #31]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d105      	bne.n	8003244 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003238:	4b78      	ldr	r3, [pc, #480]	; (800341c <HAL_RCC_OscConfig+0x778>)
 800323a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323c:	4a77      	ldr	r2, [pc, #476]	; (800341c <HAL_RCC_OscConfig+0x778>)
 800323e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003242:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0320 	and.w	r3, r3, #32
 800324c:	2b00      	cmp	r3, #0
 800324e:	d03c      	beq.n	80032ca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	2b00      	cmp	r3, #0
 8003256:	d01c      	beq.n	8003292 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003258:	4b70      	ldr	r3, [pc, #448]	; (800341c <HAL_RCC_OscConfig+0x778>)
 800325a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800325e:	4a6f      	ldr	r2, [pc, #444]	; (800341c <HAL_RCC_OscConfig+0x778>)
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003268:	f7fd fc38 	bl	8000adc <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003270:	f7fd fc34 	bl	8000adc <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e11c      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003282:	4b66      	ldr	r3, [pc, #408]	; (800341c <HAL_RCC_OscConfig+0x778>)
 8003284:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0ef      	beq.n	8003270 <HAL_RCC_OscConfig+0x5cc>
 8003290:	e01b      	b.n	80032ca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003292:	4b62      	ldr	r3, [pc, #392]	; (800341c <HAL_RCC_OscConfig+0x778>)
 8003294:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003298:	4a60      	ldr	r2, [pc, #384]	; (800341c <HAL_RCC_OscConfig+0x778>)
 800329a:	f023 0301 	bic.w	r3, r3, #1
 800329e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a2:	f7fd fc1b 	bl	8000adc <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032aa:	f7fd fc17 	bl	8000adc <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e0ff      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032bc:	4b57      	ldr	r3, [pc, #348]	; (800341c <HAL_RCC_OscConfig+0x778>)
 80032be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1ef      	bne.n	80032aa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 80f3 	beq.w	80034ba <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d8:	2b02      	cmp	r3, #2
 80032da:	f040 80c9 	bne.w	8003470 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80032de:	4b4f      	ldr	r3, [pc, #316]	; (800341c <HAL_RCC_OscConfig+0x778>)
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f003 0203 	and.w	r2, r3, #3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d12c      	bne.n	800334c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fc:	3b01      	subs	r3, #1
 80032fe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003300:	429a      	cmp	r2, r3
 8003302:	d123      	bne.n	800334c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800330e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003310:	429a      	cmp	r2, r3
 8003312:	d11b      	bne.n	800334c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003320:	429a      	cmp	r2, r3
 8003322:	d113      	bne.n	800334c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332e:	085b      	lsrs	r3, r3, #1
 8003330:	3b01      	subs	r3, #1
 8003332:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003334:	429a      	cmp	r2, r3
 8003336:	d109      	bne.n	800334c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	085b      	lsrs	r3, r3, #1
 8003344:	3b01      	subs	r3, #1
 8003346:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003348:	429a      	cmp	r2, r3
 800334a:	d06b      	beq.n	8003424 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	2b0c      	cmp	r3, #12
 8003350:	d062      	beq.n	8003418 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003352:	4b32      	ldr	r3, [pc, #200]	; (800341c <HAL_RCC_OscConfig+0x778>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e0ac      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003362:	4b2e      	ldr	r3, [pc, #184]	; (800341c <HAL_RCC_OscConfig+0x778>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a2d      	ldr	r2, [pc, #180]	; (800341c <HAL_RCC_OscConfig+0x778>)
 8003368:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800336c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800336e:	f7fd fbb5 	bl	8000adc <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003376:	f7fd fbb1 	bl	8000adc <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e099      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003388:	4b24      	ldr	r3, [pc, #144]	; (800341c <HAL_RCC_OscConfig+0x778>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1f0      	bne.n	8003376 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003394:	4b21      	ldr	r3, [pc, #132]	; (800341c <HAL_RCC_OscConfig+0x778>)
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	4b21      	ldr	r3, [pc, #132]	; (8003420 <HAL_RCC_OscConfig+0x77c>)
 800339a:	4013      	ands	r3, r2
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033a4:	3a01      	subs	r2, #1
 80033a6:	0112      	lsls	r2, r2, #4
 80033a8:	4311      	orrs	r1, r2
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033ae:	0212      	lsls	r2, r2, #8
 80033b0:	4311      	orrs	r1, r2
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033b6:	0852      	lsrs	r2, r2, #1
 80033b8:	3a01      	subs	r2, #1
 80033ba:	0552      	lsls	r2, r2, #21
 80033bc:	4311      	orrs	r1, r2
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033c2:	0852      	lsrs	r2, r2, #1
 80033c4:	3a01      	subs	r2, #1
 80033c6:	0652      	lsls	r2, r2, #25
 80033c8:	4311      	orrs	r1, r2
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033ce:	06d2      	lsls	r2, r2, #27
 80033d0:	430a      	orrs	r2, r1
 80033d2:	4912      	ldr	r1, [pc, #72]	; (800341c <HAL_RCC_OscConfig+0x778>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033d8:	4b10      	ldr	r3, [pc, #64]	; (800341c <HAL_RCC_OscConfig+0x778>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a0f      	ldr	r2, [pc, #60]	; (800341c <HAL_RCC_OscConfig+0x778>)
 80033de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033e4:	4b0d      	ldr	r3, [pc, #52]	; (800341c <HAL_RCC_OscConfig+0x778>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	4a0c      	ldr	r2, [pc, #48]	; (800341c <HAL_RCC_OscConfig+0x778>)
 80033ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033f0:	f7fd fb74 	bl	8000adc <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f8:	f7fd fb70 	bl	8000adc <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e058      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800340a:	4b04      	ldr	r3, [pc, #16]	; (800341c <HAL_RCC_OscConfig+0x778>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0f0      	beq.n	80033f8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003416:	e050      	b.n	80034ba <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e04f      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
 800341c:	40021000 	.word	0x40021000
 8003420:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003424:	4b27      	ldr	r3, [pc, #156]	; (80034c4 <HAL_RCC_OscConfig+0x820>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d144      	bne.n	80034ba <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003430:	4b24      	ldr	r3, [pc, #144]	; (80034c4 <HAL_RCC_OscConfig+0x820>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a23      	ldr	r2, [pc, #140]	; (80034c4 <HAL_RCC_OscConfig+0x820>)
 8003436:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800343a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800343c:	4b21      	ldr	r3, [pc, #132]	; (80034c4 <HAL_RCC_OscConfig+0x820>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	4a20      	ldr	r2, [pc, #128]	; (80034c4 <HAL_RCC_OscConfig+0x820>)
 8003442:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003446:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003448:	f7fd fb48 	bl	8000adc <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003450:	f7fd fb44 	bl	8000adc <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e02c      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003462:	4b18      	ldr	r3, [pc, #96]	; (80034c4 <HAL_RCC_OscConfig+0x820>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0f0      	beq.n	8003450 <HAL_RCC_OscConfig+0x7ac>
 800346e:	e024      	b.n	80034ba <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	2b0c      	cmp	r3, #12
 8003474:	d01f      	beq.n	80034b6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003476:	4b13      	ldr	r3, [pc, #76]	; (80034c4 <HAL_RCC_OscConfig+0x820>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a12      	ldr	r2, [pc, #72]	; (80034c4 <HAL_RCC_OscConfig+0x820>)
 800347c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003480:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003482:	f7fd fb2b 	bl	8000adc <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348a:	f7fd fb27 	bl	8000adc <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e00f      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800349c:	4b09      	ldr	r3, [pc, #36]	; (80034c4 <HAL_RCC_OscConfig+0x820>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1f0      	bne.n	800348a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80034a8:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <HAL_RCC_OscConfig+0x820>)
 80034aa:	68da      	ldr	r2, [r3, #12]
 80034ac:	4905      	ldr	r1, [pc, #20]	; (80034c4 <HAL_RCC_OscConfig+0x820>)
 80034ae:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	60cb      	str	r3, [r1, #12]
 80034b4:	e001      	b.n	80034ba <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3720      	adds	r7, #32
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40021000 	.word	0x40021000
 80034c8:	feeefffc 	.word	0xfeeefffc

080034cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e0e7      	b.n	80036b0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034e0:	4b75      	ldr	r3, [pc, #468]	; (80036b8 <HAL_RCC_ClockConfig+0x1ec>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d910      	bls.n	8003510 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ee:	4b72      	ldr	r3, [pc, #456]	; (80036b8 <HAL_RCC_ClockConfig+0x1ec>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f023 0207 	bic.w	r2, r3, #7
 80034f6:	4970      	ldr	r1, [pc, #448]	; (80036b8 <HAL_RCC_ClockConfig+0x1ec>)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fe:	4b6e      	ldr	r3, [pc, #440]	; (80036b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	429a      	cmp	r2, r3
 800350a:	d001      	beq.n	8003510 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0cf      	b.n	80036b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d010      	beq.n	800353e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	4b66      	ldr	r3, [pc, #408]	; (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003528:	429a      	cmp	r2, r3
 800352a:	d908      	bls.n	800353e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800352c:	4b63      	ldr	r3, [pc, #396]	; (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	4960      	ldr	r1, [pc, #384]	; (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 800353a:	4313      	orrs	r3, r2
 800353c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d04c      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b03      	cmp	r3, #3
 8003550:	d107      	bne.n	8003562 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003552:	4b5a      	ldr	r3, [pc, #360]	; (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d121      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e0a6      	b.n	80036b0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b02      	cmp	r3, #2
 8003568:	d107      	bne.n	800357a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800356a:	4b54      	ldr	r3, [pc, #336]	; (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d115      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e09a      	b.n	80036b0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d107      	bne.n	8003592 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003582:	4b4e      	ldr	r3, [pc, #312]	; (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d109      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e08e      	b.n	80036b0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003592:	4b4a      	ldr	r3, [pc, #296]	; (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e086      	b.n	80036b0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035a2:	4b46      	ldr	r3, [pc, #280]	; (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f023 0203 	bic.w	r2, r3, #3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	4943      	ldr	r1, [pc, #268]	; (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035b4:	f7fd fa92 	bl	8000adc <HAL_GetTick>
 80035b8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ba:	e00a      	b.n	80035d2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035bc:	f7fd fa8e 	bl	8000adc <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e06e      	b.n	80036b0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d2:	4b3a      	ldr	r3, [pc, #232]	; (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 020c 	and.w	r2, r3, #12
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d1eb      	bne.n	80035bc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d010      	beq.n	8003612 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	4b31      	ldr	r3, [pc, #196]	; (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d208      	bcs.n	8003612 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003600:	4b2e      	ldr	r3, [pc, #184]	; (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	492b      	ldr	r1, [pc, #172]	; (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 800360e:	4313      	orrs	r3, r2
 8003610:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003612:	4b29      	ldr	r3, [pc, #164]	; (80036b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d210      	bcs.n	8003642 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003620:	4b25      	ldr	r3, [pc, #148]	; (80036b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f023 0207 	bic.w	r2, r3, #7
 8003628:	4923      	ldr	r1, [pc, #140]	; (80036b8 <HAL_RCC_ClockConfig+0x1ec>)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	4313      	orrs	r3, r2
 800362e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003630:	4b21      	ldr	r3, [pc, #132]	; (80036b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d001      	beq.n	8003642 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e036      	b.n	80036b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b00      	cmp	r3, #0
 800364c:	d008      	beq.n	8003660 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800364e:	4b1b      	ldr	r3, [pc, #108]	; (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	4918      	ldr	r1, [pc, #96]	; (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 800365c:	4313      	orrs	r3, r2
 800365e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0308 	and.w	r3, r3, #8
 8003668:	2b00      	cmp	r3, #0
 800366a:	d009      	beq.n	8003680 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800366c:	4b13      	ldr	r3, [pc, #76]	; (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	4910      	ldr	r1, [pc, #64]	; (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 800367c:	4313      	orrs	r3, r2
 800367e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003680:	f000 f824 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 8003684:	4602      	mov	r2, r0
 8003686:	4b0d      	ldr	r3, [pc, #52]	; (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	091b      	lsrs	r3, r3, #4
 800368c:	f003 030f 	and.w	r3, r3, #15
 8003690:	490b      	ldr	r1, [pc, #44]	; (80036c0 <HAL_RCC_ClockConfig+0x1f4>)
 8003692:	5ccb      	ldrb	r3, [r1, r3]
 8003694:	f003 031f 	and.w	r3, r3, #31
 8003698:	fa22 f303 	lsr.w	r3, r2, r3
 800369c:	4a09      	ldr	r2, [pc, #36]	; (80036c4 <HAL_RCC_ClockConfig+0x1f8>)
 800369e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80036a0:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <HAL_RCC_ClockConfig+0x1fc>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7fd f9c9 	bl	8000a3c <HAL_InitTick>
 80036aa:	4603      	mov	r3, r0
 80036ac:	72fb      	strb	r3, [r7, #11]

  return status;
 80036ae:	7afb      	ldrb	r3, [r7, #11]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40022000 	.word	0x40022000
 80036bc:	40021000 	.word	0x40021000
 80036c0:	08004d8c 	.word	0x08004d8c
 80036c4:	20000000 	.word	0x20000000
 80036c8:	20000004 	.word	0x20000004

080036cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b089      	sub	sp, #36	; 0x24
 80036d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	61fb      	str	r3, [r7, #28]
 80036d6:	2300      	movs	r3, #0
 80036d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036da:	4b3e      	ldr	r3, [pc, #248]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 030c 	and.w	r3, r3, #12
 80036e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036e4:	4b3b      	ldr	r3, [pc, #236]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	f003 0303 	and.w	r3, r3, #3
 80036ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <HAL_RCC_GetSysClockFreq+0x34>
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	2b0c      	cmp	r3, #12
 80036f8:	d121      	bne.n	800373e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d11e      	bne.n	800373e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003700:	4b34      	ldr	r3, [pc, #208]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0308 	and.w	r3, r3, #8
 8003708:	2b00      	cmp	r3, #0
 800370a:	d107      	bne.n	800371c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800370c:	4b31      	ldr	r3, [pc, #196]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800370e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003712:	0a1b      	lsrs	r3, r3, #8
 8003714:	f003 030f 	and.w	r3, r3, #15
 8003718:	61fb      	str	r3, [r7, #28]
 800371a:	e005      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800371c:	4b2d      	ldr	r3, [pc, #180]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	091b      	lsrs	r3, r3, #4
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003728:	4a2b      	ldr	r2, [pc, #172]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003730:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10d      	bne.n	8003754 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800373c:	e00a      	b.n	8003754 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	2b04      	cmp	r3, #4
 8003742:	d102      	bne.n	800374a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003744:	4b25      	ldr	r3, [pc, #148]	; (80037dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003746:	61bb      	str	r3, [r7, #24]
 8003748:	e004      	b.n	8003754 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	2b08      	cmp	r3, #8
 800374e:	d101      	bne.n	8003754 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003750:	4b23      	ldr	r3, [pc, #140]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003752:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	2b0c      	cmp	r3, #12
 8003758:	d134      	bne.n	80037c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800375a:	4b1e      	ldr	r3, [pc, #120]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	2b02      	cmp	r3, #2
 8003768:	d003      	beq.n	8003772 <HAL_RCC_GetSysClockFreq+0xa6>
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b03      	cmp	r3, #3
 800376e:	d003      	beq.n	8003778 <HAL_RCC_GetSysClockFreq+0xac>
 8003770:	e005      	b.n	800377e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003772:	4b1a      	ldr	r3, [pc, #104]	; (80037dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003774:	617b      	str	r3, [r7, #20]
      break;
 8003776:	e005      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003778:	4b19      	ldr	r3, [pc, #100]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800377a:	617b      	str	r3, [r7, #20]
      break;
 800377c:	e002      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	617b      	str	r3, [r7, #20]
      break;
 8003782:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003784:	4b13      	ldr	r3, [pc, #76]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	091b      	lsrs	r3, r3, #4
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	3301      	adds	r3, #1
 8003790:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003792:	4b10      	ldr	r3, [pc, #64]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	0a1b      	lsrs	r3, r3, #8
 8003798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	fb03 f202 	mul.w	r2, r3, r2
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037aa:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	0e5b      	lsrs	r3, r3, #25
 80037b0:	f003 0303 	and.w	r3, r3, #3
 80037b4:	3301      	adds	r3, #1
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80037c4:	69bb      	ldr	r3, [r7, #24]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3724      	adds	r7, #36	; 0x24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40021000 	.word	0x40021000
 80037d8:	08004da4 	.word	0x08004da4
 80037dc:	00f42400 	.word	0x00f42400
 80037e0:	007a1200 	.word	0x007a1200

080037e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037e8:	4b03      	ldr	r3, [pc, #12]	; (80037f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80037ea:	681b      	ldr	r3, [r3, #0]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	20000000 	.word	0x20000000

080037fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003800:	f7ff fff0 	bl	80037e4 <HAL_RCC_GetHCLKFreq>
 8003804:	4602      	mov	r2, r0
 8003806:	4b06      	ldr	r3, [pc, #24]	; (8003820 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	0a1b      	lsrs	r3, r3, #8
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	4904      	ldr	r1, [pc, #16]	; (8003824 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003812:	5ccb      	ldrb	r3, [r1, r3]
 8003814:	f003 031f 	and.w	r3, r3, #31
 8003818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800381c:	4618      	mov	r0, r3
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40021000 	.word	0x40021000
 8003824:	08004d9c 	.word	0x08004d9c

08003828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800382c:	f7ff ffda 	bl	80037e4 <HAL_RCC_GetHCLKFreq>
 8003830:	4602      	mov	r2, r0
 8003832:	4b06      	ldr	r3, [pc, #24]	; (800384c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	0adb      	lsrs	r3, r3, #11
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	4904      	ldr	r1, [pc, #16]	; (8003850 <HAL_RCC_GetPCLK2Freq+0x28>)
 800383e:	5ccb      	ldrb	r3, [r1, r3]
 8003840:	f003 031f 	and.w	r3, r3, #31
 8003844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003848:	4618      	mov	r0, r3
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40021000 	.word	0x40021000
 8003850:	08004d9c 	.word	0x08004d9c

08003854 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800385c:	2300      	movs	r3, #0
 800385e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003860:	4b2a      	ldr	r3, [pc, #168]	; (800390c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800386c:	f7ff f9b6 	bl	8002bdc <HAL_PWREx_GetVoltageRange>
 8003870:	6178      	str	r0, [r7, #20]
 8003872:	e014      	b.n	800389e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003874:	4b25      	ldr	r3, [pc, #148]	; (800390c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003878:	4a24      	ldr	r2, [pc, #144]	; (800390c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800387a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800387e:	6593      	str	r3, [r2, #88]	; 0x58
 8003880:	4b22      	ldr	r3, [pc, #136]	; (800390c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800388c:	f7ff f9a6 	bl	8002bdc <HAL_PWREx_GetVoltageRange>
 8003890:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003892:	4b1e      	ldr	r3, [pc, #120]	; (800390c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003896:	4a1d      	ldr	r2, [pc, #116]	; (800390c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800389c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038a4:	d10b      	bne.n	80038be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b80      	cmp	r3, #128	; 0x80
 80038aa:	d919      	bls.n	80038e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2ba0      	cmp	r3, #160	; 0xa0
 80038b0:	d902      	bls.n	80038b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038b2:	2302      	movs	r3, #2
 80038b4:	613b      	str	r3, [r7, #16]
 80038b6:	e013      	b.n	80038e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038b8:	2301      	movs	r3, #1
 80038ba:	613b      	str	r3, [r7, #16]
 80038bc:	e010      	b.n	80038e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b80      	cmp	r3, #128	; 0x80
 80038c2:	d902      	bls.n	80038ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80038c4:	2303      	movs	r3, #3
 80038c6:	613b      	str	r3, [r7, #16]
 80038c8:	e00a      	b.n	80038e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b80      	cmp	r3, #128	; 0x80
 80038ce:	d102      	bne.n	80038d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038d0:	2302      	movs	r3, #2
 80038d2:	613b      	str	r3, [r7, #16]
 80038d4:	e004      	b.n	80038e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b70      	cmp	r3, #112	; 0x70
 80038da:	d101      	bne.n	80038e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038dc:	2301      	movs	r3, #1
 80038de:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038e0:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f023 0207 	bic.w	r2, r3, #7
 80038e8:	4909      	ldr	r1, [pc, #36]	; (8003910 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80038f0:	4b07      	ldr	r3, [pc, #28]	; (8003910 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d001      	beq.n	8003902 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40021000 	.word	0x40021000
 8003910:	40022000 	.word	0x40022000

08003914 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800391c:	2300      	movs	r3, #0
 800391e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003920:	2300      	movs	r3, #0
 8003922:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800392c:	2b00      	cmp	r3, #0
 800392e:	d031      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003934:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003938:	d01a      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800393a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800393e:	d814      	bhi.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003940:	2b00      	cmp	r3, #0
 8003942:	d009      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003944:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003948:	d10f      	bne.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800394a:	4b5d      	ldr	r3, [pc, #372]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	4a5c      	ldr	r2, [pc, #368]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003954:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003956:	e00c      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3304      	adds	r3, #4
 800395c:	2100      	movs	r1, #0
 800395e:	4618      	mov	r0, r3
 8003960:	f000 f9ce 	bl	8003d00 <RCCEx_PLLSAI1_Config>
 8003964:	4603      	mov	r3, r0
 8003966:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003968:	e003      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	74fb      	strb	r3, [r7, #19]
      break;
 800396e:	e000      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003970:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003972:	7cfb      	ldrb	r3, [r7, #19]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10b      	bne.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003978:	4b51      	ldr	r3, [pc, #324]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800397a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003986:	494e      	ldr	r1, [pc, #312]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003988:	4313      	orrs	r3, r2
 800398a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800398e:	e001      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003990:	7cfb      	ldrb	r3, [r7, #19]
 8003992:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 809e 	beq.w	8003ade <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039a2:	2300      	movs	r3, #0
 80039a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039a6:	4b46      	ldr	r3, [pc, #280]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80039b2:	2301      	movs	r3, #1
 80039b4:	e000      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80039b6:	2300      	movs	r3, #0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00d      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039bc:	4b40      	ldr	r3, [pc, #256]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c0:	4a3f      	ldr	r2, [pc, #252]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c6:	6593      	str	r3, [r2, #88]	; 0x58
 80039c8:	4b3d      	ldr	r3, [pc, #244]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d0:	60bb      	str	r3, [r7, #8]
 80039d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039d4:	2301      	movs	r3, #1
 80039d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039d8:	4b3a      	ldr	r3, [pc, #232]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a39      	ldr	r2, [pc, #228]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80039de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039e4:	f7fd f87a 	bl	8000adc <HAL_GetTick>
 80039e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039ea:	e009      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ec:	f7fd f876 	bl	8000adc <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d902      	bls.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	74fb      	strb	r3, [r7, #19]
        break;
 80039fe:	e005      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a00:	4b30      	ldr	r3, [pc, #192]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0ef      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003a0c:	7cfb      	ldrb	r3, [r7, #19]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d15a      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a12:	4b2b      	ldr	r3, [pc, #172]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a1c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d01e      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d019      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a2e:	4b24      	ldr	r3, [pc, #144]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a38:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a3a:	4b21      	ldr	r3, [pc, #132]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a40:	4a1f      	ldr	r2, [pc, #124]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a4a:	4b1d      	ldr	r3, [pc, #116]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a50:	4a1b      	ldr	r2, [pc, #108]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a5a:	4a19      	ldr	r2, [pc, #100]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d016      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6c:	f7fd f836 	bl	8000adc <HAL_GetTick>
 8003a70:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a72:	e00b      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a74:	f7fd f832 	bl	8000adc <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d902      	bls.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	74fb      	strb	r3, [r7, #19]
            break;
 8003a8a:	e006      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0ec      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003a9a:	7cfb      	ldrb	r3, [r7, #19]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10b      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aa0:	4b07      	ldr	r3, [pc, #28]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aae:	4904      	ldr	r1, [pc, #16]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ab6:	e009      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ab8:	7cfb      	ldrb	r3, [r7, #19]
 8003aba:	74bb      	strb	r3, [r7, #18]
 8003abc:	e006      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003abe:	bf00      	nop
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac8:	7cfb      	ldrb	r3, [r7, #19]
 8003aca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003acc:	7c7b      	ldrb	r3, [r7, #17]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d105      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ad2:	4b8a      	ldr	r3, [pc, #552]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad6:	4a89      	ldr	r2, [pc, #548]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003adc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003aea:	4b84      	ldr	r3, [pc, #528]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af0:	f023 0203 	bic.w	r2, r3, #3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	4980      	ldr	r1, [pc, #512]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00a      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b0c:	4b7b      	ldr	r3, [pc, #492]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b12:	f023 020c 	bic.w	r2, r3, #12
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	4978      	ldr	r1, [pc, #480]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0320 	and.w	r3, r3, #32
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b2e:	4b73      	ldr	r3, [pc, #460]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b34:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3c:	496f      	ldr	r1, [pc, #444]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b50:	4b6a      	ldr	r3, [pc, #424]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b56:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5e:	4967      	ldr	r1, [pc, #412]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b72:	4b62      	ldr	r3, [pc, #392]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b80:	495e      	ldr	r1, [pc, #376]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00a      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b94:	4b59      	ldr	r3, [pc, #356]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba2:	4956      	ldr	r1, [pc, #344]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00a      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bb6:	4b51      	ldr	r3, [pc, #324]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc4:	494d      	ldr	r1, [pc, #308]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d028      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bd8:	4b48      	ldr	r3, [pc, #288]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bde:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	4945      	ldr	r1, [pc, #276]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bf6:	d106      	bne.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bf8:	4b40      	ldr	r3, [pc, #256]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	4a3f      	ldr	r2, [pc, #252]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c02:	60d3      	str	r3, [r2, #12]
 8003c04:	e011      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c0e:	d10c      	bne.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3304      	adds	r3, #4
 8003c14:	2101      	movs	r1, #1
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 f872 	bl	8003d00 <RCCEx_PLLSAI1_Config>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c20:	7cfb      	ldrb	r3, [r7, #19]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003c26:	7cfb      	ldrb	r3, [r7, #19]
 8003c28:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d028      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c36:	4b31      	ldr	r3, [pc, #196]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c44:	492d      	ldr	r1, [pc, #180]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c54:	d106      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c56:	4b29      	ldr	r3, [pc, #164]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	4a28      	ldr	r2, [pc, #160]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c60:	60d3      	str	r3, [r2, #12]
 8003c62:	e011      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c6c:	d10c      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	3304      	adds	r3, #4
 8003c72:	2101      	movs	r1, #1
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 f843 	bl	8003d00 <RCCEx_PLLSAI1_Config>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c7e:	7cfb      	ldrb	r3, [r7, #19]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003c84:	7cfb      	ldrb	r3, [r7, #19]
 8003c86:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d01c      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c94:	4b19      	ldr	r3, [pc, #100]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca2:	4916      	ldr	r1, [pc, #88]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cb2:	d10c      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	2102      	movs	r1, #2
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 f820 	bl	8003d00 <RCCEx_PLLSAI1_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cc4:	7cfb      	ldrb	r3, [r7, #19]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003cca:	7cfb      	ldrb	r3, [r7, #19]
 8003ccc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00a      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003cda:	4b08      	ldr	r3, [pc, #32]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce8:	4904      	ldr	r1, [pc, #16]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003cf0:	7cbb      	ldrb	r3, [r7, #18]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40021000 	.word	0x40021000

08003d00 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d0e:	4b74      	ldr	r3, [pc, #464]	; (8003ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d018      	beq.n	8003d4c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d1a:	4b71      	ldr	r3, [pc, #452]	; (8003ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f003 0203 	and.w	r2, r3, #3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d10d      	bne.n	8003d46 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
       ||
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d009      	beq.n	8003d46 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d32:	4b6b      	ldr	r3, [pc, #428]	; (8003ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	091b      	lsrs	r3, r3, #4
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
       ||
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d047      	beq.n	8003dd6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	73fb      	strb	r3, [r7, #15]
 8003d4a:	e044      	b.n	8003dd6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b03      	cmp	r3, #3
 8003d52:	d018      	beq.n	8003d86 <RCCEx_PLLSAI1_Config+0x86>
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	d825      	bhi.n	8003da4 <RCCEx_PLLSAI1_Config+0xa4>
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d002      	beq.n	8003d62 <RCCEx_PLLSAI1_Config+0x62>
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d009      	beq.n	8003d74 <RCCEx_PLLSAI1_Config+0x74>
 8003d60:	e020      	b.n	8003da4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d62:	4b5f      	ldr	r3, [pc, #380]	; (8003ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d11d      	bne.n	8003daa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d72:	e01a      	b.n	8003daa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d74:	4b5a      	ldr	r3, [pc, #360]	; (8003ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d116      	bne.n	8003dae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d84:	e013      	b.n	8003dae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d86:	4b56      	ldr	r3, [pc, #344]	; (8003ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10f      	bne.n	8003db2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d92:	4b53      	ldr	r3, [pc, #332]	; (8003ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d109      	bne.n	8003db2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003da2:	e006      	b.n	8003db2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	73fb      	strb	r3, [r7, #15]
      break;
 8003da8:	e004      	b.n	8003db4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003daa:	bf00      	nop
 8003dac:	e002      	b.n	8003db4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dae:	bf00      	nop
 8003db0:	e000      	b.n	8003db4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003db2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003db4:	7bfb      	ldrb	r3, [r7, #15]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10d      	bne.n	8003dd6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003dba:	4b49      	ldr	r3, [pc, #292]	; (8003ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6819      	ldr	r1, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	011b      	lsls	r3, r3, #4
 8003dce:	430b      	orrs	r3, r1
 8003dd0:	4943      	ldr	r1, [pc, #268]	; (8003ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003dd6:	7bfb      	ldrb	r3, [r7, #15]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d17c      	bne.n	8003ed6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ddc:	4b40      	ldr	r3, [pc, #256]	; (8003ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a3f      	ldr	r2, [pc, #252]	; (8003ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003de2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003de6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003de8:	f7fc fe78 	bl	8000adc <HAL_GetTick>
 8003dec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003dee:	e009      	b.n	8003e04 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003df0:	f7fc fe74 	bl	8000adc <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d902      	bls.n	8003e04 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	73fb      	strb	r3, [r7, #15]
        break;
 8003e02:	e005      	b.n	8003e10 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e04:	4b36      	ldr	r3, [pc, #216]	; (8003ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1ef      	bne.n	8003df0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d15f      	bne.n	8003ed6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d110      	bne.n	8003e3e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e1c:	4b30      	ldr	r3, [pc, #192]	; (8003ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003e24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6892      	ldr	r2, [r2, #8]
 8003e2c:	0211      	lsls	r1, r2, #8
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	68d2      	ldr	r2, [r2, #12]
 8003e32:	06d2      	lsls	r2, r2, #27
 8003e34:	430a      	orrs	r2, r1
 8003e36:	492a      	ldr	r1, [pc, #168]	; (8003ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	610b      	str	r3, [r1, #16]
 8003e3c:	e027      	b.n	8003e8e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d112      	bne.n	8003e6a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e44:	4b26      	ldr	r3, [pc, #152]	; (8003ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003e4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6892      	ldr	r2, [r2, #8]
 8003e54:	0211      	lsls	r1, r2, #8
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6912      	ldr	r2, [r2, #16]
 8003e5a:	0852      	lsrs	r2, r2, #1
 8003e5c:	3a01      	subs	r2, #1
 8003e5e:	0552      	lsls	r2, r2, #21
 8003e60:	430a      	orrs	r2, r1
 8003e62:	491f      	ldr	r1, [pc, #124]	; (8003ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	610b      	str	r3, [r1, #16]
 8003e68:	e011      	b.n	8003e8e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e72:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6892      	ldr	r2, [r2, #8]
 8003e7a:	0211      	lsls	r1, r2, #8
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6952      	ldr	r2, [r2, #20]
 8003e80:	0852      	lsrs	r2, r2, #1
 8003e82:	3a01      	subs	r2, #1
 8003e84:	0652      	lsls	r2, r2, #25
 8003e86:	430a      	orrs	r2, r1
 8003e88:	4915      	ldr	r1, [pc, #84]	; (8003ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e8e:	4b14      	ldr	r3, [pc, #80]	; (8003ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a13      	ldr	r2, [pc, #76]	; (8003ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e98:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e9a:	f7fc fe1f 	bl	8000adc <HAL_GetTick>
 8003e9e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ea0:	e009      	b.n	8003eb6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ea2:	f7fc fe1b 	bl	8000adc <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d902      	bls.n	8003eb6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	73fb      	strb	r3, [r7, #15]
          break;
 8003eb4:	e005      	b.n	8003ec2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003eb6:	4b0a      	ldr	r3, [pc, #40]	; (8003ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0ef      	beq.n	8003ea2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d106      	bne.n	8003ed6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ec8:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eca:	691a      	ldr	r2, [r3, #16]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	4903      	ldr	r1, [pc, #12]	; (8003ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40021000 	.word	0x40021000

08003ee4 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e03c      	b.n	8003f70 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d106      	bne.n	8003f10 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7fc fc8a 	bl	8000824 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2202      	movs	r2, #2
 8003f14:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0201 	bic.w	r2, r2, #1
 8003f26:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f909 	bl	8004140 <USART_SetConfig>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d101      	bne.n	8003f38 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e01b      	b.n	8003f70 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f46:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689a      	ldr	r2, [r3, #8]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f56:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 0201 	orr.w	r2, r2, #1
 8003f66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 fa17 	bl	800439c <USART_CheckIdleState>
 8003f6e:	4603      	mov	r3, r0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_USART_Transmit>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size,
                                     uint32_t Timeout)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08a      	sub	sp, #40	; 0x28
 8003f7c:	af02      	add	r7, sp, #8
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	603b      	str	r3, [r7, #0]
 8003f84:	4613      	mov	r3, r2
 8003f86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	f040 809a 	bne.w	80040ca <HAL_USART_Transmit+0x152>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <HAL_USART_Transmit+0x2a>
 8003f9c:	88fb      	ldrh	r3, [r7, #6]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e092      	b.n	80040cc <HAL_USART_Transmit+0x154>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d101      	bne.n	8003fb4 <HAL_USART_Transmit+0x3c>
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	e08b      	b.n	80040cc <HAL_USART_Transmit+0x154>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2212      	movs	r2, #18
 8003fc6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fca:	f7fc fd87 	bl	8000adc <HAL_GetTick>
 8003fce:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	88fa      	ldrh	r2, [r7, #6]
 8003fd4:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	88fa      	ldrh	r2, [r7, #6]
 8003fda:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fe4:	d108      	bne.n	8003ff8 <HAL_USART_Transmit+0x80>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d104      	bne.n	8003ff8 <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	61bb      	str	r3, [r7, #24]
 8003ff6:	e003      	b.n	8004000 <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8004000:	e02b      	b.n	800405a <HAL_USART_Transmit+0xe2>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	2200      	movs	r2, #0
 800400a:	2180      	movs	r1, #128	; 0x80
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 f861 	bl	80040d4 <USART_WaitOnFlagUntilTimeout>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e057      	b.n	80040cc <HAL_USART_Transmit+0x154>
      }
      if (ptxdata8bits == NULL)
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10b      	bne.n	800403a <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	881a      	ldrh	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800402e:	b292      	uxth	r2, r2
 8004030:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	3302      	adds	r3, #2
 8004036:	61bb      	str	r3, [r7, #24]
 8004038:	e008      	b.n	800404c <HAL_USART_Transmit+0xd4>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	781a      	ldrb	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	b292      	uxth	r2, r2
 8004044:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	3301      	adds	r3, #1
 800404a:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004050:	b29b      	uxth	r3, r3
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405e:	b29b      	uxth	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1ce      	bne.n	8004002 <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	2200      	movs	r2, #0
 800406c:	2140      	movs	r1, #64	; 0x40
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 f830 	bl	80040d4 <USART_WaitOnFlagUntilTimeout>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <HAL_USART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e026      	b.n	80040cc <HAL_USART_Transmit+0x154>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2240      	movs	r2, #64	; 0x40
 8004084:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2208      	movs	r2, #8
 800408c:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	8b1b      	ldrh	r3, [r3, #24]
 8004094:	b29a      	uxth	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f042 0208 	orr.w	r2, r2, #8
 800409e:	b292      	uxth	r2, r2
 80040a0:	831a      	strh	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	8b1b      	ldrh	r3, [r3, #24]
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 0210 	orr.w	r2, r2, #16
 80040b2:	b292      	uxth	r2, r2
 80040b4:	831a      	strh	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	e000      	b.n	80040cc <HAL_USART_Transmit+0x154>
  }
  else
  {
    return HAL_BUSY;
 80040ca:	2302      	movs	r3, #2
  }
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3720      	adds	r7, #32
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	603b      	str	r3, [r7, #0]
 80040e0:	4613      	mov	r3, r2
 80040e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80040e4:	e018      	b.n	8004118 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ec:	d014      	beq.n	8004118 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ee:	f7fc fcf5 	bl	8000adc <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d302      	bcc.n	8004104 <USART_WaitOnFlagUntilTimeout+0x30>
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d109      	bne.n	8004118 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e00f      	b.n	8004138 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	69da      	ldr	r2, [r3, #28]
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	4013      	ands	r3, r2
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	429a      	cmp	r2, r3
 8004126:	bf0c      	ite	eq
 8004128:	2301      	moveq	r3, #1
 800412a:	2300      	movne	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	461a      	mov	r2, r3
 8004130:	79fb      	ldrb	r3, [r7, #7]
 8004132:	429a      	cmp	r2, r3
 8004134:	d0d7      	beq.n	80040e6 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b088      	sub	sp, #32
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8004148:	2300      	movs	r3, #0
 800414a:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800414c:	2300      	movs	r3, #0
 800414e:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	431a      	orrs	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	4313      	orrs	r3, r2
 8004160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004164:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	4b87      	ldr	r3, [pc, #540]	; (800438c <USART_SetConfig+0x24c>)
 800416e:	4013      	ands	r3, r2
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	6812      	ldr	r2, [r2, #0]
 8004174:	6979      	ldr	r1, [r7, #20]
 8004176:	430b      	orrs	r3, r1
 8004178:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800417a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800417e:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	4313      	orrs	r3, r2
 8004188:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699a      	ldr	r2, [r3, #24]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	4313      	orrs	r3, r2
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	4313      	orrs	r3, r2
 8004198:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	605a      	str	r2, [r3, #4]
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a74      	ldr	r2, [pc, #464]	; (8004390 <USART_SetConfig+0x250>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d121      	bne.n	8004206 <USART_SetConfig+0xc6>
 80041c2:	4b74      	ldr	r3, [pc, #464]	; (8004394 <USART_SetConfig+0x254>)
 80041c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c8:	f003 0303 	and.w	r3, r3, #3
 80041cc:	2b03      	cmp	r3, #3
 80041ce:	d817      	bhi.n	8004200 <USART_SetConfig+0xc0>
 80041d0:	a201      	add	r2, pc, #4	; (adr r2, 80041d8 <USART_SetConfig+0x98>)
 80041d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d6:	bf00      	nop
 80041d8:	080041e9 	.word	0x080041e9
 80041dc:	080041f5 	.word	0x080041f5
 80041e0:	080041ef 	.word	0x080041ef
 80041e4:	080041fb 	.word	0x080041fb
 80041e8:	2301      	movs	r3, #1
 80041ea:	77fb      	strb	r3, [r7, #31]
 80041ec:	e045      	b.n	800427a <USART_SetConfig+0x13a>
 80041ee:	2302      	movs	r3, #2
 80041f0:	77fb      	strb	r3, [r7, #31]
 80041f2:	e042      	b.n	800427a <USART_SetConfig+0x13a>
 80041f4:	2304      	movs	r3, #4
 80041f6:	77fb      	strb	r3, [r7, #31]
 80041f8:	e03f      	b.n	800427a <USART_SetConfig+0x13a>
 80041fa:	2308      	movs	r3, #8
 80041fc:	77fb      	strb	r3, [r7, #31]
 80041fe:	e03c      	b.n	800427a <USART_SetConfig+0x13a>
 8004200:	2310      	movs	r3, #16
 8004202:	77fb      	strb	r3, [r7, #31]
 8004204:	e039      	b.n	800427a <USART_SetConfig+0x13a>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a63      	ldr	r2, [pc, #396]	; (8004398 <USART_SetConfig+0x258>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d132      	bne.n	8004276 <USART_SetConfig+0x136>
 8004210:	4b60      	ldr	r3, [pc, #384]	; (8004394 <USART_SetConfig+0x254>)
 8004212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004216:	f003 030c 	and.w	r3, r3, #12
 800421a:	2b0c      	cmp	r3, #12
 800421c:	d828      	bhi.n	8004270 <USART_SetConfig+0x130>
 800421e:	a201      	add	r2, pc, #4	; (adr r2, 8004224 <USART_SetConfig+0xe4>)
 8004220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004224:	08004259 	.word	0x08004259
 8004228:	08004271 	.word	0x08004271
 800422c:	08004271 	.word	0x08004271
 8004230:	08004271 	.word	0x08004271
 8004234:	08004265 	.word	0x08004265
 8004238:	08004271 	.word	0x08004271
 800423c:	08004271 	.word	0x08004271
 8004240:	08004271 	.word	0x08004271
 8004244:	0800425f 	.word	0x0800425f
 8004248:	08004271 	.word	0x08004271
 800424c:	08004271 	.word	0x08004271
 8004250:	08004271 	.word	0x08004271
 8004254:	0800426b 	.word	0x0800426b
 8004258:	2300      	movs	r3, #0
 800425a:	77fb      	strb	r3, [r7, #31]
 800425c:	e00d      	b.n	800427a <USART_SetConfig+0x13a>
 800425e:	2302      	movs	r3, #2
 8004260:	77fb      	strb	r3, [r7, #31]
 8004262:	e00a      	b.n	800427a <USART_SetConfig+0x13a>
 8004264:	2304      	movs	r3, #4
 8004266:	77fb      	strb	r3, [r7, #31]
 8004268:	e007      	b.n	800427a <USART_SetConfig+0x13a>
 800426a:	2308      	movs	r3, #8
 800426c:	77fb      	strb	r3, [r7, #31]
 800426e:	e004      	b.n	800427a <USART_SetConfig+0x13a>
 8004270:	2310      	movs	r3, #16
 8004272:	77fb      	strb	r3, [r7, #31]
 8004274:	e001      	b.n	800427a <USART_SetConfig+0x13a>
 8004276:	2310      	movs	r3, #16
 8004278:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 800427a:	7ffb      	ldrb	r3, [r7, #31]
 800427c:	2b08      	cmp	r3, #8
 800427e:	d85a      	bhi.n	8004336 <USART_SetConfig+0x1f6>
 8004280:	a201      	add	r2, pc, #4	; (adr r2, 8004288 <USART_SetConfig+0x148>)
 8004282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004286:	bf00      	nop
 8004288:	080042ad 	.word	0x080042ad
 800428c:	080042cb 	.word	0x080042cb
 8004290:	080042e9 	.word	0x080042e9
 8004294:	08004337 	.word	0x08004337
 8004298:	08004303 	.word	0x08004303
 800429c:	08004337 	.word	0x08004337
 80042a0:	08004337 	.word	0x08004337
 80042a4:	08004337 	.word	0x08004337
 80042a8:	08004321 	.word	0x08004321
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 80042ac:	f7ff faa6 	bl	80037fc <HAL_RCC_GetPCLK1Freq>
 80042b0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	005a      	lsls	r2, r3, #1
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	085b      	lsrs	r3, r3, #1
 80042bc:	441a      	add	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80042c8:	e038      	b.n	800433c <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 80042ca:	f7ff faad 	bl	8003828 <HAL_RCC_GetPCLK2Freq>
 80042ce:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	005a      	lsls	r2, r3, #1
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	085b      	lsrs	r3, r3, #1
 80042da:	441a      	add	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80042e6:	e029      	b.n	800433c <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	085b      	lsrs	r3, r3, #1
 80042ee:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80042f2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6852      	ldr	r2, [r2, #4]
 80042fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80042fe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8004300:	e01c      	b.n	800433c <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8004302:	f7ff f9e3 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 8004306:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	005a      	lsls	r2, r3, #1
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	085b      	lsrs	r3, r3, #1
 8004312:	441a      	add	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	fbb2 f3f3 	udiv	r3, r2, r3
 800431c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 800431e:	e00d      	b.n	800433c <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	085b      	lsrs	r3, r3, #1
 8004326:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004332:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8004334:	e002      	b.n	800433c <USART_SetConfig+0x1fc>
    default:
      ret = HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	77bb      	strb	r3, [r7, #30]
      break;
 800433a:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	2b0f      	cmp	r3, #15
 8004340:	d916      	bls.n	8004370 <USART_SetConfig+0x230>
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004348:	d212      	bcs.n	8004370 <USART_SetConfig+0x230>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	b29b      	uxth	r3, r3
 800434e:	f023 030f 	bic.w	r3, r3, #15
 8004352:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	085b      	lsrs	r3, r3, #1
 8004358:	b29b      	uxth	r3, r3
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	b29a      	uxth	r2, r3
 8004360:	89fb      	ldrh	r3, [r7, #14]
 8004362:	4313      	orrs	r3, r2
 8004364:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	89fa      	ldrh	r2, [r7, #14]
 800436c:	60da      	str	r2, [r3, #12]
 800436e:	e001      	b.n	8004374 <USART_SetConfig+0x234>
  }
  else
  {
    ret = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	77bb      	strb	r3, [r7, #30]
  husart->NbTxDataToProcess = 1U;
  husart->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 8004380:	7fbb      	ldrb	r3, [r7, #30]
}
 8004382:	4618      	mov	r0, r3
 8004384:	3720      	adds	r7, #32
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	efff69f3 	.word	0xefff69f3
 8004390:	40013800 	.word	0x40013800
 8004394:	40021000 	.word	0x40021000
 8004398:	40004400 	.word	0x40004400

0800439c <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af02      	add	r7, sp, #8
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043aa:	f7fc fb97 	bl	8000adc <HAL_GetTick>
 80043ae:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0308 	and.w	r3, r3, #8
 80043ba:	2b08      	cmp	r3, #8
 80043bc:	d10e      	bne.n	80043dc <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80043be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f7ff fe81 	bl	80040d4 <USART_WaitOnFlagUntilTimeout>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e01e      	b.n	800441a <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0304 	and.w	r3, r3, #4
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d10e      	bne.n	8004408 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80043ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f7ff fe6b 	bl	80040d4 <USART_WaitOnFlagUntilTimeout>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e008      	b.n	800441a <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
	...

08004424 <__errno>:
 8004424:	4b01      	ldr	r3, [pc, #4]	; (800442c <__errno+0x8>)
 8004426:	6818      	ldr	r0, [r3, #0]
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	2000000c 	.word	0x2000000c

08004430 <__libc_init_array>:
 8004430:	b570      	push	{r4, r5, r6, lr}
 8004432:	4d0d      	ldr	r5, [pc, #52]	; (8004468 <__libc_init_array+0x38>)
 8004434:	4c0d      	ldr	r4, [pc, #52]	; (800446c <__libc_init_array+0x3c>)
 8004436:	1b64      	subs	r4, r4, r5
 8004438:	10a4      	asrs	r4, r4, #2
 800443a:	2600      	movs	r6, #0
 800443c:	42a6      	cmp	r6, r4
 800443e:	d109      	bne.n	8004454 <__libc_init_array+0x24>
 8004440:	4d0b      	ldr	r5, [pc, #44]	; (8004470 <__libc_init_array+0x40>)
 8004442:	4c0c      	ldr	r4, [pc, #48]	; (8004474 <__libc_init_array+0x44>)
 8004444:	f000 fc8e 	bl	8004d64 <_init>
 8004448:	1b64      	subs	r4, r4, r5
 800444a:	10a4      	asrs	r4, r4, #2
 800444c:	2600      	movs	r6, #0
 800444e:	42a6      	cmp	r6, r4
 8004450:	d105      	bne.n	800445e <__libc_init_array+0x2e>
 8004452:	bd70      	pop	{r4, r5, r6, pc}
 8004454:	f855 3b04 	ldr.w	r3, [r5], #4
 8004458:	4798      	blx	r3
 800445a:	3601      	adds	r6, #1
 800445c:	e7ee      	b.n	800443c <__libc_init_array+0xc>
 800445e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004462:	4798      	blx	r3
 8004464:	3601      	adds	r6, #1
 8004466:	e7f2      	b.n	800444e <__libc_init_array+0x1e>
 8004468:	08004e08 	.word	0x08004e08
 800446c:	08004e08 	.word	0x08004e08
 8004470:	08004e08 	.word	0x08004e08
 8004474:	08004e0c 	.word	0x08004e0c

08004478 <memset>:
 8004478:	4402      	add	r2, r0
 800447a:	4603      	mov	r3, r0
 800447c:	4293      	cmp	r3, r2
 800447e:	d100      	bne.n	8004482 <memset+0xa>
 8004480:	4770      	bx	lr
 8004482:	f803 1b01 	strb.w	r1, [r3], #1
 8004486:	e7f9      	b.n	800447c <memset+0x4>

08004488 <siprintf>:
 8004488:	b40e      	push	{r1, r2, r3}
 800448a:	b500      	push	{lr}
 800448c:	b09c      	sub	sp, #112	; 0x70
 800448e:	ab1d      	add	r3, sp, #116	; 0x74
 8004490:	9002      	str	r0, [sp, #8]
 8004492:	9006      	str	r0, [sp, #24]
 8004494:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004498:	4809      	ldr	r0, [pc, #36]	; (80044c0 <siprintf+0x38>)
 800449a:	9107      	str	r1, [sp, #28]
 800449c:	9104      	str	r1, [sp, #16]
 800449e:	4909      	ldr	r1, [pc, #36]	; (80044c4 <siprintf+0x3c>)
 80044a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80044a4:	9105      	str	r1, [sp, #20]
 80044a6:	6800      	ldr	r0, [r0, #0]
 80044a8:	9301      	str	r3, [sp, #4]
 80044aa:	a902      	add	r1, sp, #8
 80044ac:	f000 f868 	bl	8004580 <_svfiprintf_r>
 80044b0:	9b02      	ldr	r3, [sp, #8]
 80044b2:	2200      	movs	r2, #0
 80044b4:	701a      	strb	r2, [r3, #0]
 80044b6:	b01c      	add	sp, #112	; 0x70
 80044b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80044bc:	b003      	add	sp, #12
 80044be:	4770      	bx	lr
 80044c0:	2000000c 	.word	0x2000000c
 80044c4:	ffff0208 	.word	0xffff0208

080044c8 <__ssputs_r>:
 80044c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044cc:	688e      	ldr	r6, [r1, #8]
 80044ce:	429e      	cmp	r6, r3
 80044d0:	4682      	mov	sl, r0
 80044d2:	460c      	mov	r4, r1
 80044d4:	4690      	mov	r8, r2
 80044d6:	461f      	mov	r7, r3
 80044d8:	d838      	bhi.n	800454c <__ssputs_r+0x84>
 80044da:	898a      	ldrh	r2, [r1, #12]
 80044dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80044e0:	d032      	beq.n	8004548 <__ssputs_r+0x80>
 80044e2:	6825      	ldr	r5, [r4, #0]
 80044e4:	6909      	ldr	r1, [r1, #16]
 80044e6:	eba5 0901 	sub.w	r9, r5, r1
 80044ea:	6965      	ldr	r5, [r4, #20]
 80044ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80044f4:	3301      	adds	r3, #1
 80044f6:	444b      	add	r3, r9
 80044f8:	106d      	asrs	r5, r5, #1
 80044fa:	429d      	cmp	r5, r3
 80044fc:	bf38      	it	cc
 80044fe:	461d      	movcc	r5, r3
 8004500:	0553      	lsls	r3, r2, #21
 8004502:	d531      	bpl.n	8004568 <__ssputs_r+0xa0>
 8004504:	4629      	mov	r1, r5
 8004506:	f000 fb63 	bl	8004bd0 <_malloc_r>
 800450a:	4606      	mov	r6, r0
 800450c:	b950      	cbnz	r0, 8004524 <__ssputs_r+0x5c>
 800450e:	230c      	movs	r3, #12
 8004510:	f8ca 3000 	str.w	r3, [sl]
 8004514:	89a3      	ldrh	r3, [r4, #12]
 8004516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800451a:	81a3      	strh	r3, [r4, #12]
 800451c:	f04f 30ff 	mov.w	r0, #4294967295
 8004520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004524:	6921      	ldr	r1, [r4, #16]
 8004526:	464a      	mov	r2, r9
 8004528:	f000 fabe 	bl	8004aa8 <memcpy>
 800452c:	89a3      	ldrh	r3, [r4, #12]
 800452e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004536:	81a3      	strh	r3, [r4, #12]
 8004538:	6126      	str	r6, [r4, #16]
 800453a:	6165      	str	r5, [r4, #20]
 800453c:	444e      	add	r6, r9
 800453e:	eba5 0509 	sub.w	r5, r5, r9
 8004542:	6026      	str	r6, [r4, #0]
 8004544:	60a5      	str	r5, [r4, #8]
 8004546:	463e      	mov	r6, r7
 8004548:	42be      	cmp	r6, r7
 800454a:	d900      	bls.n	800454e <__ssputs_r+0x86>
 800454c:	463e      	mov	r6, r7
 800454e:	6820      	ldr	r0, [r4, #0]
 8004550:	4632      	mov	r2, r6
 8004552:	4641      	mov	r1, r8
 8004554:	f000 fab6 	bl	8004ac4 <memmove>
 8004558:	68a3      	ldr	r3, [r4, #8]
 800455a:	1b9b      	subs	r3, r3, r6
 800455c:	60a3      	str	r3, [r4, #8]
 800455e:	6823      	ldr	r3, [r4, #0]
 8004560:	4433      	add	r3, r6
 8004562:	6023      	str	r3, [r4, #0]
 8004564:	2000      	movs	r0, #0
 8004566:	e7db      	b.n	8004520 <__ssputs_r+0x58>
 8004568:	462a      	mov	r2, r5
 800456a:	f000 fba5 	bl	8004cb8 <_realloc_r>
 800456e:	4606      	mov	r6, r0
 8004570:	2800      	cmp	r0, #0
 8004572:	d1e1      	bne.n	8004538 <__ssputs_r+0x70>
 8004574:	6921      	ldr	r1, [r4, #16]
 8004576:	4650      	mov	r0, sl
 8004578:	f000 fabe 	bl	8004af8 <_free_r>
 800457c:	e7c7      	b.n	800450e <__ssputs_r+0x46>
	...

08004580 <_svfiprintf_r>:
 8004580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004584:	4698      	mov	r8, r3
 8004586:	898b      	ldrh	r3, [r1, #12]
 8004588:	061b      	lsls	r3, r3, #24
 800458a:	b09d      	sub	sp, #116	; 0x74
 800458c:	4607      	mov	r7, r0
 800458e:	460d      	mov	r5, r1
 8004590:	4614      	mov	r4, r2
 8004592:	d50e      	bpl.n	80045b2 <_svfiprintf_r+0x32>
 8004594:	690b      	ldr	r3, [r1, #16]
 8004596:	b963      	cbnz	r3, 80045b2 <_svfiprintf_r+0x32>
 8004598:	2140      	movs	r1, #64	; 0x40
 800459a:	f000 fb19 	bl	8004bd0 <_malloc_r>
 800459e:	6028      	str	r0, [r5, #0]
 80045a0:	6128      	str	r0, [r5, #16]
 80045a2:	b920      	cbnz	r0, 80045ae <_svfiprintf_r+0x2e>
 80045a4:	230c      	movs	r3, #12
 80045a6:	603b      	str	r3, [r7, #0]
 80045a8:	f04f 30ff 	mov.w	r0, #4294967295
 80045ac:	e0d1      	b.n	8004752 <_svfiprintf_r+0x1d2>
 80045ae:	2340      	movs	r3, #64	; 0x40
 80045b0:	616b      	str	r3, [r5, #20]
 80045b2:	2300      	movs	r3, #0
 80045b4:	9309      	str	r3, [sp, #36]	; 0x24
 80045b6:	2320      	movs	r3, #32
 80045b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80045c0:	2330      	movs	r3, #48	; 0x30
 80045c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800476c <_svfiprintf_r+0x1ec>
 80045c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045ca:	f04f 0901 	mov.w	r9, #1
 80045ce:	4623      	mov	r3, r4
 80045d0:	469a      	mov	sl, r3
 80045d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045d6:	b10a      	cbz	r2, 80045dc <_svfiprintf_r+0x5c>
 80045d8:	2a25      	cmp	r2, #37	; 0x25
 80045da:	d1f9      	bne.n	80045d0 <_svfiprintf_r+0x50>
 80045dc:	ebba 0b04 	subs.w	fp, sl, r4
 80045e0:	d00b      	beq.n	80045fa <_svfiprintf_r+0x7a>
 80045e2:	465b      	mov	r3, fp
 80045e4:	4622      	mov	r2, r4
 80045e6:	4629      	mov	r1, r5
 80045e8:	4638      	mov	r0, r7
 80045ea:	f7ff ff6d 	bl	80044c8 <__ssputs_r>
 80045ee:	3001      	adds	r0, #1
 80045f0:	f000 80aa 	beq.w	8004748 <_svfiprintf_r+0x1c8>
 80045f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045f6:	445a      	add	r2, fp
 80045f8:	9209      	str	r2, [sp, #36]	; 0x24
 80045fa:	f89a 3000 	ldrb.w	r3, [sl]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 80a2 	beq.w	8004748 <_svfiprintf_r+0x1c8>
 8004604:	2300      	movs	r3, #0
 8004606:	f04f 32ff 	mov.w	r2, #4294967295
 800460a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800460e:	f10a 0a01 	add.w	sl, sl, #1
 8004612:	9304      	str	r3, [sp, #16]
 8004614:	9307      	str	r3, [sp, #28]
 8004616:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800461a:	931a      	str	r3, [sp, #104]	; 0x68
 800461c:	4654      	mov	r4, sl
 800461e:	2205      	movs	r2, #5
 8004620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004624:	4851      	ldr	r0, [pc, #324]	; (800476c <_svfiprintf_r+0x1ec>)
 8004626:	f7fb fddb 	bl	80001e0 <memchr>
 800462a:	9a04      	ldr	r2, [sp, #16]
 800462c:	b9d8      	cbnz	r0, 8004666 <_svfiprintf_r+0xe6>
 800462e:	06d0      	lsls	r0, r2, #27
 8004630:	bf44      	itt	mi
 8004632:	2320      	movmi	r3, #32
 8004634:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004638:	0711      	lsls	r1, r2, #28
 800463a:	bf44      	itt	mi
 800463c:	232b      	movmi	r3, #43	; 0x2b
 800463e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004642:	f89a 3000 	ldrb.w	r3, [sl]
 8004646:	2b2a      	cmp	r3, #42	; 0x2a
 8004648:	d015      	beq.n	8004676 <_svfiprintf_r+0xf6>
 800464a:	9a07      	ldr	r2, [sp, #28]
 800464c:	4654      	mov	r4, sl
 800464e:	2000      	movs	r0, #0
 8004650:	f04f 0c0a 	mov.w	ip, #10
 8004654:	4621      	mov	r1, r4
 8004656:	f811 3b01 	ldrb.w	r3, [r1], #1
 800465a:	3b30      	subs	r3, #48	; 0x30
 800465c:	2b09      	cmp	r3, #9
 800465e:	d94e      	bls.n	80046fe <_svfiprintf_r+0x17e>
 8004660:	b1b0      	cbz	r0, 8004690 <_svfiprintf_r+0x110>
 8004662:	9207      	str	r2, [sp, #28]
 8004664:	e014      	b.n	8004690 <_svfiprintf_r+0x110>
 8004666:	eba0 0308 	sub.w	r3, r0, r8
 800466a:	fa09 f303 	lsl.w	r3, r9, r3
 800466e:	4313      	orrs	r3, r2
 8004670:	9304      	str	r3, [sp, #16]
 8004672:	46a2      	mov	sl, r4
 8004674:	e7d2      	b.n	800461c <_svfiprintf_r+0x9c>
 8004676:	9b03      	ldr	r3, [sp, #12]
 8004678:	1d19      	adds	r1, r3, #4
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	9103      	str	r1, [sp, #12]
 800467e:	2b00      	cmp	r3, #0
 8004680:	bfbb      	ittet	lt
 8004682:	425b      	neglt	r3, r3
 8004684:	f042 0202 	orrlt.w	r2, r2, #2
 8004688:	9307      	strge	r3, [sp, #28]
 800468a:	9307      	strlt	r3, [sp, #28]
 800468c:	bfb8      	it	lt
 800468e:	9204      	strlt	r2, [sp, #16]
 8004690:	7823      	ldrb	r3, [r4, #0]
 8004692:	2b2e      	cmp	r3, #46	; 0x2e
 8004694:	d10c      	bne.n	80046b0 <_svfiprintf_r+0x130>
 8004696:	7863      	ldrb	r3, [r4, #1]
 8004698:	2b2a      	cmp	r3, #42	; 0x2a
 800469a:	d135      	bne.n	8004708 <_svfiprintf_r+0x188>
 800469c:	9b03      	ldr	r3, [sp, #12]
 800469e:	1d1a      	adds	r2, r3, #4
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	9203      	str	r2, [sp, #12]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	bfb8      	it	lt
 80046a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80046ac:	3402      	adds	r4, #2
 80046ae:	9305      	str	r3, [sp, #20]
 80046b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800477c <_svfiprintf_r+0x1fc>
 80046b4:	7821      	ldrb	r1, [r4, #0]
 80046b6:	2203      	movs	r2, #3
 80046b8:	4650      	mov	r0, sl
 80046ba:	f7fb fd91 	bl	80001e0 <memchr>
 80046be:	b140      	cbz	r0, 80046d2 <_svfiprintf_r+0x152>
 80046c0:	2340      	movs	r3, #64	; 0x40
 80046c2:	eba0 000a 	sub.w	r0, r0, sl
 80046c6:	fa03 f000 	lsl.w	r0, r3, r0
 80046ca:	9b04      	ldr	r3, [sp, #16]
 80046cc:	4303      	orrs	r3, r0
 80046ce:	3401      	adds	r4, #1
 80046d0:	9304      	str	r3, [sp, #16]
 80046d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046d6:	4826      	ldr	r0, [pc, #152]	; (8004770 <_svfiprintf_r+0x1f0>)
 80046d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046dc:	2206      	movs	r2, #6
 80046de:	f7fb fd7f 	bl	80001e0 <memchr>
 80046e2:	2800      	cmp	r0, #0
 80046e4:	d038      	beq.n	8004758 <_svfiprintf_r+0x1d8>
 80046e6:	4b23      	ldr	r3, [pc, #140]	; (8004774 <_svfiprintf_r+0x1f4>)
 80046e8:	bb1b      	cbnz	r3, 8004732 <_svfiprintf_r+0x1b2>
 80046ea:	9b03      	ldr	r3, [sp, #12]
 80046ec:	3307      	adds	r3, #7
 80046ee:	f023 0307 	bic.w	r3, r3, #7
 80046f2:	3308      	adds	r3, #8
 80046f4:	9303      	str	r3, [sp, #12]
 80046f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046f8:	4433      	add	r3, r6
 80046fa:	9309      	str	r3, [sp, #36]	; 0x24
 80046fc:	e767      	b.n	80045ce <_svfiprintf_r+0x4e>
 80046fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8004702:	460c      	mov	r4, r1
 8004704:	2001      	movs	r0, #1
 8004706:	e7a5      	b.n	8004654 <_svfiprintf_r+0xd4>
 8004708:	2300      	movs	r3, #0
 800470a:	3401      	adds	r4, #1
 800470c:	9305      	str	r3, [sp, #20]
 800470e:	4619      	mov	r1, r3
 8004710:	f04f 0c0a 	mov.w	ip, #10
 8004714:	4620      	mov	r0, r4
 8004716:	f810 2b01 	ldrb.w	r2, [r0], #1
 800471a:	3a30      	subs	r2, #48	; 0x30
 800471c:	2a09      	cmp	r2, #9
 800471e:	d903      	bls.n	8004728 <_svfiprintf_r+0x1a8>
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0c5      	beq.n	80046b0 <_svfiprintf_r+0x130>
 8004724:	9105      	str	r1, [sp, #20]
 8004726:	e7c3      	b.n	80046b0 <_svfiprintf_r+0x130>
 8004728:	fb0c 2101 	mla	r1, ip, r1, r2
 800472c:	4604      	mov	r4, r0
 800472e:	2301      	movs	r3, #1
 8004730:	e7f0      	b.n	8004714 <_svfiprintf_r+0x194>
 8004732:	ab03      	add	r3, sp, #12
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	462a      	mov	r2, r5
 8004738:	4b0f      	ldr	r3, [pc, #60]	; (8004778 <_svfiprintf_r+0x1f8>)
 800473a:	a904      	add	r1, sp, #16
 800473c:	4638      	mov	r0, r7
 800473e:	f3af 8000 	nop.w
 8004742:	1c42      	adds	r2, r0, #1
 8004744:	4606      	mov	r6, r0
 8004746:	d1d6      	bne.n	80046f6 <_svfiprintf_r+0x176>
 8004748:	89ab      	ldrh	r3, [r5, #12]
 800474a:	065b      	lsls	r3, r3, #25
 800474c:	f53f af2c 	bmi.w	80045a8 <_svfiprintf_r+0x28>
 8004750:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004752:	b01d      	add	sp, #116	; 0x74
 8004754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004758:	ab03      	add	r3, sp, #12
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	462a      	mov	r2, r5
 800475e:	4b06      	ldr	r3, [pc, #24]	; (8004778 <_svfiprintf_r+0x1f8>)
 8004760:	a904      	add	r1, sp, #16
 8004762:	4638      	mov	r0, r7
 8004764:	f000 f87a 	bl	800485c <_printf_i>
 8004768:	e7eb      	b.n	8004742 <_svfiprintf_r+0x1c2>
 800476a:	bf00      	nop
 800476c:	08004dd4 	.word	0x08004dd4
 8004770:	08004dde 	.word	0x08004dde
 8004774:	00000000 	.word	0x00000000
 8004778:	080044c9 	.word	0x080044c9
 800477c:	08004dda 	.word	0x08004dda

08004780 <_printf_common>:
 8004780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004784:	4616      	mov	r6, r2
 8004786:	4699      	mov	r9, r3
 8004788:	688a      	ldr	r2, [r1, #8]
 800478a:	690b      	ldr	r3, [r1, #16]
 800478c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004790:	4293      	cmp	r3, r2
 8004792:	bfb8      	it	lt
 8004794:	4613      	movlt	r3, r2
 8004796:	6033      	str	r3, [r6, #0]
 8004798:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800479c:	4607      	mov	r7, r0
 800479e:	460c      	mov	r4, r1
 80047a0:	b10a      	cbz	r2, 80047a6 <_printf_common+0x26>
 80047a2:	3301      	adds	r3, #1
 80047a4:	6033      	str	r3, [r6, #0]
 80047a6:	6823      	ldr	r3, [r4, #0]
 80047a8:	0699      	lsls	r1, r3, #26
 80047aa:	bf42      	ittt	mi
 80047ac:	6833      	ldrmi	r3, [r6, #0]
 80047ae:	3302      	addmi	r3, #2
 80047b0:	6033      	strmi	r3, [r6, #0]
 80047b2:	6825      	ldr	r5, [r4, #0]
 80047b4:	f015 0506 	ands.w	r5, r5, #6
 80047b8:	d106      	bne.n	80047c8 <_printf_common+0x48>
 80047ba:	f104 0a19 	add.w	sl, r4, #25
 80047be:	68e3      	ldr	r3, [r4, #12]
 80047c0:	6832      	ldr	r2, [r6, #0]
 80047c2:	1a9b      	subs	r3, r3, r2
 80047c4:	42ab      	cmp	r3, r5
 80047c6:	dc26      	bgt.n	8004816 <_printf_common+0x96>
 80047c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047cc:	1e13      	subs	r3, r2, #0
 80047ce:	6822      	ldr	r2, [r4, #0]
 80047d0:	bf18      	it	ne
 80047d2:	2301      	movne	r3, #1
 80047d4:	0692      	lsls	r2, r2, #26
 80047d6:	d42b      	bmi.n	8004830 <_printf_common+0xb0>
 80047d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047dc:	4649      	mov	r1, r9
 80047de:	4638      	mov	r0, r7
 80047e0:	47c0      	blx	r8
 80047e2:	3001      	adds	r0, #1
 80047e4:	d01e      	beq.n	8004824 <_printf_common+0xa4>
 80047e6:	6823      	ldr	r3, [r4, #0]
 80047e8:	68e5      	ldr	r5, [r4, #12]
 80047ea:	6832      	ldr	r2, [r6, #0]
 80047ec:	f003 0306 	and.w	r3, r3, #6
 80047f0:	2b04      	cmp	r3, #4
 80047f2:	bf08      	it	eq
 80047f4:	1aad      	subeq	r5, r5, r2
 80047f6:	68a3      	ldr	r3, [r4, #8]
 80047f8:	6922      	ldr	r2, [r4, #16]
 80047fa:	bf0c      	ite	eq
 80047fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004800:	2500      	movne	r5, #0
 8004802:	4293      	cmp	r3, r2
 8004804:	bfc4      	itt	gt
 8004806:	1a9b      	subgt	r3, r3, r2
 8004808:	18ed      	addgt	r5, r5, r3
 800480a:	2600      	movs	r6, #0
 800480c:	341a      	adds	r4, #26
 800480e:	42b5      	cmp	r5, r6
 8004810:	d11a      	bne.n	8004848 <_printf_common+0xc8>
 8004812:	2000      	movs	r0, #0
 8004814:	e008      	b.n	8004828 <_printf_common+0xa8>
 8004816:	2301      	movs	r3, #1
 8004818:	4652      	mov	r2, sl
 800481a:	4649      	mov	r1, r9
 800481c:	4638      	mov	r0, r7
 800481e:	47c0      	blx	r8
 8004820:	3001      	adds	r0, #1
 8004822:	d103      	bne.n	800482c <_printf_common+0xac>
 8004824:	f04f 30ff 	mov.w	r0, #4294967295
 8004828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800482c:	3501      	adds	r5, #1
 800482e:	e7c6      	b.n	80047be <_printf_common+0x3e>
 8004830:	18e1      	adds	r1, r4, r3
 8004832:	1c5a      	adds	r2, r3, #1
 8004834:	2030      	movs	r0, #48	; 0x30
 8004836:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800483a:	4422      	add	r2, r4
 800483c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004840:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004844:	3302      	adds	r3, #2
 8004846:	e7c7      	b.n	80047d8 <_printf_common+0x58>
 8004848:	2301      	movs	r3, #1
 800484a:	4622      	mov	r2, r4
 800484c:	4649      	mov	r1, r9
 800484e:	4638      	mov	r0, r7
 8004850:	47c0      	blx	r8
 8004852:	3001      	adds	r0, #1
 8004854:	d0e6      	beq.n	8004824 <_printf_common+0xa4>
 8004856:	3601      	adds	r6, #1
 8004858:	e7d9      	b.n	800480e <_printf_common+0x8e>
	...

0800485c <_printf_i>:
 800485c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004860:	7e0f      	ldrb	r7, [r1, #24]
 8004862:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004864:	2f78      	cmp	r7, #120	; 0x78
 8004866:	4691      	mov	r9, r2
 8004868:	4680      	mov	r8, r0
 800486a:	460c      	mov	r4, r1
 800486c:	469a      	mov	sl, r3
 800486e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004872:	d807      	bhi.n	8004884 <_printf_i+0x28>
 8004874:	2f62      	cmp	r7, #98	; 0x62
 8004876:	d80a      	bhi.n	800488e <_printf_i+0x32>
 8004878:	2f00      	cmp	r7, #0
 800487a:	f000 80d8 	beq.w	8004a2e <_printf_i+0x1d2>
 800487e:	2f58      	cmp	r7, #88	; 0x58
 8004880:	f000 80a3 	beq.w	80049ca <_printf_i+0x16e>
 8004884:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004888:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800488c:	e03a      	b.n	8004904 <_printf_i+0xa8>
 800488e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004892:	2b15      	cmp	r3, #21
 8004894:	d8f6      	bhi.n	8004884 <_printf_i+0x28>
 8004896:	a101      	add	r1, pc, #4	; (adr r1, 800489c <_printf_i+0x40>)
 8004898:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800489c:	080048f5 	.word	0x080048f5
 80048a0:	08004909 	.word	0x08004909
 80048a4:	08004885 	.word	0x08004885
 80048a8:	08004885 	.word	0x08004885
 80048ac:	08004885 	.word	0x08004885
 80048b0:	08004885 	.word	0x08004885
 80048b4:	08004909 	.word	0x08004909
 80048b8:	08004885 	.word	0x08004885
 80048bc:	08004885 	.word	0x08004885
 80048c0:	08004885 	.word	0x08004885
 80048c4:	08004885 	.word	0x08004885
 80048c8:	08004a15 	.word	0x08004a15
 80048cc:	08004939 	.word	0x08004939
 80048d0:	080049f7 	.word	0x080049f7
 80048d4:	08004885 	.word	0x08004885
 80048d8:	08004885 	.word	0x08004885
 80048dc:	08004a37 	.word	0x08004a37
 80048e0:	08004885 	.word	0x08004885
 80048e4:	08004939 	.word	0x08004939
 80048e8:	08004885 	.word	0x08004885
 80048ec:	08004885 	.word	0x08004885
 80048f0:	080049ff 	.word	0x080049ff
 80048f4:	682b      	ldr	r3, [r5, #0]
 80048f6:	1d1a      	adds	r2, r3, #4
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	602a      	str	r2, [r5, #0]
 80048fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004900:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004904:	2301      	movs	r3, #1
 8004906:	e0a3      	b.n	8004a50 <_printf_i+0x1f4>
 8004908:	6820      	ldr	r0, [r4, #0]
 800490a:	6829      	ldr	r1, [r5, #0]
 800490c:	0606      	lsls	r6, r0, #24
 800490e:	f101 0304 	add.w	r3, r1, #4
 8004912:	d50a      	bpl.n	800492a <_printf_i+0xce>
 8004914:	680e      	ldr	r6, [r1, #0]
 8004916:	602b      	str	r3, [r5, #0]
 8004918:	2e00      	cmp	r6, #0
 800491a:	da03      	bge.n	8004924 <_printf_i+0xc8>
 800491c:	232d      	movs	r3, #45	; 0x2d
 800491e:	4276      	negs	r6, r6
 8004920:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004924:	485e      	ldr	r0, [pc, #376]	; (8004aa0 <_printf_i+0x244>)
 8004926:	230a      	movs	r3, #10
 8004928:	e019      	b.n	800495e <_printf_i+0x102>
 800492a:	680e      	ldr	r6, [r1, #0]
 800492c:	602b      	str	r3, [r5, #0]
 800492e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004932:	bf18      	it	ne
 8004934:	b236      	sxthne	r6, r6
 8004936:	e7ef      	b.n	8004918 <_printf_i+0xbc>
 8004938:	682b      	ldr	r3, [r5, #0]
 800493a:	6820      	ldr	r0, [r4, #0]
 800493c:	1d19      	adds	r1, r3, #4
 800493e:	6029      	str	r1, [r5, #0]
 8004940:	0601      	lsls	r1, r0, #24
 8004942:	d501      	bpl.n	8004948 <_printf_i+0xec>
 8004944:	681e      	ldr	r6, [r3, #0]
 8004946:	e002      	b.n	800494e <_printf_i+0xf2>
 8004948:	0646      	lsls	r6, r0, #25
 800494a:	d5fb      	bpl.n	8004944 <_printf_i+0xe8>
 800494c:	881e      	ldrh	r6, [r3, #0]
 800494e:	4854      	ldr	r0, [pc, #336]	; (8004aa0 <_printf_i+0x244>)
 8004950:	2f6f      	cmp	r7, #111	; 0x6f
 8004952:	bf0c      	ite	eq
 8004954:	2308      	moveq	r3, #8
 8004956:	230a      	movne	r3, #10
 8004958:	2100      	movs	r1, #0
 800495a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800495e:	6865      	ldr	r5, [r4, #4]
 8004960:	60a5      	str	r5, [r4, #8]
 8004962:	2d00      	cmp	r5, #0
 8004964:	bfa2      	ittt	ge
 8004966:	6821      	ldrge	r1, [r4, #0]
 8004968:	f021 0104 	bicge.w	r1, r1, #4
 800496c:	6021      	strge	r1, [r4, #0]
 800496e:	b90e      	cbnz	r6, 8004974 <_printf_i+0x118>
 8004970:	2d00      	cmp	r5, #0
 8004972:	d04d      	beq.n	8004a10 <_printf_i+0x1b4>
 8004974:	4615      	mov	r5, r2
 8004976:	fbb6 f1f3 	udiv	r1, r6, r3
 800497a:	fb03 6711 	mls	r7, r3, r1, r6
 800497e:	5dc7      	ldrb	r7, [r0, r7]
 8004980:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004984:	4637      	mov	r7, r6
 8004986:	42bb      	cmp	r3, r7
 8004988:	460e      	mov	r6, r1
 800498a:	d9f4      	bls.n	8004976 <_printf_i+0x11a>
 800498c:	2b08      	cmp	r3, #8
 800498e:	d10b      	bne.n	80049a8 <_printf_i+0x14c>
 8004990:	6823      	ldr	r3, [r4, #0]
 8004992:	07de      	lsls	r6, r3, #31
 8004994:	d508      	bpl.n	80049a8 <_printf_i+0x14c>
 8004996:	6923      	ldr	r3, [r4, #16]
 8004998:	6861      	ldr	r1, [r4, #4]
 800499a:	4299      	cmp	r1, r3
 800499c:	bfde      	ittt	le
 800499e:	2330      	movle	r3, #48	; 0x30
 80049a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80049a8:	1b52      	subs	r2, r2, r5
 80049aa:	6122      	str	r2, [r4, #16]
 80049ac:	f8cd a000 	str.w	sl, [sp]
 80049b0:	464b      	mov	r3, r9
 80049b2:	aa03      	add	r2, sp, #12
 80049b4:	4621      	mov	r1, r4
 80049b6:	4640      	mov	r0, r8
 80049b8:	f7ff fee2 	bl	8004780 <_printf_common>
 80049bc:	3001      	adds	r0, #1
 80049be:	d14c      	bne.n	8004a5a <_printf_i+0x1fe>
 80049c0:	f04f 30ff 	mov.w	r0, #4294967295
 80049c4:	b004      	add	sp, #16
 80049c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049ca:	4835      	ldr	r0, [pc, #212]	; (8004aa0 <_printf_i+0x244>)
 80049cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80049d0:	6829      	ldr	r1, [r5, #0]
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80049d8:	6029      	str	r1, [r5, #0]
 80049da:	061d      	lsls	r5, r3, #24
 80049dc:	d514      	bpl.n	8004a08 <_printf_i+0x1ac>
 80049de:	07df      	lsls	r7, r3, #31
 80049e0:	bf44      	itt	mi
 80049e2:	f043 0320 	orrmi.w	r3, r3, #32
 80049e6:	6023      	strmi	r3, [r4, #0]
 80049e8:	b91e      	cbnz	r6, 80049f2 <_printf_i+0x196>
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	f023 0320 	bic.w	r3, r3, #32
 80049f0:	6023      	str	r3, [r4, #0]
 80049f2:	2310      	movs	r3, #16
 80049f4:	e7b0      	b.n	8004958 <_printf_i+0xfc>
 80049f6:	6823      	ldr	r3, [r4, #0]
 80049f8:	f043 0320 	orr.w	r3, r3, #32
 80049fc:	6023      	str	r3, [r4, #0]
 80049fe:	2378      	movs	r3, #120	; 0x78
 8004a00:	4828      	ldr	r0, [pc, #160]	; (8004aa4 <_printf_i+0x248>)
 8004a02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a06:	e7e3      	b.n	80049d0 <_printf_i+0x174>
 8004a08:	0659      	lsls	r1, r3, #25
 8004a0a:	bf48      	it	mi
 8004a0c:	b2b6      	uxthmi	r6, r6
 8004a0e:	e7e6      	b.n	80049de <_printf_i+0x182>
 8004a10:	4615      	mov	r5, r2
 8004a12:	e7bb      	b.n	800498c <_printf_i+0x130>
 8004a14:	682b      	ldr	r3, [r5, #0]
 8004a16:	6826      	ldr	r6, [r4, #0]
 8004a18:	6961      	ldr	r1, [r4, #20]
 8004a1a:	1d18      	adds	r0, r3, #4
 8004a1c:	6028      	str	r0, [r5, #0]
 8004a1e:	0635      	lsls	r5, r6, #24
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	d501      	bpl.n	8004a28 <_printf_i+0x1cc>
 8004a24:	6019      	str	r1, [r3, #0]
 8004a26:	e002      	b.n	8004a2e <_printf_i+0x1d2>
 8004a28:	0670      	lsls	r0, r6, #25
 8004a2a:	d5fb      	bpl.n	8004a24 <_printf_i+0x1c8>
 8004a2c:	8019      	strh	r1, [r3, #0]
 8004a2e:	2300      	movs	r3, #0
 8004a30:	6123      	str	r3, [r4, #16]
 8004a32:	4615      	mov	r5, r2
 8004a34:	e7ba      	b.n	80049ac <_printf_i+0x150>
 8004a36:	682b      	ldr	r3, [r5, #0]
 8004a38:	1d1a      	adds	r2, r3, #4
 8004a3a:	602a      	str	r2, [r5, #0]
 8004a3c:	681d      	ldr	r5, [r3, #0]
 8004a3e:	6862      	ldr	r2, [r4, #4]
 8004a40:	2100      	movs	r1, #0
 8004a42:	4628      	mov	r0, r5
 8004a44:	f7fb fbcc 	bl	80001e0 <memchr>
 8004a48:	b108      	cbz	r0, 8004a4e <_printf_i+0x1f2>
 8004a4a:	1b40      	subs	r0, r0, r5
 8004a4c:	6060      	str	r0, [r4, #4]
 8004a4e:	6863      	ldr	r3, [r4, #4]
 8004a50:	6123      	str	r3, [r4, #16]
 8004a52:	2300      	movs	r3, #0
 8004a54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a58:	e7a8      	b.n	80049ac <_printf_i+0x150>
 8004a5a:	6923      	ldr	r3, [r4, #16]
 8004a5c:	462a      	mov	r2, r5
 8004a5e:	4649      	mov	r1, r9
 8004a60:	4640      	mov	r0, r8
 8004a62:	47d0      	blx	sl
 8004a64:	3001      	adds	r0, #1
 8004a66:	d0ab      	beq.n	80049c0 <_printf_i+0x164>
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	079b      	lsls	r3, r3, #30
 8004a6c:	d413      	bmi.n	8004a96 <_printf_i+0x23a>
 8004a6e:	68e0      	ldr	r0, [r4, #12]
 8004a70:	9b03      	ldr	r3, [sp, #12]
 8004a72:	4298      	cmp	r0, r3
 8004a74:	bfb8      	it	lt
 8004a76:	4618      	movlt	r0, r3
 8004a78:	e7a4      	b.n	80049c4 <_printf_i+0x168>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	4632      	mov	r2, r6
 8004a7e:	4649      	mov	r1, r9
 8004a80:	4640      	mov	r0, r8
 8004a82:	47d0      	blx	sl
 8004a84:	3001      	adds	r0, #1
 8004a86:	d09b      	beq.n	80049c0 <_printf_i+0x164>
 8004a88:	3501      	adds	r5, #1
 8004a8a:	68e3      	ldr	r3, [r4, #12]
 8004a8c:	9903      	ldr	r1, [sp, #12]
 8004a8e:	1a5b      	subs	r3, r3, r1
 8004a90:	42ab      	cmp	r3, r5
 8004a92:	dcf2      	bgt.n	8004a7a <_printf_i+0x21e>
 8004a94:	e7eb      	b.n	8004a6e <_printf_i+0x212>
 8004a96:	2500      	movs	r5, #0
 8004a98:	f104 0619 	add.w	r6, r4, #25
 8004a9c:	e7f5      	b.n	8004a8a <_printf_i+0x22e>
 8004a9e:	bf00      	nop
 8004aa0:	08004de5 	.word	0x08004de5
 8004aa4:	08004df6 	.word	0x08004df6

08004aa8 <memcpy>:
 8004aa8:	440a      	add	r2, r1
 8004aaa:	4291      	cmp	r1, r2
 8004aac:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ab0:	d100      	bne.n	8004ab4 <memcpy+0xc>
 8004ab2:	4770      	bx	lr
 8004ab4:	b510      	push	{r4, lr}
 8004ab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004aba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004abe:	4291      	cmp	r1, r2
 8004ac0:	d1f9      	bne.n	8004ab6 <memcpy+0xe>
 8004ac2:	bd10      	pop	{r4, pc}

08004ac4 <memmove>:
 8004ac4:	4288      	cmp	r0, r1
 8004ac6:	b510      	push	{r4, lr}
 8004ac8:	eb01 0402 	add.w	r4, r1, r2
 8004acc:	d902      	bls.n	8004ad4 <memmove+0x10>
 8004ace:	4284      	cmp	r4, r0
 8004ad0:	4623      	mov	r3, r4
 8004ad2:	d807      	bhi.n	8004ae4 <memmove+0x20>
 8004ad4:	1e43      	subs	r3, r0, #1
 8004ad6:	42a1      	cmp	r1, r4
 8004ad8:	d008      	beq.n	8004aec <memmove+0x28>
 8004ada:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ade:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ae2:	e7f8      	b.n	8004ad6 <memmove+0x12>
 8004ae4:	4402      	add	r2, r0
 8004ae6:	4601      	mov	r1, r0
 8004ae8:	428a      	cmp	r2, r1
 8004aea:	d100      	bne.n	8004aee <memmove+0x2a>
 8004aec:	bd10      	pop	{r4, pc}
 8004aee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004af2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004af6:	e7f7      	b.n	8004ae8 <memmove+0x24>

08004af8 <_free_r>:
 8004af8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004afa:	2900      	cmp	r1, #0
 8004afc:	d044      	beq.n	8004b88 <_free_r+0x90>
 8004afe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b02:	9001      	str	r0, [sp, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f1a1 0404 	sub.w	r4, r1, #4
 8004b0a:	bfb8      	it	lt
 8004b0c:	18e4      	addlt	r4, r4, r3
 8004b0e:	f000 f913 	bl	8004d38 <__malloc_lock>
 8004b12:	4a1e      	ldr	r2, [pc, #120]	; (8004b8c <_free_r+0x94>)
 8004b14:	9801      	ldr	r0, [sp, #4]
 8004b16:	6813      	ldr	r3, [r2, #0]
 8004b18:	b933      	cbnz	r3, 8004b28 <_free_r+0x30>
 8004b1a:	6063      	str	r3, [r4, #4]
 8004b1c:	6014      	str	r4, [r2, #0]
 8004b1e:	b003      	add	sp, #12
 8004b20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b24:	f000 b90e 	b.w	8004d44 <__malloc_unlock>
 8004b28:	42a3      	cmp	r3, r4
 8004b2a:	d908      	bls.n	8004b3e <_free_r+0x46>
 8004b2c:	6825      	ldr	r5, [r4, #0]
 8004b2e:	1961      	adds	r1, r4, r5
 8004b30:	428b      	cmp	r3, r1
 8004b32:	bf01      	itttt	eq
 8004b34:	6819      	ldreq	r1, [r3, #0]
 8004b36:	685b      	ldreq	r3, [r3, #4]
 8004b38:	1949      	addeq	r1, r1, r5
 8004b3a:	6021      	streq	r1, [r4, #0]
 8004b3c:	e7ed      	b.n	8004b1a <_free_r+0x22>
 8004b3e:	461a      	mov	r2, r3
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	b10b      	cbz	r3, 8004b48 <_free_r+0x50>
 8004b44:	42a3      	cmp	r3, r4
 8004b46:	d9fa      	bls.n	8004b3e <_free_r+0x46>
 8004b48:	6811      	ldr	r1, [r2, #0]
 8004b4a:	1855      	adds	r5, r2, r1
 8004b4c:	42a5      	cmp	r5, r4
 8004b4e:	d10b      	bne.n	8004b68 <_free_r+0x70>
 8004b50:	6824      	ldr	r4, [r4, #0]
 8004b52:	4421      	add	r1, r4
 8004b54:	1854      	adds	r4, r2, r1
 8004b56:	42a3      	cmp	r3, r4
 8004b58:	6011      	str	r1, [r2, #0]
 8004b5a:	d1e0      	bne.n	8004b1e <_free_r+0x26>
 8004b5c:	681c      	ldr	r4, [r3, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	6053      	str	r3, [r2, #4]
 8004b62:	4421      	add	r1, r4
 8004b64:	6011      	str	r1, [r2, #0]
 8004b66:	e7da      	b.n	8004b1e <_free_r+0x26>
 8004b68:	d902      	bls.n	8004b70 <_free_r+0x78>
 8004b6a:	230c      	movs	r3, #12
 8004b6c:	6003      	str	r3, [r0, #0]
 8004b6e:	e7d6      	b.n	8004b1e <_free_r+0x26>
 8004b70:	6825      	ldr	r5, [r4, #0]
 8004b72:	1961      	adds	r1, r4, r5
 8004b74:	428b      	cmp	r3, r1
 8004b76:	bf04      	itt	eq
 8004b78:	6819      	ldreq	r1, [r3, #0]
 8004b7a:	685b      	ldreq	r3, [r3, #4]
 8004b7c:	6063      	str	r3, [r4, #4]
 8004b7e:	bf04      	itt	eq
 8004b80:	1949      	addeq	r1, r1, r5
 8004b82:	6021      	streq	r1, [r4, #0]
 8004b84:	6054      	str	r4, [r2, #4]
 8004b86:	e7ca      	b.n	8004b1e <_free_r+0x26>
 8004b88:	b003      	add	sp, #12
 8004b8a:	bd30      	pop	{r4, r5, pc}
 8004b8c:	200001bc 	.word	0x200001bc

08004b90 <sbrk_aligned>:
 8004b90:	b570      	push	{r4, r5, r6, lr}
 8004b92:	4e0e      	ldr	r6, [pc, #56]	; (8004bcc <sbrk_aligned+0x3c>)
 8004b94:	460c      	mov	r4, r1
 8004b96:	6831      	ldr	r1, [r6, #0]
 8004b98:	4605      	mov	r5, r0
 8004b9a:	b911      	cbnz	r1, 8004ba2 <sbrk_aligned+0x12>
 8004b9c:	f000 f8bc 	bl	8004d18 <_sbrk_r>
 8004ba0:	6030      	str	r0, [r6, #0]
 8004ba2:	4621      	mov	r1, r4
 8004ba4:	4628      	mov	r0, r5
 8004ba6:	f000 f8b7 	bl	8004d18 <_sbrk_r>
 8004baa:	1c43      	adds	r3, r0, #1
 8004bac:	d00a      	beq.n	8004bc4 <sbrk_aligned+0x34>
 8004bae:	1cc4      	adds	r4, r0, #3
 8004bb0:	f024 0403 	bic.w	r4, r4, #3
 8004bb4:	42a0      	cmp	r0, r4
 8004bb6:	d007      	beq.n	8004bc8 <sbrk_aligned+0x38>
 8004bb8:	1a21      	subs	r1, r4, r0
 8004bba:	4628      	mov	r0, r5
 8004bbc:	f000 f8ac 	bl	8004d18 <_sbrk_r>
 8004bc0:	3001      	adds	r0, #1
 8004bc2:	d101      	bne.n	8004bc8 <sbrk_aligned+0x38>
 8004bc4:	f04f 34ff 	mov.w	r4, #4294967295
 8004bc8:	4620      	mov	r0, r4
 8004bca:	bd70      	pop	{r4, r5, r6, pc}
 8004bcc:	200001c0 	.word	0x200001c0

08004bd0 <_malloc_r>:
 8004bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bd4:	1ccd      	adds	r5, r1, #3
 8004bd6:	f025 0503 	bic.w	r5, r5, #3
 8004bda:	3508      	adds	r5, #8
 8004bdc:	2d0c      	cmp	r5, #12
 8004bde:	bf38      	it	cc
 8004be0:	250c      	movcc	r5, #12
 8004be2:	2d00      	cmp	r5, #0
 8004be4:	4607      	mov	r7, r0
 8004be6:	db01      	blt.n	8004bec <_malloc_r+0x1c>
 8004be8:	42a9      	cmp	r1, r5
 8004bea:	d905      	bls.n	8004bf8 <_malloc_r+0x28>
 8004bec:	230c      	movs	r3, #12
 8004bee:	603b      	str	r3, [r7, #0]
 8004bf0:	2600      	movs	r6, #0
 8004bf2:	4630      	mov	r0, r6
 8004bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bf8:	4e2e      	ldr	r6, [pc, #184]	; (8004cb4 <_malloc_r+0xe4>)
 8004bfa:	f000 f89d 	bl	8004d38 <__malloc_lock>
 8004bfe:	6833      	ldr	r3, [r6, #0]
 8004c00:	461c      	mov	r4, r3
 8004c02:	bb34      	cbnz	r4, 8004c52 <_malloc_r+0x82>
 8004c04:	4629      	mov	r1, r5
 8004c06:	4638      	mov	r0, r7
 8004c08:	f7ff ffc2 	bl	8004b90 <sbrk_aligned>
 8004c0c:	1c43      	adds	r3, r0, #1
 8004c0e:	4604      	mov	r4, r0
 8004c10:	d14d      	bne.n	8004cae <_malloc_r+0xde>
 8004c12:	6834      	ldr	r4, [r6, #0]
 8004c14:	4626      	mov	r6, r4
 8004c16:	2e00      	cmp	r6, #0
 8004c18:	d140      	bne.n	8004c9c <_malloc_r+0xcc>
 8004c1a:	6823      	ldr	r3, [r4, #0]
 8004c1c:	4631      	mov	r1, r6
 8004c1e:	4638      	mov	r0, r7
 8004c20:	eb04 0803 	add.w	r8, r4, r3
 8004c24:	f000 f878 	bl	8004d18 <_sbrk_r>
 8004c28:	4580      	cmp	r8, r0
 8004c2a:	d13a      	bne.n	8004ca2 <_malloc_r+0xd2>
 8004c2c:	6821      	ldr	r1, [r4, #0]
 8004c2e:	3503      	adds	r5, #3
 8004c30:	1a6d      	subs	r5, r5, r1
 8004c32:	f025 0503 	bic.w	r5, r5, #3
 8004c36:	3508      	adds	r5, #8
 8004c38:	2d0c      	cmp	r5, #12
 8004c3a:	bf38      	it	cc
 8004c3c:	250c      	movcc	r5, #12
 8004c3e:	4629      	mov	r1, r5
 8004c40:	4638      	mov	r0, r7
 8004c42:	f7ff ffa5 	bl	8004b90 <sbrk_aligned>
 8004c46:	3001      	adds	r0, #1
 8004c48:	d02b      	beq.n	8004ca2 <_malloc_r+0xd2>
 8004c4a:	6823      	ldr	r3, [r4, #0]
 8004c4c:	442b      	add	r3, r5
 8004c4e:	6023      	str	r3, [r4, #0]
 8004c50:	e00e      	b.n	8004c70 <_malloc_r+0xa0>
 8004c52:	6822      	ldr	r2, [r4, #0]
 8004c54:	1b52      	subs	r2, r2, r5
 8004c56:	d41e      	bmi.n	8004c96 <_malloc_r+0xc6>
 8004c58:	2a0b      	cmp	r2, #11
 8004c5a:	d916      	bls.n	8004c8a <_malloc_r+0xba>
 8004c5c:	1961      	adds	r1, r4, r5
 8004c5e:	42a3      	cmp	r3, r4
 8004c60:	6025      	str	r5, [r4, #0]
 8004c62:	bf18      	it	ne
 8004c64:	6059      	strne	r1, [r3, #4]
 8004c66:	6863      	ldr	r3, [r4, #4]
 8004c68:	bf08      	it	eq
 8004c6a:	6031      	streq	r1, [r6, #0]
 8004c6c:	5162      	str	r2, [r4, r5]
 8004c6e:	604b      	str	r3, [r1, #4]
 8004c70:	4638      	mov	r0, r7
 8004c72:	f104 060b 	add.w	r6, r4, #11
 8004c76:	f000 f865 	bl	8004d44 <__malloc_unlock>
 8004c7a:	f026 0607 	bic.w	r6, r6, #7
 8004c7e:	1d23      	adds	r3, r4, #4
 8004c80:	1af2      	subs	r2, r6, r3
 8004c82:	d0b6      	beq.n	8004bf2 <_malloc_r+0x22>
 8004c84:	1b9b      	subs	r3, r3, r6
 8004c86:	50a3      	str	r3, [r4, r2]
 8004c88:	e7b3      	b.n	8004bf2 <_malloc_r+0x22>
 8004c8a:	6862      	ldr	r2, [r4, #4]
 8004c8c:	42a3      	cmp	r3, r4
 8004c8e:	bf0c      	ite	eq
 8004c90:	6032      	streq	r2, [r6, #0]
 8004c92:	605a      	strne	r2, [r3, #4]
 8004c94:	e7ec      	b.n	8004c70 <_malloc_r+0xa0>
 8004c96:	4623      	mov	r3, r4
 8004c98:	6864      	ldr	r4, [r4, #4]
 8004c9a:	e7b2      	b.n	8004c02 <_malloc_r+0x32>
 8004c9c:	4634      	mov	r4, r6
 8004c9e:	6876      	ldr	r6, [r6, #4]
 8004ca0:	e7b9      	b.n	8004c16 <_malloc_r+0x46>
 8004ca2:	230c      	movs	r3, #12
 8004ca4:	603b      	str	r3, [r7, #0]
 8004ca6:	4638      	mov	r0, r7
 8004ca8:	f000 f84c 	bl	8004d44 <__malloc_unlock>
 8004cac:	e7a1      	b.n	8004bf2 <_malloc_r+0x22>
 8004cae:	6025      	str	r5, [r4, #0]
 8004cb0:	e7de      	b.n	8004c70 <_malloc_r+0xa0>
 8004cb2:	bf00      	nop
 8004cb4:	200001bc 	.word	0x200001bc

08004cb8 <_realloc_r>:
 8004cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cbc:	4680      	mov	r8, r0
 8004cbe:	4614      	mov	r4, r2
 8004cc0:	460e      	mov	r6, r1
 8004cc2:	b921      	cbnz	r1, 8004cce <_realloc_r+0x16>
 8004cc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cc8:	4611      	mov	r1, r2
 8004cca:	f7ff bf81 	b.w	8004bd0 <_malloc_r>
 8004cce:	b92a      	cbnz	r2, 8004cdc <_realloc_r+0x24>
 8004cd0:	f7ff ff12 	bl	8004af8 <_free_r>
 8004cd4:	4625      	mov	r5, r4
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cdc:	f000 f838 	bl	8004d50 <_malloc_usable_size_r>
 8004ce0:	4284      	cmp	r4, r0
 8004ce2:	4607      	mov	r7, r0
 8004ce4:	d802      	bhi.n	8004cec <_realloc_r+0x34>
 8004ce6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004cea:	d812      	bhi.n	8004d12 <_realloc_r+0x5a>
 8004cec:	4621      	mov	r1, r4
 8004cee:	4640      	mov	r0, r8
 8004cf0:	f7ff ff6e 	bl	8004bd0 <_malloc_r>
 8004cf4:	4605      	mov	r5, r0
 8004cf6:	2800      	cmp	r0, #0
 8004cf8:	d0ed      	beq.n	8004cd6 <_realloc_r+0x1e>
 8004cfa:	42bc      	cmp	r4, r7
 8004cfc:	4622      	mov	r2, r4
 8004cfe:	4631      	mov	r1, r6
 8004d00:	bf28      	it	cs
 8004d02:	463a      	movcs	r2, r7
 8004d04:	f7ff fed0 	bl	8004aa8 <memcpy>
 8004d08:	4631      	mov	r1, r6
 8004d0a:	4640      	mov	r0, r8
 8004d0c:	f7ff fef4 	bl	8004af8 <_free_r>
 8004d10:	e7e1      	b.n	8004cd6 <_realloc_r+0x1e>
 8004d12:	4635      	mov	r5, r6
 8004d14:	e7df      	b.n	8004cd6 <_realloc_r+0x1e>
	...

08004d18 <_sbrk_r>:
 8004d18:	b538      	push	{r3, r4, r5, lr}
 8004d1a:	4d06      	ldr	r5, [pc, #24]	; (8004d34 <_sbrk_r+0x1c>)
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	4604      	mov	r4, r0
 8004d20:	4608      	mov	r0, r1
 8004d22:	602b      	str	r3, [r5, #0]
 8004d24:	f7fb fe00 	bl	8000928 <_sbrk>
 8004d28:	1c43      	adds	r3, r0, #1
 8004d2a:	d102      	bne.n	8004d32 <_sbrk_r+0x1a>
 8004d2c:	682b      	ldr	r3, [r5, #0]
 8004d2e:	b103      	cbz	r3, 8004d32 <_sbrk_r+0x1a>
 8004d30:	6023      	str	r3, [r4, #0]
 8004d32:	bd38      	pop	{r3, r4, r5, pc}
 8004d34:	200001c4 	.word	0x200001c4

08004d38 <__malloc_lock>:
 8004d38:	4801      	ldr	r0, [pc, #4]	; (8004d40 <__malloc_lock+0x8>)
 8004d3a:	f000 b811 	b.w	8004d60 <__retarget_lock_acquire_recursive>
 8004d3e:	bf00      	nop
 8004d40:	200001c8 	.word	0x200001c8

08004d44 <__malloc_unlock>:
 8004d44:	4801      	ldr	r0, [pc, #4]	; (8004d4c <__malloc_unlock+0x8>)
 8004d46:	f000 b80c 	b.w	8004d62 <__retarget_lock_release_recursive>
 8004d4a:	bf00      	nop
 8004d4c:	200001c8 	.word	0x200001c8

08004d50 <_malloc_usable_size_r>:
 8004d50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d54:	1f18      	subs	r0, r3, #4
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	bfbc      	itt	lt
 8004d5a:	580b      	ldrlt	r3, [r1, r0]
 8004d5c:	18c0      	addlt	r0, r0, r3
 8004d5e:	4770      	bx	lr

08004d60 <__retarget_lock_acquire_recursive>:
 8004d60:	4770      	bx	lr

08004d62 <__retarget_lock_release_recursive>:
 8004d62:	4770      	bx	lr

08004d64 <_init>:
 8004d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d66:	bf00      	nop
 8004d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d6a:	bc08      	pop	{r3}
 8004d6c:	469e      	mov	lr, r3
 8004d6e:	4770      	bx	lr

08004d70 <_fini>:
 8004d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d72:	bf00      	nop
 8004d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d76:	bc08      	pop	{r3}
 8004d78:	469e      	mov	lr, r3
 8004d7a:	4770      	bx	lr
