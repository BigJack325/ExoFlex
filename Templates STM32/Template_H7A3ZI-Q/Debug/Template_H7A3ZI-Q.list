
Template_H7A3ZI-Q.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050c8  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005374  08005374  00015374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080053ac  080053ac  000153ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080053b4  080053b4  000153b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080053b8  080053b8  000153b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  080053bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b4  24000010  080053cc  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240000c4  080053cc  000200c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f316  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001bcf  00000000  00000000  0002f354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000a30  00000000  00000000  00030f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000998  00000000  00000000  00031958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000200a  00000000  00000000  000322f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000da9f  00000000  00000000  000342fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00131e6c  00000000  00000000  00041d99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00173c05  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000029a4  00000000  00000000  00173c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800535c 	.word	0x0800535c

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	0800535c 	.word	0x0800535c

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b974 	b.w	80005ec <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468e      	mov	lr, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14d      	bne.n	80003c6 <__udivmoddi4+0xaa>
 800032a:	428a      	cmp	r2, r1
 800032c:	4694      	mov	ip, r2
 800032e:	d969      	bls.n	8000404 <__udivmoddi4+0xe8>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b152      	cbz	r2, 800034c <__udivmoddi4+0x30>
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	f1c2 0120 	rsb	r1, r2, #32
 800033e:	fa20 f101 	lsr.w	r1, r0, r1
 8000342:	fa0c fc02 	lsl.w	ip, ip, r2
 8000346:	ea41 0e03 	orr.w	lr, r1, r3
 800034a:	4094      	lsls	r4, r2
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	0c21      	lsrs	r1, r4, #16
 8000352:	fbbe f6f8 	udiv	r6, lr, r8
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fb08 e316 	mls	r3, r8, r6, lr
 800035e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000362:	fb06 f107 	mul.w	r1, r6, r7
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 811f 	bcs.w	80005b4 <__udivmoddi4+0x298>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 811c 	bls.w	80005b4 <__udivmoddi4+0x298>
 800037c:	3e02      	subs	r6, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 f707 	mul.w	r7, r0, r7
 8000394:	42a7      	cmp	r7, r4
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x92>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a0:	f080 810a 	bcs.w	80005b8 <__udivmoddi4+0x29c>
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	f240 8107 	bls.w	80005b8 <__udivmoddi4+0x29c>
 80003aa:	4464      	add	r4, ip
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa4>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xc2>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80ef 	beq.w	80005ae <__udivmoddi4+0x292>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x160>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd4>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80f9 	bhi.w	80005e2 <__udivmoddi4+0x2c6>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	469e      	mov	lr, r3
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa4>
 80003fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa4>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xec>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 8092 	bne.w	8000536 <__udivmoddi4+0x21a>
 8000412:	eba1 010c 	sub.w	r1, r1, ip
 8000416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	2601      	movs	r6, #1
 8000420:	0c20      	lsrs	r0, r4, #16
 8000422:	fbb1 f3f7 	udiv	r3, r1, r7
 8000426:	fb07 1113 	mls	r1, r7, r3, r1
 800042a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042e:	fb0e f003 	mul.w	r0, lr, r3
 8000432:	4288      	cmp	r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x12c>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f103 38ff 	add.w	r8, r3, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x12a>
 8000440:	4288      	cmp	r0, r1
 8000442:	f200 80cb 	bhi.w	80005dc <__udivmoddi4+0x2c0>
 8000446:	4643      	mov	r3, r8
 8000448:	1a09      	subs	r1, r1, r0
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1110 	mls	r1, r7, r0, r1
 8000454:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000458:	fb0e fe00 	mul.w	lr, lr, r0
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x156>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 31ff 	add.w	r1, r0, #4294967295
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x154>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f200 80bb 	bhi.w	80005e6 <__udivmoddi4+0x2ca>
 8000470:	4608      	mov	r0, r1
 8000472:	eba4 040e 	sub.w	r4, r4, lr
 8000476:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047a:	e79c      	b.n	80003b6 <__udivmoddi4+0x9a>
 800047c:	f1c6 0720 	rsb	r7, r6, #32
 8000480:	40b3      	lsls	r3, r6
 8000482:	fa22 fc07 	lsr.w	ip, r2, r7
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa20 f407 	lsr.w	r4, r0, r7
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	431c      	orrs	r4, r3
 8000494:	40f9      	lsrs	r1, r7
 8000496:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049a:	fa00 f306 	lsl.w	r3, r0, r6
 800049e:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a2:	0c20      	lsrs	r0, r4, #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	fb08 f00e 	mul.w	r0, r8, lr
 80004b4:	4288      	cmp	r0, r1
 80004b6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b8>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2bc>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2bc>
 80004ce:	f1a8 0802 	sub.w	r8, r8, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	1a09      	subs	r1, r1, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004dc:	fb09 1110 	mls	r1, r9, r0, r1
 80004e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	458e      	cmp	lr, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x1e2>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f4:	d26c      	bcs.n	80005d0 <__udivmoddi4+0x2b4>
 80004f6:	458e      	cmp	lr, r1
 80004f8:	d96a      	bls.n	80005d0 <__udivmoddi4+0x2b4>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000502:	fba0 9402 	umull	r9, r4, r0, r2
 8000506:	eba1 010e 	sub.w	r1, r1, lr
 800050a:	42a1      	cmp	r1, r4
 800050c:	46c8      	mov	r8, r9
 800050e:	46a6      	mov	lr, r4
 8000510:	d356      	bcc.n	80005c0 <__udivmoddi4+0x2a4>
 8000512:	d053      	beq.n	80005bc <__udivmoddi4+0x2a0>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x212>
 8000516:	ebb3 0208 	subs.w	r2, r3, r8
 800051a:	eb61 010e 	sbc.w	r1, r1, lr
 800051e:	fa01 f707 	lsl.w	r7, r1, r7
 8000522:	fa22 f306 	lsr.w	r3, r2, r6
 8000526:	40f1      	lsrs	r1, r6
 8000528:	431f      	orrs	r7, r3
 800052a:	e9c5 7100 	strd	r7, r1, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	40d8      	lsrs	r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
 8000544:	4091      	lsls	r1, r2
 8000546:	4301      	orrs	r1, r0
 8000548:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054c:	fa1f fe8c 	uxth.w	lr, ip
 8000550:	fbb3 f0f7 	udiv	r0, r3, r7
 8000554:	fb07 3610 	mls	r6, r7, r0, r3
 8000558:	0c0b      	lsrs	r3, r1, #16
 800055a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055e:	fb00 f60e 	mul.w	r6, r0, lr
 8000562:	429e      	cmp	r6, r3
 8000564:	fa04 f402 	lsl.w	r4, r4, r2
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x260>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000572:	d22f      	bcs.n	80005d4 <__udivmoddi4+0x2b8>
 8000574:	429e      	cmp	r6, r3
 8000576:	d92d      	bls.n	80005d4 <__udivmoddi4+0x2b8>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1b9b      	subs	r3, r3, r6
 800057e:	b289      	uxth	r1, r1
 8000580:	fbb3 f6f7 	udiv	r6, r3, r7
 8000584:	fb07 3316 	mls	r3, r7, r6, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb06 f30e 	mul.w	r3, r6, lr
 8000590:	428b      	cmp	r3, r1
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x28a>
 8000594:	eb1c 0101 	adds.w	r1, ip, r1
 8000598:	f106 38ff 	add.w	r8, r6, #4294967295
 800059c:	d216      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d914      	bls.n	80005cc <__udivmoddi4+0x2b0>
 80005a2:	3e02      	subs	r6, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	1ac9      	subs	r1, r1, r3
 80005a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ac:	e738      	b.n	8000420 <__udivmoddi4+0x104>
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e705      	b.n	80003c0 <__udivmoddi4+0xa4>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e3      	b.n	8000380 <__udivmoddi4+0x64>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6f8      	b.n	80003ae <__udivmoddi4+0x92>
 80005bc:	454b      	cmp	r3, r9
 80005be:	d2a9      	bcs.n	8000514 <__udivmoddi4+0x1f8>
 80005c0:	ebb9 0802 	subs.w	r8, r9, r2
 80005c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7a3      	b.n	8000514 <__udivmoddi4+0x1f8>
 80005cc:	4646      	mov	r6, r8
 80005ce:	e7ea      	b.n	80005a6 <__udivmoddi4+0x28a>
 80005d0:	4620      	mov	r0, r4
 80005d2:	e794      	b.n	80004fe <__udivmoddi4+0x1e2>
 80005d4:	4640      	mov	r0, r8
 80005d6:	e7d1      	b.n	800057c <__udivmoddi4+0x260>
 80005d8:	46d0      	mov	r8, sl
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b8>
 80005dc:	3b02      	subs	r3, #2
 80005de:	4461      	add	r1, ip
 80005e0:	e732      	b.n	8000448 <__udivmoddi4+0x12c>
 80005e2:	4630      	mov	r0, r6
 80005e4:	e709      	b.n	80003fa <__udivmoddi4+0xde>
 80005e6:	4464      	add	r4, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e742      	b.n	8000472 <__udivmoddi4+0x156>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 fb59 	bl	8000cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f81d 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 f8e5 	bl	80007cc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000602:	f000 f88f 	bl	8000724 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000606:	f000 f8d9 	bl	80007bc <MX_USB_OTG_HS_USB_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t u32Timer = HAL_GetTick();
 800060a:	f000 fbd5 	bl	8000db8 <HAL_GetTick>
 800060e:	6078      	str	r0, [r7, #4]

  while (1)
  {
	 if (HAL_GetTick() - u32Timer >= 500)
 8000610:	f000 fbd2 	bl	8000db8 <HAL_GetTick>
 8000614:	4602      	mov	r2, r0
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800061e:	d3f7      	bcc.n	8000610 <main+0x20>
	 {
		 HAL_GPIO_TogglePin(GPIOB, LD1_Pin|LD3_Pin);
 8000620:	f244 0101 	movw	r1, #16385	; 0x4001
 8000624:	4803      	ldr	r0, [pc, #12]	; (8000634 <main+0x44>)
 8000626:	f000 fe80 	bl	800132a <HAL_GPIO_TogglePin>
		 u32Timer = HAL_GetTick();
 800062a:	f000 fbc5 	bl	8000db8 <HAL_GetTick>
 800062e:	6078      	str	r0, [r7, #4]
	 if (HAL_GetTick() - u32Timer >= 500)
 8000630:	e7ee      	b.n	8000610 <main+0x20>
 8000632:	bf00      	nop
 8000634:	58020400 	.word	0x58020400

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b09c      	sub	sp, #112	; 0x70
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000642:	224c      	movs	r2, #76	; 0x4c
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f004 fe80 	bl	800534c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2220      	movs	r2, #32
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f004 fe7a 	bl	800534c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000658:	4b30      	ldr	r3, [pc, #192]	; (800071c <SystemClock_Config+0xe4>)
 800065a:	f04f 32ff 	mov.w	r2, #4294967295
 800065e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000662:	2004      	movs	r0, #4
 8000664:	f000 fe7c 	bl	8001360 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000668:	2300      	movs	r3, #0
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	4b2c      	ldr	r3, [pc, #176]	; (8000720 <SystemClock_Config+0xe8>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a2b      	ldr	r2, [pc, #172]	; (8000720 <SystemClock_Config+0xe8>)
 8000672:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b29      	ldr	r3, [pc, #164]	; (8000720 <SystemClock_Config+0xe8>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000684:	bf00      	nop
 8000686:	4b26      	ldr	r3, [pc, #152]	; (8000720 <SystemClock_Config+0xe8>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800068e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000692:	d1f8      	bne.n	8000686 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000694:	2321      	movs	r3, #33	; 0x21
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000698:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800069c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800069e:	2301      	movs	r3, #1
 80006a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a6:	2302      	movs	r3, #2
 80006a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006ae:	2318      	movs	r3, #24
 80006b0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b6:	2304      	movs	r3, #4
 80006b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006be:	230c      	movs	r3, #12
 80006c0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006c2:	2300      	movs	r3, #0
 80006c4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 fea0 	bl	8001414 <HAL_RCC_OscConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006da:	f000 f991 	bl	8000a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006de:	233f      	movs	r3, #63	; 0x3f
 80006e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e2:	2303      	movs	r3, #3
 80006e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2102      	movs	r1, #2
 8000702:	4618      	mov	r0, r3
 8000704:	f001 fab8 	bl	8001c78 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xda>
  {
    Error_Handler();
 800070e:	f000 f977 	bl	8000a00 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3770      	adds	r7, #112	; 0x70
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	58024400 	.word	0x58024400
 8000720:	58024800 	.word	0x58024800

08000724 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000728:	4b22      	ldr	r3, [pc, #136]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 800072a:	4a23      	ldr	r2, [pc, #140]	; (80007b8 <MX_USART3_UART_Init+0x94>)
 800072c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800072e:	4b21      	ldr	r3, [pc, #132]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 8000730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000734:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000742:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075a:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000760:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 8000762:	2200      	movs	r2, #0
 8000764:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 8000768:	2200      	movs	r2, #0
 800076a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800076c:	4811      	ldr	r0, [pc, #68]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 800076e:	f003 fbef 	bl	8003f50 <HAL_UART_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000778:	f000 f942 	bl	8000a00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800077c:	2100      	movs	r1, #0
 800077e:	480d      	ldr	r0, [pc, #52]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 8000780:	f004 fcf5 	bl	800516e <HAL_UARTEx_SetTxFifoThreshold>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800078a:	f000 f939 	bl	8000a00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800078e:	2100      	movs	r1, #0
 8000790:	4808      	ldr	r0, [pc, #32]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 8000792:	f004 fd2a 	bl	80051ea <HAL_UARTEx_SetRxFifoThreshold>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800079c:	f000 f930 	bl	8000a00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 80007a2:	f004 fcab 	bl	80050fc <HAL_UARTEx_DisableFifoMode>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80007ac:	f000 f928 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2400002c 	.word	0x2400002c
 80007b8:	40004800 	.word	0x40004800

080007bc <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
	...

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08e      	sub	sp, #56	; 0x38
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	4b80      	ldr	r3, [pc, #512]	; (80009e4 <MX_GPIO_Init+0x218>)
 80007e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007e8:	4a7e      	ldr	r2, [pc, #504]	; (80009e4 <MX_GPIO_Init+0x218>)
 80007ea:	f043 0304 	orr.w	r3, r3, #4
 80007ee:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007f2:	4b7c      	ldr	r3, [pc, #496]	; (80009e4 <MX_GPIO_Init+0x218>)
 80007f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007f8:	f003 0304 	and.w	r3, r3, #4
 80007fc:	623b      	str	r3, [r7, #32]
 80007fe:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000800:	4b78      	ldr	r3, [pc, #480]	; (80009e4 <MX_GPIO_Init+0x218>)
 8000802:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000806:	4a77      	ldr	r2, [pc, #476]	; (80009e4 <MX_GPIO_Init+0x218>)
 8000808:	f043 0320 	orr.w	r3, r3, #32
 800080c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000810:	4b74      	ldr	r3, [pc, #464]	; (80009e4 <MX_GPIO_Init+0x218>)
 8000812:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000816:	f003 0320 	and.w	r3, r3, #32
 800081a:	61fb      	str	r3, [r7, #28]
 800081c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081e:	4b71      	ldr	r3, [pc, #452]	; (80009e4 <MX_GPIO_Init+0x218>)
 8000820:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000824:	4a6f      	ldr	r2, [pc, #444]	; (80009e4 <MX_GPIO_Init+0x218>)
 8000826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800082a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800082e:	4b6d      	ldr	r3, [pc, #436]	; (80009e4 <MX_GPIO_Init+0x218>)
 8000830:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000838:	61bb      	str	r3, [r7, #24]
 800083a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083c:	4b69      	ldr	r3, [pc, #420]	; (80009e4 <MX_GPIO_Init+0x218>)
 800083e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000842:	4a68      	ldr	r2, [pc, #416]	; (80009e4 <MX_GPIO_Init+0x218>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800084c:	4b65      	ldr	r3, [pc, #404]	; (80009e4 <MX_GPIO_Init+0x218>)
 800084e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085a:	4b62      	ldr	r3, [pc, #392]	; (80009e4 <MX_GPIO_Init+0x218>)
 800085c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000860:	4a60      	ldr	r2, [pc, #384]	; (80009e4 <MX_GPIO_Init+0x218>)
 8000862:	f043 0308 	orr.w	r3, r3, #8
 8000866:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800086a:	4b5e      	ldr	r3, [pc, #376]	; (80009e4 <MX_GPIO_Init+0x218>)
 800086c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000870:	f003 0308 	and.w	r3, r3, #8
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000878:	4b5a      	ldr	r3, [pc, #360]	; (80009e4 <MX_GPIO_Init+0x218>)
 800087a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800087e:	4a59      	ldr	r2, [pc, #356]	; (80009e4 <MX_GPIO_Init+0x218>)
 8000880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000884:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000888:	4b56      	ldr	r3, [pc, #344]	; (80009e4 <MX_GPIO_Init+0x218>)
 800088a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800088e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	4b53      	ldr	r3, [pc, #332]	; (80009e4 <MX_GPIO_Init+0x218>)
 8000898:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800089c:	4a51      	ldr	r2, [pc, #324]	; (80009e4 <MX_GPIO_Init+0x218>)
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008a6:	4b4f      	ldr	r3, [pc, #316]	; (80009e4 <MX_GPIO_Init+0x218>)
 80008a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008b4:	4b4b      	ldr	r3, [pc, #300]	; (80009e4 <MX_GPIO_Init+0x218>)
 80008b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ba:	4a4a      	ldr	r2, [pc, #296]	; (80009e4 <MX_GPIO_Init+0x218>)
 80008bc:	f043 0310 	orr.w	r3, r3, #16
 80008c0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008c4:	4b47      	ldr	r3, [pc, #284]	; (80009e4 <MX_GPIO_Init+0x218>)
 80008c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ca:	f003 0310 	and.w	r3, r3, #16
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008d8:	4843      	ldr	r0, [pc, #268]	; (80009e8 <MX_GPIO_Init+0x21c>)
 80008da:	f000 fd0d 	bl	80012f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f244 0101 	movw	r1, #16385	; 0x4001
 80008e4:	4841      	ldr	r0, [pc, #260]	; (80009ec <MX_GPIO_Init+0x220>)
 80008e6:	f000 fd07 	bl	80012f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2102      	movs	r1, #2
 80008ee:	4840      	ldr	r0, [pc, #256]	; (80009f0 <MX_GPIO_Init+0x224>)
 80008f0:	f000 fd02 	bl	80012f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000906:	4619      	mov	r1, r3
 8000908:	483a      	ldr	r0, [pc, #232]	; (80009f4 <MX_GPIO_Init+0x228>)
 800090a:	f000 fb45 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800090e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000924:	4619      	mov	r1, r3
 8000926:	4830      	ldr	r0, [pc, #192]	; (80009e8 <MX_GPIO_Init+0x21c>)
 8000928:	f000 fb36 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800092c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000942:	4619      	mov	r1, r3
 8000944:	4829      	ldr	r0, [pc, #164]	; (80009ec <MX_GPIO_Init+0x220>)
 8000946:	f000 fb27 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800094a:	2380      	movs	r3, #128	; 0x80
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800094e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095c:	4619      	mov	r1, r3
 800095e:	4826      	ldr	r0, [pc, #152]	; (80009f8 <MX_GPIO_Init+0x22c>)
 8000960:	f000 fb1a 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000964:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000976:	4619      	mov	r1, r3
 8000978:	4820      	ldr	r0, [pc, #128]	; (80009fc <MX_GPIO_Init+0x230>)
 800097a:	f000 fb0d 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800097e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000984:	2302      	movs	r3, #2
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000990:	230a      	movs	r3, #10
 8000992:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000998:	4619      	mov	r1, r3
 800099a:	4818      	ldr	r0, [pc, #96]	; (80009fc <MX_GPIO_Init+0x230>)
 800099c:	f000 fafc 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80009a0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	2302      	movs	r3, #2
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b6:	4619      	mov	r1, r3
 80009b8:	4810      	ldr	r0, [pc, #64]	; (80009fc <MX_GPIO_Init+0x230>)
 80009ba:	f000 faed 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009be:	2302      	movs	r3, #2
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	4619      	mov	r1, r3
 80009d4:	4806      	ldr	r0, [pc, #24]	; (80009f0 <MX_GPIO_Init+0x224>)
 80009d6:	f000 fadf 	bl	8000f98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009da:	bf00      	nop
 80009dc:	3738      	adds	r7, #56	; 0x38
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	58024400 	.word	0x58024400
 80009e8:	58021400 	.word	0x58021400
 80009ec:	58020400 	.word	0x58020400
 80009f0:	58021000 	.word	0x58021000
 80009f4:	58020800 	.word	0x58020800
 80009f8:	58021800 	.word	0x58021800
 80009fc:	58020000 	.word	0x58020000

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <Error_Handler+0x8>
	...

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <HAL_MspInit+0x30>)
 8000a14:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000a18:	4a08      	ldr	r2, [pc, #32]	; (8000a3c <HAL_MspInit+0x30>)
 8000a1a:	f043 0302 	orr.w	r3, r3, #2
 8000a1e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <HAL_MspInit+0x30>)
 8000a24:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000a28:	f003 0302 	and.w	r3, r3, #2
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	58024400 	.word	0x58024400

08000a40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b0ba      	sub	sp, #232	; 0xe8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a58:	f107 0310 	add.w	r3, r7, #16
 8000a5c:	22c0      	movs	r2, #192	; 0xc0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4618      	mov	r0, r3
 8000a62:	f004 fc73 	bl	800534c <memset>
  if(huart->Instance==USART3)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a27      	ldr	r2, [pc, #156]	; (8000b08 <HAL_UART_MspInit+0xc8>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d146      	bne.n	8000afe <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a70:	f04f 0202 	mov.w	r2, #2
 8000a74:	f04f 0300 	mov.w	r3, #0
 8000a78:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a82:	f107 0310 	add.w	r3, r7, #16
 8000a86:	4618      	mov	r0, r3
 8000a88:	f001 fc82 	bl	8002390 <HAL_RCCEx_PeriphCLKConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000a92:	f7ff ffb5 	bl	8000a00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a96:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <HAL_UART_MspInit+0xcc>)
 8000a98:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000a9c:	4a1b      	ldr	r2, [pc, #108]	; (8000b0c <HAL_UART_MspInit+0xcc>)
 8000a9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aa2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000aa6:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <HAL_UART_MspInit+0xcc>)
 8000aa8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000aac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab4:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <HAL_UART_MspInit+0xcc>)
 8000ab6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aba:	4a14      	ldr	r2, [pc, #80]	; (8000b0c <HAL_UART_MspInit+0xcc>)
 8000abc:	f043 0308 	orr.w	r3, r3, #8
 8000ac0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <HAL_UART_MspInit+0xcc>)
 8000ac6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aca:	f003 0308 	and.w	r3, r3, #8
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000ad2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ad6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000aec:	2307      	movs	r3, #7
 8000aee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000af2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000af6:	4619      	mov	r1, r3
 8000af8:	4805      	ldr	r0, [pc, #20]	; (8000b10 <HAL_UART_MspInit+0xd0>)
 8000afa:	f000 fa4d 	bl	8000f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000afe:	bf00      	nop
 8000b00:	37e8      	adds	r7, #232	; 0xe8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40004800 	.word	0x40004800
 8000b0c:	58024400 	.word	0x58024400
 8000b10:	58020c00 	.word	0x58020c00

08000b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <NMI_Handler+0x4>

08000b1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <HardFault_Handler+0x4>

08000b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <MemManage_Handler+0x4>

08000b26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <BusFault_Handler+0x4>

08000b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <UsageFault_Handler+0x4>

08000b32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b60:	f000 f916 	bl	8000d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b6c:	4b32      	ldr	r3, [pc, #200]	; (8000c38 <SystemInit+0xd0>)
 8000b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b72:	4a31      	ldr	r2, [pc, #196]	; (8000c38 <SystemInit+0xd0>)
 8000b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b7c:	4b2f      	ldr	r3, [pc, #188]	; (8000c3c <SystemInit+0xd4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f003 030f 	and.w	r3, r3, #15
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d807      	bhi.n	8000b98 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b88:	4b2c      	ldr	r3, [pc, #176]	; (8000c3c <SystemInit+0xd4>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f023 030f 	bic.w	r3, r3, #15
 8000b90:	4a2a      	ldr	r2, [pc, #168]	; (8000c3c <SystemInit+0xd4>)
 8000b92:	f043 0303 	orr.w	r3, r3, #3
 8000b96:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b98:	4b29      	ldr	r3, [pc, #164]	; (8000c40 <SystemInit+0xd8>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a28      	ldr	r2, [pc, #160]	; (8000c40 <SystemInit+0xd8>)
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ba4:	4b26      	ldr	r3, [pc, #152]	; (8000c40 <SystemInit+0xd8>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000baa:	4b25      	ldr	r3, [pc, #148]	; (8000c40 <SystemInit+0xd8>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	4924      	ldr	r1, [pc, #144]	; (8000c40 <SystemInit+0xd8>)
 8000bb0:	4b24      	ldr	r3, [pc, #144]	; (8000c44 <SystemInit+0xdc>)
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bb6:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <SystemInit+0xd4>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f003 030c 	and.w	r3, r3, #12
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d007      	beq.n	8000bd2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bc2:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <SystemInit+0xd4>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f023 030f 	bic.w	r3, r3, #15
 8000bca:	4a1c      	ldr	r2, [pc, #112]	; (8000c3c <SystemInit+0xd4>)
 8000bcc:	f043 0303 	orr.w	r3, r3, #3
 8000bd0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000bd2:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <SystemInit+0xd8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000bd8:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <SystemInit+0xd8>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000bde:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <SystemInit+0xd8>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000be4:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <SystemInit+0xd8>)
 8000be6:	4a18      	ldr	r2, [pc, #96]	; (8000c48 <SystemInit+0xe0>)
 8000be8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <SystemInit+0xd8>)
 8000bec:	4a17      	ldr	r2, [pc, #92]	; (8000c4c <SystemInit+0xe4>)
 8000bee:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000bf0:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <SystemInit+0xd8>)
 8000bf2:	4a17      	ldr	r2, [pc, #92]	; (8000c50 <SystemInit+0xe8>)
 8000bf4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <SystemInit+0xd8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000bfc:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <SystemInit+0xd8>)
 8000bfe:	4a14      	ldr	r2, [pc, #80]	; (8000c50 <SystemInit+0xe8>)
 8000c00:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <SystemInit+0xd8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c08:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <SystemInit+0xd8>)
 8000c0a:	4a11      	ldr	r2, [pc, #68]	; (8000c50 <SystemInit+0xe8>)
 8000c0c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <SystemInit+0xd8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c14:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <SystemInit+0xd8>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a09      	ldr	r2, [pc, #36]	; (8000c40 <SystemInit+0xd8>)
 8000c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c1e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c20:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <SystemInit+0xd8>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <SystemInit+0xec>)
 8000c28:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c2c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000ed00 	.word	0xe000ed00
 8000c3c:	52002000 	.word	0x52002000
 8000c40:	58024400 	.word	0x58024400
 8000c44:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c48:	02020200 	.word	0x02020200
 8000c4c:	01ff0000 	.word	0x01ff0000
 8000c50:	01010280 	.word	0x01010280
 8000c54:	52004000 	.word	0x52004000

08000c58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c5c:	f7ff ff84 	bl	8000b68 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c60:	480c      	ldr	r0, [pc, #48]	; (8000c94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c62:	490d      	ldr	r1, [pc, #52]	; (8000c98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c64:	4a0d      	ldr	r2, [pc, #52]	; (8000c9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c78:	4c0a      	ldr	r4, [pc, #40]	; (8000ca4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c86:	f004 fb3d 	bl	8005304 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c8a:	f7ff fcb1 	bl	80005f0 <main>
  bx  lr
 8000c8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c90:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000c94:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c98:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000c9c:	080053bc 	.word	0x080053bc
  ldr r2, =_sbss
 8000ca0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000ca4:	240000c4 	.word	0x240000c4

08000ca8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC_IRQHandler>
	...

08000cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb2:	2003      	movs	r0, #3
 8000cb4:	f000 f93e 	bl	8000f34 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000cb8:	f001 f994 	bl	8001fe4 <HAL_RCC_GetSysClockFreq>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <HAL_Init+0x68>)
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	0a1b      	lsrs	r3, r3, #8
 8000cc4:	f003 030f 	and.w	r3, r3, #15
 8000cc8:	4913      	ldr	r1, [pc, #76]	; (8000d18 <HAL_Init+0x6c>)
 8000cca:	5ccb      	ldrb	r3, [r1, r3]
 8000ccc:	f003 031f 	and.w	r3, r3, #31
 8000cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8000cd4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <HAL_Init+0x68>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	f003 030f 	and.w	r3, r3, #15
 8000cde:	4a0e      	ldr	r2, [pc, #56]	; (8000d18 <HAL_Init+0x6c>)
 8000ce0:	5cd3      	ldrb	r3, [r2, r3]
 8000ce2:	f003 031f 	and.w	r3, r3, #31
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8000cec:	4a0b      	ldr	r2, [pc, #44]	; (8000d1c <HAL_Init+0x70>)
 8000cee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000cf0:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <HAL_Init+0x74>)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f000 f814 	bl	8000d24 <HAL_InitTick>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e002      	b.n	8000d0c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d06:	f7ff fe81 	bl	8000a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d0a:	2300      	movs	r3, #0
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	58024400 	.word	0x58024400
 8000d18:	08005374 	.word	0x08005374
 8000d1c:	24000004 	.word	0x24000004
 8000d20:	24000000 	.word	0x24000000

08000d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d2c:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <HAL_InitTick+0x60>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d101      	bne.n	8000d38 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	e021      	b.n	8000d7c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <HAL_InitTick+0x64>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <HAL_InitTick+0x60>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	4619      	mov	r1, r3
 8000d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 f915 	bl	8000f7e <HAL_SYSTICK_Config>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e00e      	b.n	8000d7c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2b0f      	cmp	r3, #15
 8000d62:	d80a      	bhi.n	8000d7a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d64:	2200      	movs	r2, #0
 8000d66:	6879      	ldr	r1, [r7, #4]
 8000d68:	f04f 30ff 	mov.w	r0, #4294967295
 8000d6c:	f000 f8ed 	bl	8000f4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d70:	4a06      	ldr	r2, [pc, #24]	; (8000d8c <HAL_InitTick+0x68>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d76:	2300      	movs	r3, #0
 8000d78:	e000      	b.n	8000d7c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	2400000c 	.word	0x2400000c
 8000d88:	24000000 	.word	0x24000000
 8000d8c:	24000008 	.word	0x24000008

08000d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_IncTick+0x20>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_IncTick+0x24>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4413      	add	r3, r2
 8000da0:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <HAL_IncTick+0x24>)
 8000da2:	6013      	str	r3, [r2, #0]
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	2400000c 	.word	0x2400000c
 8000db4:	240000c0 	.word	0x240000c0

08000db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return uwTick;
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <HAL_GetTick+0x14>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	240000c0 	.word	0x240000c0

08000dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <__NVIC_SetPriorityGrouping+0x40>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de6:	68ba      	ldr	r2, [r7, #8]
 8000de8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dec:	4013      	ands	r3, r2
 8000dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <__NVIC_SetPriorityGrouping+0x44>)
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfe:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <__NVIC_SetPriorityGrouping+0x40>)
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	60d3      	str	r3, [r2, #12]
}
 8000e04:	bf00      	nop
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000ed00 	.word	0xe000ed00
 8000e14:	05fa0000 	.word	0x05fa0000

08000e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e1c:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <__NVIC_GetPriorityGrouping+0x18>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	0a1b      	lsrs	r3, r3, #8
 8000e22:	f003 0307 	and.w	r3, r3, #7
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	6039      	str	r1, [r7, #0]
 8000e3e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	db0a      	blt.n	8000e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	490c      	ldr	r1, [pc, #48]	; (8000e80 <__NVIC_SetPriority+0x4c>)
 8000e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e52:	0112      	lsls	r2, r2, #4
 8000e54:	b2d2      	uxtb	r2, r2
 8000e56:	440b      	add	r3, r1
 8000e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e5c:	e00a      	b.n	8000e74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4908      	ldr	r1, [pc, #32]	; (8000e84 <__NVIC_SetPriority+0x50>)
 8000e64:	88fb      	ldrh	r3, [r7, #6]
 8000e66:	f003 030f 	and.w	r3, r3, #15
 8000e6a:	3b04      	subs	r3, #4
 8000e6c:	0112      	lsls	r2, r2, #4
 8000e6e:	b2d2      	uxtb	r2, r2
 8000e70:	440b      	add	r3, r1
 8000e72:	761a      	strb	r2, [r3, #24]
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000e100 	.word	0xe000e100
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b089      	sub	sp, #36	; 0x24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ea2:	2b04      	cmp	r3, #4
 8000ea4:	bf28      	it	cs
 8000ea6:	2304      	movcs	r3, #4
 8000ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3304      	adds	r3, #4
 8000eae:	2b06      	cmp	r3, #6
 8000eb0:	d902      	bls.n	8000eb8 <NVIC_EncodePriority+0x30>
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3b03      	subs	r3, #3
 8000eb6:	e000      	b.n	8000eba <NVIC_EncodePriority+0x32>
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43da      	mvns	r2, r3
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	401a      	ands	r2, r3
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eda:	43d9      	mvns	r1, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	4313      	orrs	r3, r2
         );
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3724      	adds	r7, #36	; 0x24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f00:	d301      	bcc.n	8000f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f02:	2301      	movs	r3, #1
 8000f04:	e00f      	b.n	8000f26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f06:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <SysTick_Config+0x40>)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f0e:	210f      	movs	r1, #15
 8000f10:	f04f 30ff 	mov.w	r0, #4294967295
 8000f14:	f7ff ff8e 	bl	8000e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <SysTick_Config+0x40>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f1e:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <SysTick_Config+0x40>)
 8000f20:	2207      	movs	r2, #7
 8000f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	e000e010 	.word	0xe000e010

08000f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff ff47 	bl	8000dd0 <__NVIC_SetPriorityGrouping>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b086      	sub	sp, #24
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	4603      	mov	r3, r0
 8000f52:	60b9      	str	r1, [r7, #8]
 8000f54:	607a      	str	r2, [r7, #4]
 8000f56:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f58:	f7ff ff5e 	bl	8000e18 <__NVIC_GetPriorityGrouping>
 8000f5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	68b9      	ldr	r1, [r7, #8]
 8000f62:	6978      	ldr	r0, [r7, #20]
 8000f64:	f7ff ff90 	bl	8000e88 <NVIC_EncodePriority>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f6e:	4611      	mov	r1, r2
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff ff5f 	bl	8000e34 <__NVIC_SetPriority>
}
 8000f76:	bf00      	nop
 8000f78:	3718      	adds	r7, #24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff ffb2 	bl	8000ef0 <SysTick_Config>
 8000f8c:	4603      	mov	r3, r0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b089      	sub	sp, #36	; 0x24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000fa6:	4b89      	ldr	r3, [pc, #548]	; (80011cc <HAL_GPIO_Init+0x234>)
 8000fa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000faa:	e194      	b.n	80012d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f000 8186 	beq.w	80012d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d005      	beq.n	8000fdc <HAL_GPIO_Init+0x44>
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d130      	bne.n	800103e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	68da      	ldr	r2, [r3, #12]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001012:	2201      	movs	r2, #1
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	091b      	lsrs	r3, r3, #4
 8001028:	f003 0201 	and.w	r2, r3, #1
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4313      	orrs	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 0303 	and.w	r3, r3, #3
 8001046:	2b03      	cmp	r3, #3
 8001048:	d017      	beq.n	800107a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	2203      	movs	r2, #3
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d123      	bne.n	80010ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	08da      	lsrs	r2, r3, #3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3208      	adds	r2, #8
 800108e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	220f      	movs	r2, #15
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	691a      	ldr	r2, [r3, #16]
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	f003 0307 	and.w	r3, r3, #7
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	08da      	lsrs	r2, r3, #3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3208      	adds	r2, #8
 80010c8:	69b9      	ldr	r1, [r7, #24]
 80010ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	2203      	movs	r2, #3
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 0203 	and.w	r2, r3, #3
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800110a:	2b00      	cmp	r3, #0
 800110c:	f000 80e0 	beq.w	80012d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001110:	4b2f      	ldr	r3, [pc, #188]	; (80011d0 <HAL_GPIO_Init+0x238>)
 8001112:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001116:	4a2e      	ldr	r2, [pc, #184]	; (80011d0 <HAL_GPIO_Init+0x238>)
 8001118:	f043 0302 	orr.w	r3, r3, #2
 800111c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001120:	4b2b      	ldr	r3, [pc, #172]	; (80011d0 <HAL_GPIO_Init+0x238>)
 8001122:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800112e:	4a29      	ldr	r2, [pc, #164]	; (80011d4 <HAL_GPIO_Init+0x23c>)
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	089b      	lsrs	r3, r3, #2
 8001134:	3302      	adds	r3, #2
 8001136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	f003 0303 	and.w	r3, r3, #3
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	220f      	movs	r2, #15
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a20      	ldr	r2, [pc, #128]	; (80011d8 <HAL_GPIO_Init+0x240>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d052      	beq.n	8001200 <HAL_GPIO_Init+0x268>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a1f      	ldr	r2, [pc, #124]	; (80011dc <HAL_GPIO_Init+0x244>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d031      	beq.n	80011c6 <HAL_GPIO_Init+0x22e>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a1e      	ldr	r2, [pc, #120]	; (80011e0 <HAL_GPIO_Init+0x248>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d02b      	beq.n	80011c2 <HAL_GPIO_Init+0x22a>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a1d      	ldr	r2, [pc, #116]	; (80011e4 <HAL_GPIO_Init+0x24c>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d025      	beq.n	80011be <HAL_GPIO_Init+0x226>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a1c      	ldr	r2, [pc, #112]	; (80011e8 <HAL_GPIO_Init+0x250>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d01f      	beq.n	80011ba <HAL_GPIO_Init+0x222>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a1b      	ldr	r2, [pc, #108]	; (80011ec <HAL_GPIO_Init+0x254>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d019      	beq.n	80011b6 <HAL_GPIO_Init+0x21e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a1a      	ldr	r2, [pc, #104]	; (80011f0 <HAL_GPIO_Init+0x258>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d013      	beq.n	80011b2 <HAL_GPIO_Init+0x21a>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a19      	ldr	r2, [pc, #100]	; (80011f4 <HAL_GPIO_Init+0x25c>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d00d      	beq.n	80011ae <HAL_GPIO_Init+0x216>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a18      	ldr	r2, [pc, #96]	; (80011f8 <HAL_GPIO_Init+0x260>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d007      	beq.n	80011aa <HAL_GPIO_Init+0x212>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a17      	ldr	r2, [pc, #92]	; (80011fc <HAL_GPIO_Init+0x264>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d101      	bne.n	80011a6 <HAL_GPIO_Init+0x20e>
 80011a2:	2309      	movs	r3, #9
 80011a4:	e02d      	b.n	8001202 <HAL_GPIO_Init+0x26a>
 80011a6:	230a      	movs	r3, #10
 80011a8:	e02b      	b.n	8001202 <HAL_GPIO_Init+0x26a>
 80011aa:	2308      	movs	r3, #8
 80011ac:	e029      	b.n	8001202 <HAL_GPIO_Init+0x26a>
 80011ae:	2307      	movs	r3, #7
 80011b0:	e027      	b.n	8001202 <HAL_GPIO_Init+0x26a>
 80011b2:	2306      	movs	r3, #6
 80011b4:	e025      	b.n	8001202 <HAL_GPIO_Init+0x26a>
 80011b6:	2305      	movs	r3, #5
 80011b8:	e023      	b.n	8001202 <HAL_GPIO_Init+0x26a>
 80011ba:	2304      	movs	r3, #4
 80011bc:	e021      	b.n	8001202 <HAL_GPIO_Init+0x26a>
 80011be:	2303      	movs	r3, #3
 80011c0:	e01f      	b.n	8001202 <HAL_GPIO_Init+0x26a>
 80011c2:	2302      	movs	r3, #2
 80011c4:	e01d      	b.n	8001202 <HAL_GPIO_Init+0x26a>
 80011c6:	2301      	movs	r3, #1
 80011c8:	e01b      	b.n	8001202 <HAL_GPIO_Init+0x26a>
 80011ca:	bf00      	nop
 80011cc:	58000080 	.word	0x58000080
 80011d0:	58024400 	.word	0x58024400
 80011d4:	58000400 	.word	0x58000400
 80011d8:	58020000 	.word	0x58020000
 80011dc:	58020400 	.word	0x58020400
 80011e0:	58020800 	.word	0x58020800
 80011e4:	58020c00 	.word	0x58020c00
 80011e8:	58021000 	.word	0x58021000
 80011ec:	58021400 	.word	0x58021400
 80011f0:	58021800 	.word	0x58021800
 80011f4:	58021c00 	.word	0x58021c00
 80011f8:	58022000 	.word	0x58022000
 80011fc:	58022400 	.word	0x58022400
 8001200:	2300      	movs	r3, #0
 8001202:	69fa      	ldr	r2, [r7, #28]
 8001204:	f002 0203 	and.w	r2, r2, #3
 8001208:	0092      	lsls	r2, r2, #2
 800120a:	4093      	lsls	r3, r2
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001212:	4938      	ldr	r1, [pc, #224]	; (80012f4 <HAL_GPIO_Init+0x35c>)
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	089b      	lsrs	r3, r3, #2
 8001218:	3302      	adds	r3, #2
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	43db      	mvns	r3, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4013      	ands	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001246:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800124e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001274:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	3301      	adds	r3, #1
 80012d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	fa22 f303 	lsr.w	r3, r2, r3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f47f ae63 	bne.w	8000fac <HAL_GPIO_Init+0x14>
  }
}
 80012e6:	bf00      	nop
 80012e8:	bf00      	nop
 80012ea:	3724      	adds	r7, #36	; 0x24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	58000400 	.word	0x58000400

080012f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	807b      	strh	r3, [r7, #2]
 8001304:	4613      	mov	r3, r2
 8001306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001308:	787b      	ldrb	r3, [r7, #1]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800130e:	887a      	ldrh	r2, [r7, #2]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001314:	e003      	b.n	800131e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001316:	887b      	ldrh	r3, [r7, #2]
 8001318:	041a      	lsls	r2, r3, #16
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	619a      	str	r2, [r3, #24]
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800132a:	b480      	push	{r7}
 800132c:	b085      	sub	sp, #20
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	460b      	mov	r3, r1
 8001334:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800133c:	887a      	ldrh	r2, [r7, #2]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	4013      	ands	r3, r2
 8001342:	041a      	lsls	r2, r3, #16
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	43d9      	mvns	r1, r3
 8001348:	887b      	ldrh	r3, [r7, #2]
 800134a:	400b      	ands	r3, r1
 800134c:	431a      	orrs	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	619a      	str	r2, [r3, #24]
}
 8001352:	bf00      	nop
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001368:	4b29      	ldr	r3, [pc, #164]	; (8001410 <HAL_PWREx_ConfigSupply+0xb0>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	f003 0307 	and.w	r3, r3, #7
 8001370:	2b06      	cmp	r3, #6
 8001372:	d00a      	beq.n	800138a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001374:	4b26      	ldr	r3, [pc, #152]	; (8001410 <HAL_PWREx_ConfigSupply+0xb0>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	429a      	cmp	r2, r3
 8001380:	d001      	beq.n	8001386 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e040      	b.n	8001408 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001386:	2300      	movs	r3, #0
 8001388:	e03e      	b.n	8001408 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800138a:	4b21      	ldr	r3, [pc, #132]	; (8001410 <HAL_PWREx_ConfigSupply+0xb0>)
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001392:	491f      	ldr	r1, [pc, #124]	; (8001410 <HAL_PWREx_ConfigSupply+0xb0>)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4313      	orrs	r3, r2
 8001398:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800139a:	f7ff fd0d 	bl	8000db8 <HAL_GetTick>
 800139e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80013a0:	e009      	b.n	80013b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80013a2:	f7ff fd09 	bl	8000db8 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013b0:	d901      	bls.n	80013b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e028      	b.n	8001408 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80013b6:	4b16      	ldr	r3, [pc, #88]	; (8001410 <HAL_PWREx_ConfigSupply+0xb0>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013c2:	d1ee      	bne.n	80013a2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b1e      	cmp	r3, #30
 80013c8:	d008      	beq.n	80013dc <HAL_PWREx_ConfigSupply+0x7c>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b2e      	cmp	r3, #46	; 0x2e
 80013ce:	d005      	beq.n	80013dc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b1d      	cmp	r3, #29
 80013d4:	d002      	beq.n	80013dc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b2d      	cmp	r3, #45	; 0x2d
 80013da:	d114      	bne.n	8001406 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80013dc:	f7ff fcec 	bl	8000db8 <HAL_GetTick>
 80013e0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80013e2:	e009      	b.n	80013f8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80013e4:	f7ff fce8 	bl	8000db8 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013f2:	d901      	bls.n	80013f8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e007      	b.n	8001408 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <HAL_PWREx_ConfigSupply+0xb0>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001404:	d1ee      	bne.n	80013e4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	58024800 	.word	0x58024800

08001414 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08c      	sub	sp, #48	; 0x30
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d102      	bne.n	8001428 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	f000 bc1f 	b.w	8001c66 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 80b3 	beq.w	800159c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001436:	4b95      	ldr	r3, [pc, #596]	; (800168c <HAL_RCC_OscConfig+0x278>)
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800143e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001440:	4b92      	ldr	r3, [pc, #584]	; (800168c <HAL_RCC_OscConfig+0x278>)
 8001442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001444:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001448:	2b10      	cmp	r3, #16
 800144a:	d007      	beq.n	800145c <HAL_RCC_OscConfig+0x48>
 800144c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800144e:	2b18      	cmp	r3, #24
 8001450:	d112      	bne.n	8001478 <HAL_RCC_OscConfig+0x64>
 8001452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001454:	f003 0303 	and.w	r3, r3, #3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d10d      	bne.n	8001478 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800145c:	4b8b      	ldr	r3, [pc, #556]	; (800168c <HAL_RCC_OscConfig+0x278>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 8098 	beq.w	800159a <HAL_RCC_OscConfig+0x186>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	f040 8093 	bne.w	800159a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e3f6      	b.n	8001c66 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001480:	d106      	bne.n	8001490 <HAL_RCC_OscConfig+0x7c>
 8001482:	4b82      	ldr	r3, [pc, #520]	; (800168c <HAL_RCC_OscConfig+0x278>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a81      	ldr	r2, [pc, #516]	; (800168c <HAL_RCC_OscConfig+0x278>)
 8001488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e058      	b.n	8001542 <HAL_RCC_OscConfig+0x12e>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d112      	bne.n	80014be <HAL_RCC_OscConfig+0xaa>
 8001498:	4b7c      	ldr	r3, [pc, #496]	; (800168c <HAL_RCC_OscConfig+0x278>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a7b      	ldr	r2, [pc, #492]	; (800168c <HAL_RCC_OscConfig+0x278>)
 800149e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014a2:	6013      	str	r3, [r2, #0]
 80014a4:	4b79      	ldr	r3, [pc, #484]	; (800168c <HAL_RCC_OscConfig+0x278>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a78      	ldr	r2, [pc, #480]	; (800168c <HAL_RCC_OscConfig+0x278>)
 80014aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	4b76      	ldr	r3, [pc, #472]	; (800168c <HAL_RCC_OscConfig+0x278>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a75      	ldr	r2, [pc, #468]	; (800168c <HAL_RCC_OscConfig+0x278>)
 80014b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	e041      	b.n	8001542 <HAL_RCC_OscConfig+0x12e>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014c6:	d112      	bne.n	80014ee <HAL_RCC_OscConfig+0xda>
 80014c8:	4b70      	ldr	r3, [pc, #448]	; (800168c <HAL_RCC_OscConfig+0x278>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a6f      	ldr	r2, [pc, #444]	; (800168c <HAL_RCC_OscConfig+0x278>)
 80014ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	4b6d      	ldr	r3, [pc, #436]	; (800168c <HAL_RCC_OscConfig+0x278>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a6c      	ldr	r2, [pc, #432]	; (800168c <HAL_RCC_OscConfig+0x278>)
 80014da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	4b6a      	ldr	r3, [pc, #424]	; (800168c <HAL_RCC_OscConfig+0x278>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a69      	ldr	r2, [pc, #420]	; (800168c <HAL_RCC_OscConfig+0x278>)
 80014e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	e029      	b.n	8001542 <HAL_RCC_OscConfig+0x12e>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80014f6:	d112      	bne.n	800151e <HAL_RCC_OscConfig+0x10a>
 80014f8:	4b64      	ldr	r3, [pc, #400]	; (800168c <HAL_RCC_OscConfig+0x278>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a63      	ldr	r2, [pc, #396]	; (800168c <HAL_RCC_OscConfig+0x278>)
 80014fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	4b61      	ldr	r3, [pc, #388]	; (800168c <HAL_RCC_OscConfig+0x278>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a60      	ldr	r2, [pc, #384]	; (800168c <HAL_RCC_OscConfig+0x278>)
 800150a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	4b5e      	ldr	r3, [pc, #376]	; (800168c <HAL_RCC_OscConfig+0x278>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a5d      	ldr	r2, [pc, #372]	; (800168c <HAL_RCC_OscConfig+0x278>)
 8001516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	e011      	b.n	8001542 <HAL_RCC_OscConfig+0x12e>
 800151e:	4b5b      	ldr	r3, [pc, #364]	; (800168c <HAL_RCC_OscConfig+0x278>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a5a      	ldr	r2, [pc, #360]	; (800168c <HAL_RCC_OscConfig+0x278>)
 8001524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	4b58      	ldr	r3, [pc, #352]	; (800168c <HAL_RCC_OscConfig+0x278>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a57      	ldr	r2, [pc, #348]	; (800168c <HAL_RCC_OscConfig+0x278>)
 8001530:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	4b55      	ldr	r3, [pc, #340]	; (800168c <HAL_RCC_OscConfig+0x278>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a54      	ldr	r2, [pc, #336]	; (800168c <HAL_RCC_OscConfig+0x278>)
 800153c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001540:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d013      	beq.n	8001572 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154a:	f7ff fc35 	bl	8000db8 <HAL_GetTick>
 800154e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001552:	f7ff fc31 	bl	8000db8 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b64      	cmp	r3, #100	; 0x64
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e380      	b.n	8001c66 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001564:	4b49      	ldr	r3, [pc, #292]	; (800168c <HAL_RCC_OscConfig+0x278>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0f0      	beq.n	8001552 <HAL_RCC_OscConfig+0x13e>
 8001570:	e014      	b.n	800159c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001572:	f7ff fc21 	bl	8000db8 <HAL_GetTick>
 8001576:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800157a:	f7ff fc1d 	bl	8000db8 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b64      	cmp	r3, #100	; 0x64
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e36c      	b.n	8001c66 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800158c:	4b3f      	ldr	r3, [pc, #252]	; (800168c <HAL_RCC_OscConfig+0x278>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1f0      	bne.n	800157a <HAL_RCC_OscConfig+0x166>
 8001598:	e000      	b.n	800159c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f000 808c 	beq.w	80016c2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015aa:	4b38      	ldr	r3, [pc, #224]	; (800168c <HAL_RCC_OscConfig+0x278>)
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015b2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015b4:	4b35      	ldr	r3, [pc, #212]	; (800168c <HAL_RCC_OscConfig+0x278>)
 80015b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80015ba:	6a3b      	ldr	r3, [r7, #32]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d007      	beq.n	80015d0 <HAL_RCC_OscConfig+0x1bc>
 80015c0:	6a3b      	ldr	r3, [r7, #32]
 80015c2:	2b18      	cmp	r3, #24
 80015c4:	d137      	bne.n	8001636 <HAL_RCC_OscConfig+0x222>
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d132      	bne.n	8001636 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015d0:	4b2e      	ldr	r3, [pc, #184]	; (800168c <HAL_RCC_OscConfig+0x278>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d005      	beq.n	80015e8 <HAL_RCC_OscConfig+0x1d4>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d101      	bne.n	80015e8 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e33e      	b.n	8001c66 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80015e8:	4b28      	ldr	r3, [pc, #160]	; (800168c <HAL_RCC_OscConfig+0x278>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f023 0219 	bic.w	r2, r3, #25
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	4925      	ldr	r1, [pc, #148]	; (800168c <HAL_RCC_OscConfig+0x278>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fa:	f7ff fbdd 	bl	8000db8 <HAL_GetTick>
 80015fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001602:	f7ff fbd9 	bl	8000db8 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e328      	b.n	8001c66 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001614:	4b1d      	ldr	r3, [pc, #116]	; (800168c <HAL_RCC_OscConfig+0x278>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0f0      	beq.n	8001602 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001620:	4b1a      	ldr	r3, [pc, #104]	; (800168c <HAL_RCC_OscConfig+0x278>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	061b      	lsls	r3, r3, #24
 800162e:	4917      	ldr	r1, [pc, #92]	; (800168c <HAL_RCC_OscConfig+0x278>)
 8001630:	4313      	orrs	r3, r2
 8001632:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001634:	e045      	b.n	80016c2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d028      	beq.n	8001690 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800163e:	4b13      	ldr	r3, [pc, #76]	; (800168c <HAL_RCC_OscConfig+0x278>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f023 0219 	bic.w	r2, r3, #25
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	4910      	ldr	r1, [pc, #64]	; (800168c <HAL_RCC_OscConfig+0x278>)
 800164c:	4313      	orrs	r3, r2
 800164e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001650:	f7ff fbb2 	bl	8000db8 <HAL_GetTick>
 8001654:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001658:	f7ff fbae 	bl	8000db8 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e2fd      	b.n	8001c66 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800166a:	4b08      	ldr	r3, [pc, #32]	; (800168c <HAL_RCC_OscConfig+0x278>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0304 	and.w	r3, r3, #4
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0f0      	beq.n	8001658 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001676:	4b05      	ldr	r3, [pc, #20]	; (800168c <HAL_RCC_OscConfig+0x278>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	061b      	lsls	r3, r3, #24
 8001684:	4901      	ldr	r1, [pc, #4]	; (800168c <HAL_RCC_OscConfig+0x278>)
 8001686:	4313      	orrs	r3, r2
 8001688:	604b      	str	r3, [r1, #4]
 800168a:	e01a      	b.n	80016c2 <HAL_RCC_OscConfig+0x2ae>
 800168c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001690:	4b97      	ldr	r3, [pc, #604]	; (80018f0 <HAL_RCC_OscConfig+0x4dc>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a96      	ldr	r2, [pc, #600]	; (80018f0 <HAL_RCC_OscConfig+0x4dc>)
 8001696:	f023 0301 	bic.w	r3, r3, #1
 800169a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169c:	f7ff fb8c 	bl	8000db8 <HAL_GetTick>
 80016a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a4:	f7ff fb88 	bl	8000db8 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e2d7      	b.n	8001c66 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016b6:	4b8e      	ldr	r3, [pc, #568]	; (80018f0 <HAL_RCC_OscConfig+0x4dc>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1f0      	bne.n	80016a4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0310 	and.w	r3, r3, #16
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d06a      	beq.n	80017a4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016ce:	4b88      	ldr	r3, [pc, #544]	; (80018f0 <HAL_RCC_OscConfig+0x4dc>)
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016d8:	4b85      	ldr	r3, [pc, #532]	; (80018f0 <HAL_RCC_OscConfig+0x4dc>)
 80016da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016dc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	2b08      	cmp	r3, #8
 80016e2:	d007      	beq.n	80016f4 <HAL_RCC_OscConfig+0x2e0>
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	2b18      	cmp	r3, #24
 80016e8:	d11b      	bne.n	8001722 <HAL_RCC_OscConfig+0x30e>
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d116      	bne.n	8001722 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016f4:	4b7e      	ldr	r3, [pc, #504]	; (80018f0 <HAL_RCC_OscConfig+0x4dc>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d005      	beq.n	800170c <HAL_RCC_OscConfig+0x2f8>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	69db      	ldr	r3, [r3, #28]
 8001704:	2b80      	cmp	r3, #128	; 0x80
 8001706:	d001      	beq.n	800170c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e2ac      	b.n	8001c66 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800170c:	4b78      	ldr	r3, [pc, #480]	; (80018f0 <HAL_RCC_OscConfig+0x4dc>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	061b      	lsls	r3, r3, #24
 800171a:	4975      	ldr	r1, [pc, #468]	; (80018f0 <HAL_RCC_OscConfig+0x4dc>)
 800171c:	4313      	orrs	r3, r2
 800171e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001720:	e040      	b.n	80017a4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d023      	beq.n	8001772 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800172a:	4b71      	ldr	r3, [pc, #452]	; (80018f0 <HAL_RCC_OscConfig+0x4dc>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a70      	ldr	r2, [pc, #448]	; (80018f0 <HAL_RCC_OscConfig+0x4dc>)
 8001730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001734:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001736:	f7ff fb3f 	bl	8000db8 <HAL_GetTick>
 800173a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800173e:	f7ff fb3b 	bl	8000db8 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e28a      	b.n	8001c66 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001750:	4b67      	ldr	r3, [pc, #412]	; (80018f0 <HAL_RCC_OscConfig+0x4dc>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0f0      	beq.n	800173e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800175c:	4b64      	ldr	r3, [pc, #400]	; (80018f0 <HAL_RCC_OscConfig+0x4dc>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	061b      	lsls	r3, r3, #24
 800176a:	4961      	ldr	r1, [pc, #388]	; (80018f0 <HAL_RCC_OscConfig+0x4dc>)
 800176c:	4313      	orrs	r3, r2
 800176e:	60cb      	str	r3, [r1, #12]
 8001770:	e018      	b.n	80017a4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001772:	4b5f      	ldr	r3, [pc, #380]	; (80018f0 <HAL_RCC_OscConfig+0x4dc>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a5e      	ldr	r2, [pc, #376]	; (80018f0 <HAL_RCC_OscConfig+0x4dc>)
 8001778:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800177c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177e:	f7ff fb1b 	bl	8000db8 <HAL_GetTick>
 8001782:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001786:	f7ff fb17 	bl	8000db8 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e266      	b.n	8001c66 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001798:	4b55      	ldr	r3, [pc, #340]	; (80018f0 <HAL_RCC_OscConfig+0x4dc>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1f0      	bne.n	8001786 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d036      	beq.n	800181e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d019      	beq.n	80017ec <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017b8:	4b4d      	ldr	r3, [pc, #308]	; (80018f0 <HAL_RCC_OscConfig+0x4dc>)
 80017ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017bc:	4a4c      	ldr	r2, [pc, #304]	; (80018f0 <HAL_RCC_OscConfig+0x4dc>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c4:	f7ff faf8 	bl	8000db8 <HAL_GetTick>
 80017c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017cc:	f7ff faf4 	bl	8000db8 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e243      	b.n	8001c66 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017de:	4b44      	ldr	r3, [pc, #272]	; (80018f0 <HAL_RCC_OscConfig+0x4dc>)
 80017e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0x3b8>
 80017ea:	e018      	b.n	800181e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ec:	4b40      	ldr	r3, [pc, #256]	; (80018f0 <HAL_RCC_OscConfig+0x4dc>)
 80017ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017f0:	4a3f      	ldr	r2, [pc, #252]	; (80018f0 <HAL_RCC_OscConfig+0x4dc>)
 80017f2:	f023 0301 	bic.w	r3, r3, #1
 80017f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f8:	f7ff fade 	bl	8000db8 <HAL_GetTick>
 80017fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001800:	f7ff fada 	bl	8000db8 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e229      	b.n	8001c66 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001812:	4b37      	ldr	r3, [pc, #220]	; (80018f0 <HAL_RCC_OscConfig+0x4dc>)
 8001814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0320 	and.w	r3, r3, #32
 8001826:	2b00      	cmp	r3, #0
 8001828:	d036      	beq.n	8001898 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d019      	beq.n	8001866 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001832:	4b2f      	ldr	r3, [pc, #188]	; (80018f0 <HAL_RCC_OscConfig+0x4dc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a2e      	ldr	r2, [pc, #184]	; (80018f0 <HAL_RCC_OscConfig+0x4dc>)
 8001838:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800183c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800183e:	f7ff fabb 	bl	8000db8 <HAL_GetTick>
 8001842:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001846:	f7ff fab7 	bl	8000db8 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e206      	b.n	8001c66 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001858:	4b25      	ldr	r3, [pc, #148]	; (80018f0 <HAL_RCC_OscConfig+0x4dc>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0f0      	beq.n	8001846 <HAL_RCC_OscConfig+0x432>
 8001864:	e018      	b.n	8001898 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001866:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <HAL_RCC_OscConfig+0x4dc>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a21      	ldr	r2, [pc, #132]	; (80018f0 <HAL_RCC_OscConfig+0x4dc>)
 800186c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001870:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001872:	f7ff faa1 	bl	8000db8 <HAL_GetTick>
 8001876:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800187a:	f7ff fa9d 	bl	8000db8 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e1ec      	b.n	8001c66 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800188c:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <HAL_RCC_OscConfig+0x4dc>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1f0      	bne.n	800187a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 80af 	beq.w	8001a04 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80018a6:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <HAL_RCC_OscConfig+0x4e0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a12      	ldr	r2, [pc, #72]	; (80018f4 <HAL_RCC_OscConfig+0x4e0>)
 80018ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80018b2:	f7ff fa81 	bl	8000db8 <HAL_GetTick>
 80018b6:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ba:	f7ff fa7d 	bl	8000db8 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b64      	cmp	r3, #100	; 0x64
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e1cc      	b.n	8001c66 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018cc:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_RCC_OscConfig+0x4e0>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0f0      	beq.n	80018ba <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d10b      	bne.n	80018f8 <HAL_RCC_OscConfig+0x4e4>
 80018e0:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <HAL_RCC_OscConfig+0x4dc>)
 80018e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e4:	4a02      	ldr	r2, [pc, #8]	; (80018f0 <HAL_RCC_OscConfig+0x4dc>)
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	6713      	str	r3, [r2, #112]	; 0x70
 80018ec:	e05b      	b.n	80019a6 <HAL_RCC_OscConfig+0x592>
 80018ee:	bf00      	nop
 80018f0:	58024400 	.word	0x58024400
 80018f4:	58024800 	.word	0x58024800
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d112      	bne.n	8001926 <HAL_RCC_OscConfig+0x512>
 8001900:	4b9d      	ldr	r3, [pc, #628]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001904:	4a9c      	ldr	r2, [pc, #624]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001906:	f023 0301 	bic.w	r3, r3, #1
 800190a:	6713      	str	r3, [r2, #112]	; 0x70
 800190c:	4b9a      	ldr	r3, [pc, #616]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 800190e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001910:	4a99      	ldr	r2, [pc, #612]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001912:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001916:	6713      	str	r3, [r2, #112]	; 0x70
 8001918:	4b97      	ldr	r3, [pc, #604]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 800191a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191c:	4a96      	ldr	r2, [pc, #600]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 800191e:	f023 0304 	bic.w	r3, r3, #4
 8001922:	6713      	str	r3, [r2, #112]	; 0x70
 8001924:	e03f      	b.n	80019a6 <HAL_RCC_OscConfig+0x592>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	2b05      	cmp	r3, #5
 800192c:	d112      	bne.n	8001954 <HAL_RCC_OscConfig+0x540>
 800192e:	4b92      	ldr	r3, [pc, #584]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001932:	4a91      	ldr	r2, [pc, #580]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001934:	f043 0304 	orr.w	r3, r3, #4
 8001938:	6713      	str	r3, [r2, #112]	; 0x70
 800193a:	4b8f      	ldr	r3, [pc, #572]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 800193c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193e:	4a8e      	ldr	r2, [pc, #568]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001940:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001944:	6713      	str	r3, [r2, #112]	; 0x70
 8001946:	4b8c      	ldr	r3, [pc, #560]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800194a:	4a8b      	ldr	r2, [pc, #556]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	6713      	str	r3, [r2, #112]	; 0x70
 8001952:	e028      	b.n	80019a6 <HAL_RCC_OscConfig+0x592>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	2b85      	cmp	r3, #133	; 0x85
 800195a:	d112      	bne.n	8001982 <HAL_RCC_OscConfig+0x56e>
 800195c:	4b86      	ldr	r3, [pc, #536]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 800195e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001960:	4a85      	ldr	r2, [pc, #532]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001962:	f043 0304 	orr.w	r3, r3, #4
 8001966:	6713      	str	r3, [r2, #112]	; 0x70
 8001968:	4b83      	ldr	r3, [pc, #524]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 800196a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196c:	4a82      	ldr	r2, [pc, #520]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 800196e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001972:	6713      	str	r3, [r2, #112]	; 0x70
 8001974:	4b80      	ldr	r3, [pc, #512]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001978:	4a7f      	ldr	r2, [pc, #508]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6713      	str	r3, [r2, #112]	; 0x70
 8001980:	e011      	b.n	80019a6 <HAL_RCC_OscConfig+0x592>
 8001982:	4b7d      	ldr	r3, [pc, #500]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001986:	4a7c      	ldr	r2, [pc, #496]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001988:	f023 0301 	bic.w	r3, r3, #1
 800198c:	6713      	str	r3, [r2, #112]	; 0x70
 800198e:	4b7a      	ldr	r3, [pc, #488]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001992:	4a79      	ldr	r2, [pc, #484]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001994:	f023 0304 	bic.w	r3, r3, #4
 8001998:	6713      	str	r3, [r2, #112]	; 0x70
 800199a:	4b77      	ldr	r3, [pc, #476]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 800199c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199e:	4a76      	ldr	r2, [pc, #472]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 80019a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d015      	beq.n	80019da <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ae:	f7ff fa03 	bl	8000db8 <HAL_GetTick>
 80019b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019b4:	e00a      	b.n	80019cc <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b6:	f7ff f9ff 	bl	8000db8 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e14c      	b.n	8001c66 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019cc:	4b6a      	ldr	r3, [pc, #424]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 80019ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0ee      	beq.n	80019b6 <HAL_RCC_OscConfig+0x5a2>
 80019d8:	e014      	b.n	8001a04 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019da:	f7ff f9ed 	bl	8000db8 <HAL_GetTick>
 80019de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019e0:	e00a      	b.n	80019f8 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019e2:	f7ff f9e9 	bl	8000db8 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e136      	b.n	8001c66 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019f8:	4b5f      	ldr	r3, [pc, #380]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 80019fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1ee      	bne.n	80019e2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f000 812b 	beq.w	8001c64 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001a0e:	4b5a      	ldr	r3, [pc, #360]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a16:	2b18      	cmp	r3, #24
 8001a18:	f000 80bb 	beq.w	8001b92 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	f040 8095 	bne.w	8001b50 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a26:	4b54      	ldr	r3, [pc, #336]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a53      	ldr	r2, [pc, #332]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001a2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a32:	f7ff f9c1 	bl	8000db8 <HAL_GetTick>
 8001a36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a3a:	f7ff f9bd 	bl	8000db8 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e10c      	b.n	8001c66 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a4c:	4b4a      	ldr	r3, [pc, #296]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1f0      	bne.n	8001a3a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a58:	4b47      	ldr	r3, [pc, #284]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001a5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a5c:	4b47      	ldr	r3, [pc, #284]	; (8001b7c <HAL_RCC_OscConfig+0x768>)
 8001a5e:	4013      	ands	r3, r2
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a68:	0112      	lsls	r2, r2, #4
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	4942      	ldr	r1, [pc, #264]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	628b      	str	r3, [r1, #40]	; 0x28
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	3b01      	subs	r3, #1
 8001a78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a80:	3b01      	subs	r3, #1
 8001a82:	025b      	lsls	r3, r3, #9
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	041b      	lsls	r3, r3, #16
 8001a90:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001a94:	431a      	orrs	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	061b      	lsls	r3, r3, #24
 8001a9e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001aa2:	4935      	ldr	r1, [pc, #212]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001aa8:	4b33      	ldr	r3, [pc, #204]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aac:	4a32      	ldr	r2, [pc, #200]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001aae:	f023 0301 	bic.w	r3, r3, #1
 8001ab2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001ab4:	4b30      	ldr	r3, [pc, #192]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001ab6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ab8:	4b31      	ldr	r3, [pc, #196]	; (8001b80 <HAL_RCC_OscConfig+0x76c>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ac0:	00d2      	lsls	r2, r2, #3
 8001ac2:	492d      	ldr	r1, [pc, #180]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001ac8:	4b2b      	ldr	r3, [pc, #172]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001acc:	f023 020c 	bic.w	r2, r3, #12
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	4928      	ldr	r1, [pc, #160]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001ada:	4b27      	ldr	r3, [pc, #156]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ade:	f023 0202 	bic.w	r2, r3, #2
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	4924      	ldr	r1, [pc, #144]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001aec:	4b22      	ldr	r3, [pc, #136]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af0:	4a21      	ldr	r2, [pc, #132]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001af8:	4b1f      	ldr	r3, [pc, #124]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afc:	4a1e      	ldr	r2, [pc, #120]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001b04:	4b1c      	ldr	r3, [pc, #112]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b08:	4a1b      	ldr	r2, [pc, #108]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001b0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001b10:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b14:	4a18      	ldr	r2, [pc, #96]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b1c:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a15      	ldr	r2, [pc, #84]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001b22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b28:	f7ff f946 	bl	8000db8 <HAL_GetTick>
 8001b2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b30:	f7ff f942 	bl	8000db8 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e091      	b.n	8001c66 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b42:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0f0      	beq.n	8001b30 <HAL_RCC_OscConfig+0x71c>
 8001b4e:	e089      	b.n	8001c64 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a08      	ldr	r2, [pc, #32]	; (8001b78 <HAL_RCC_OscConfig+0x764>)
 8001b56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5c:	f7ff f92c 	bl	8000db8 <HAL_GetTick>
 8001b60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b62:	e00f      	b.n	8001b84 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b64:	f7ff f928 	bl	8000db8 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d908      	bls.n	8001b84 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e077      	b.n	8001c66 <HAL_RCC_OscConfig+0x852>
 8001b76:	bf00      	nop
 8001b78:	58024400 	.word	0x58024400
 8001b7c:	fffffc0c 	.word	0xfffffc0c
 8001b80:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b84:	4b3a      	ldr	r3, [pc, #232]	; (8001c70 <HAL_RCC_OscConfig+0x85c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1e9      	bne.n	8001b64 <HAL_RCC_OscConfig+0x750>
 8001b90:	e068      	b.n	8001c64 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001b92:	4b37      	ldr	r3, [pc, #220]	; (8001c70 <HAL_RCC_OscConfig+0x85c>)
 8001b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b96:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001b98:	4b35      	ldr	r3, [pc, #212]	; (8001c70 <HAL_RCC_OscConfig+0x85c>)
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d031      	beq.n	8001c0a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	f003 0203 	and.w	r2, r3, #3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d12a      	bne.n	8001c0a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	091b      	lsrs	r3, r3, #4
 8001bb8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d122      	bne.n	8001c0a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d11a      	bne.n	8001c0a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	0a5b      	lsrs	r3, r3, #9
 8001bd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d111      	bne.n	8001c0a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	0c1b      	lsrs	r3, r3, #16
 8001bea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d108      	bne.n	8001c0a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	0e1b      	lsrs	r3, r3, #24
 8001bfc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c04:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d001      	beq.n	8001c0e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e02b      	b.n	8001c66 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001c0e:	4b18      	ldr	r3, [pc, #96]	; (8001c70 <HAL_RCC_OscConfig+0x85c>)
 8001c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c12:	08db      	lsrs	r3, r3, #3
 8001c14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001c18:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d01f      	beq.n	8001c64 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001c24:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <HAL_RCC_OscConfig+0x85c>)
 8001c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c28:	4a11      	ldr	r2, [pc, #68]	; (8001c70 <HAL_RCC_OscConfig+0x85c>)
 8001c2a:	f023 0301 	bic.w	r3, r3, #1
 8001c2e:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c30:	f7ff f8c2 	bl	8000db8 <HAL_GetTick>
 8001c34:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001c36:	bf00      	nop
 8001c38:	f7ff f8be 	bl	8000db8 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d0f9      	beq.n	8001c38 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c44:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <HAL_RCC_OscConfig+0x85c>)
 8001c46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c48:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <HAL_RCC_OscConfig+0x860>)
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c50:	00d2      	lsls	r2, r2, #3
 8001c52:	4907      	ldr	r1, [pc, #28]	; (8001c70 <HAL_RCC_OscConfig+0x85c>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001c58:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <HAL_RCC_OscConfig+0x85c>)
 8001c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5c:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <HAL_RCC_OscConfig+0x85c>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3730      	adds	r7, #48	; 0x30
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	58024400 	.word	0x58024400
 8001c74:	ffff0007 	.word	0xffff0007

08001c78 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e19c      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c8c:	4b8a      	ldr	r3, [pc, #552]	; (8001eb8 <HAL_RCC_ClockConfig+0x240>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 030f 	and.w	r3, r3, #15
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d910      	bls.n	8001cbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9a:	4b87      	ldr	r3, [pc, #540]	; (8001eb8 <HAL_RCC_ClockConfig+0x240>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f023 020f 	bic.w	r2, r3, #15
 8001ca2:	4985      	ldr	r1, [pc, #532]	; (8001eb8 <HAL_RCC_ClockConfig+0x240>)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001caa:	4b83      	ldr	r3, [pc, #524]	; (8001eb8 <HAL_RCC_ClockConfig+0x240>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d001      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e184      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d010      	beq.n	8001cea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691a      	ldr	r2, [r3, #16]
 8001ccc:	4b7b      	ldr	r3, [pc, #492]	; (8001ebc <HAL_RCC_ClockConfig+0x244>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d908      	bls.n	8001cea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001cd8:	4b78      	ldr	r3, [pc, #480]	; (8001ebc <HAL_RCC_ClockConfig+0x244>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	4975      	ldr	r1, [pc, #468]	; (8001ebc <HAL_RCC_ClockConfig+0x244>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d010      	beq.n	8001d18 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	695a      	ldr	r2, [r3, #20]
 8001cfa:	4b70      	ldr	r3, [pc, #448]	; (8001ebc <HAL_RCC_ClockConfig+0x244>)
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d908      	bls.n	8001d18 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d06:	4b6d      	ldr	r3, [pc, #436]	; (8001ebc <HAL_RCC_ClockConfig+0x244>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	496a      	ldr	r1, [pc, #424]	; (8001ebc <HAL_RCC_ClockConfig+0x244>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0310 	and.w	r3, r3, #16
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d010      	beq.n	8001d46 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	699a      	ldr	r2, [r3, #24]
 8001d28:	4b64      	ldr	r3, [pc, #400]	; (8001ebc <HAL_RCC_ClockConfig+0x244>)
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d908      	bls.n	8001d46 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d34:	4b61      	ldr	r3, [pc, #388]	; (8001ebc <HAL_RCC_ClockConfig+0x244>)
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	495e      	ldr	r1, [pc, #376]	; (8001ebc <HAL_RCC_ClockConfig+0x244>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0320 	and.w	r3, r3, #32
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d010      	beq.n	8001d74 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69da      	ldr	r2, [r3, #28]
 8001d56:	4b59      	ldr	r3, [pc, #356]	; (8001ebc <HAL_RCC_ClockConfig+0x244>)
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d908      	bls.n	8001d74 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001d62:	4b56      	ldr	r3, [pc, #344]	; (8001ebc <HAL_RCC_ClockConfig+0x244>)
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	4953      	ldr	r1, [pc, #332]	; (8001ebc <HAL_RCC_ClockConfig+0x244>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d010      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68da      	ldr	r2, [r3, #12]
 8001d84:	4b4d      	ldr	r3, [pc, #308]	; (8001ebc <HAL_RCC_ClockConfig+0x244>)
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	f003 030f 	and.w	r3, r3, #15
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d908      	bls.n	8001da2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d90:	4b4a      	ldr	r3, [pc, #296]	; (8001ebc <HAL_RCC_ClockConfig+0x244>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	f023 020f 	bic.w	r2, r3, #15
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	4947      	ldr	r1, [pc, #284]	; (8001ebc <HAL_RCC_ClockConfig+0x244>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d055      	beq.n	8001e5a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001dae:	4b43      	ldr	r3, [pc, #268]	; (8001ebc <HAL_RCC_ClockConfig+0x244>)
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	4940      	ldr	r1, [pc, #256]	; (8001ebc <HAL_RCC_ClockConfig+0x244>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d107      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dc8:	4b3c      	ldr	r3, [pc, #240]	; (8001ebc <HAL_RCC_ClockConfig+0x244>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d121      	bne.n	8001e18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e0f6      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d107      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001de0:	4b36      	ldr	r3, [pc, #216]	; (8001ebc <HAL_RCC_ClockConfig+0x244>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d115      	bne.n	8001e18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e0ea      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d107      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001df8:	4b30      	ldr	r3, [pc, #192]	; (8001ebc <HAL_RCC_ClockConfig+0x244>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d109      	bne.n	8001e18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e0de      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e08:	4b2c      	ldr	r3, [pc, #176]	; (8001ebc <HAL_RCC_ClockConfig+0x244>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e0d6      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e18:	4b28      	ldr	r3, [pc, #160]	; (8001ebc <HAL_RCC_ClockConfig+0x244>)
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	f023 0207 	bic.w	r2, r3, #7
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	4925      	ldr	r1, [pc, #148]	; (8001ebc <HAL_RCC_ClockConfig+0x244>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e2a:	f7fe ffc5 	bl	8000db8 <HAL_GetTick>
 8001e2e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e30:	e00a      	b.n	8001e48 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e32:	f7fe ffc1 	bl	8000db8 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e0be      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e48:	4b1c      	ldr	r3, [pc, #112]	; (8001ebc <HAL_RCC_ClockConfig+0x244>)
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d1eb      	bne.n	8001e32 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d010      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68da      	ldr	r2, [r3, #12]
 8001e6a:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <HAL_RCC_ClockConfig+0x244>)
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d208      	bcs.n	8001e88 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e76:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <HAL_RCC_ClockConfig+0x244>)
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	f023 020f 	bic.w	r2, r3, #15
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	490e      	ldr	r1, [pc, #56]	; (8001ebc <HAL_RCC_ClockConfig+0x244>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e88:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <HAL_RCC_ClockConfig+0x240>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 030f 	and.w	r3, r3, #15
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d214      	bcs.n	8001ec0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e96:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <HAL_RCC_ClockConfig+0x240>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f023 020f 	bic.w	r2, r3, #15
 8001e9e:	4906      	ldr	r1, [pc, #24]	; (8001eb8 <HAL_RCC_ClockConfig+0x240>)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea6:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <HAL_RCC_ClockConfig+0x240>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d005      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e086      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x34e>
 8001eb8:	52002000 	.word	0x52002000
 8001ebc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d010      	beq.n	8001eee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691a      	ldr	r2, [r3, #16]
 8001ed0:	4b3f      	ldr	r3, [pc, #252]	; (8001fd0 <HAL_RCC_ClockConfig+0x358>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d208      	bcs.n	8001eee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001edc:	4b3c      	ldr	r3, [pc, #240]	; (8001fd0 <HAL_RCC_ClockConfig+0x358>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	4939      	ldr	r1, [pc, #228]	; (8001fd0 <HAL_RCC_ClockConfig+0x358>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d010      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	695a      	ldr	r2, [r3, #20]
 8001efe:	4b34      	ldr	r3, [pc, #208]	; (8001fd0 <HAL_RCC_ClockConfig+0x358>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d208      	bcs.n	8001f1c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f0a:	4b31      	ldr	r3, [pc, #196]	; (8001fd0 <HAL_RCC_ClockConfig+0x358>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	492e      	ldr	r1, [pc, #184]	; (8001fd0 <HAL_RCC_ClockConfig+0x358>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0310 	and.w	r3, r3, #16
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d010      	beq.n	8001f4a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	699a      	ldr	r2, [r3, #24]
 8001f2c:	4b28      	ldr	r3, [pc, #160]	; (8001fd0 <HAL_RCC_ClockConfig+0x358>)
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d208      	bcs.n	8001f4a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f38:	4b25      	ldr	r3, [pc, #148]	; (8001fd0 <HAL_RCC_ClockConfig+0x358>)
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	4922      	ldr	r1, [pc, #136]	; (8001fd0 <HAL_RCC_ClockConfig+0x358>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0320 	and.w	r3, r3, #32
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d010      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69da      	ldr	r2, [r3, #28]
 8001f5a:	4b1d      	ldr	r3, [pc, #116]	; (8001fd0 <HAL_RCC_ClockConfig+0x358>)
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d208      	bcs.n	8001f78 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001f66:	4b1a      	ldr	r3, [pc, #104]	; (8001fd0 <HAL_RCC_ClockConfig+0x358>)
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	4917      	ldr	r1, [pc, #92]	; (8001fd0 <HAL_RCC_ClockConfig+0x358>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001f78:	f000 f834 	bl	8001fe4 <HAL_RCC_GetSysClockFreq>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	4b14      	ldr	r3, [pc, #80]	; (8001fd0 <HAL_RCC_ClockConfig+0x358>)
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	0a1b      	lsrs	r3, r3, #8
 8001f84:	f003 030f 	and.w	r3, r3, #15
 8001f88:	4912      	ldr	r1, [pc, #72]	; (8001fd4 <HAL_RCC_ClockConfig+0x35c>)
 8001f8a:	5ccb      	ldrb	r3, [r1, r3]
 8001f8c:	f003 031f 	and.w	r3, r3, #31
 8001f90:	fa22 f303 	lsr.w	r3, r2, r3
 8001f94:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001f96:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <HAL_RCC_ClockConfig+0x358>)
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	4a0d      	ldr	r2, [pc, #52]	; (8001fd4 <HAL_RCC_ClockConfig+0x35c>)
 8001fa0:	5cd3      	ldrb	r3, [r2, r3]
 8001fa2:	f003 031f 	and.w	r3, r3, #31
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fac:	4a0a      	ldr	r2, [pc, #40]	; (8001fd8 <HAL_RCC_ClockConfig+0x360>)
 8001fae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fb0:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <HAL_RCC_ClockConfig+0x364>)
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <HAL_RCC_ClockConfig+0x368>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe feb2 	bl	8000d24 <HAL_InitTick>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	58024400 	.word	0x58024400
 8001fd4:	08005374 	.word	0x08005374
 8001fd8:	24000004 	.word	0x24000004
 8001fdc:	24000000 	.word	0x24000000
 8001fe0:	24000008 	.word	0x24000008

08001fe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b089      	sub	sp, #36	; 0x24
 8001fe8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fea:	4bb3      	ldr	r3, [pc, #716]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ff2:	2b18      	cmp	r3, #24
 8001ff4:	f200 8155 	bhi.w	80022a2 <HAL_RCC_GetSysClockFreq+0x2be>
 8001ff8:	a201      	add	r2, pc, #4	; (adr r2, 8002000 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffe:	bf00      	nop
 8002000:	08002065 	.word	0x08002065
 8002004:	080022a3 	.word	0x080022a3
 8002008:	080022a3 	.word	0x080022a3
 800200c:	080022a3 	.word	0x080022a3
 8002010:	080022a3 	.word	0x080022a3
 8002014:	080022a3 	.word	0x080022a3
 8002018:	080022a3 	.word	0x080022a3
 800201c:	080022a3 	.word	0x080022a3
 8002020:	0800208b 	.word	0x0800208b
 8002024:	080022a3 	.word	0x080022a3
 8002028:	080022a3 	.word	0x080022a3
 800202c:	080022a3 	.word	0x080022a3
 8002030:	080022a3 	.word	0x080022a3
 8002034:	080022a3 	.word	0x080022a3
 8002038:	080022a3 	.word	0x080022a3
 800203c:	080022a3 	.word	0x080022a3
 8002040:	08002091 	.word	0x08002091
 8002044:	080022a3 	.word	0x080022a3
 8002048:	080022a3 	.word	0x080022a3
 800204c:	080022a3 	.word	0x080022a3
 8002050:	080022a3 	.word	0x080022a3
 8002054:	080022a3 	.word	0x080022a3
 8002058:	080022a3 	.word	0x080022a3
 800205c:	080022a3 	.word	0x080022a3
 8002060:	08002097 	.word	0x08002097
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002064:	4b94      	ldr	r3, [pc, #592]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0320 	and.w	r3, r3, #32
 800206c:	2b00      	cmp	r3, #0
 800206e:	d009      	beq.n	8002084 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002070:	4b91      	ldr	r3, [pc, #580]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	08db      	lsrs	r3, r3, #3
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	4a90      	ldr	r2, [pc, #576]	; (80022bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800207c:	fa22 f303 	lsr.w	r3, r2, r3
 8002080:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002082:	e111      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002084:	4b8d      	ldr	r3, [pc, #564]	; (80022bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002086:	61bb      	str	r3, [r7, #24]
      break;
 8002088:	e10e      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800208a:	4b8d      	ldr	r3, [pc, #564]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800208c:	61bb      	str	r3, [r7, #24]
      break;
 800208e:	e10b      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002090:	4b8c      	ldr	r3, [pc, #560]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002092:	61bb      	str	r3, [r7, #24]
      break;
 8002094:	e108      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002096:	4b88      	ldr	r3, [pc, #544]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80020a0:	4b85      	ldr	r3, [pc, #532]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a4:	091b      	lsrs	r3, r3, #4
 80020a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020aa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80020ac:	4b82      	ldr	r3, [pc, #520]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80020b6:	4b80      	ldr	r3, [pc, #512]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ba:	08db      	lsrs	r3, r3, #3
 80020bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	fb02 f303 	mul.w	r3, r2, r3
 80020c6:	ee07 3a90 	vmov	s15, r3
 80020ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ce:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 80e1 	beq.w	800229c <HAL_RCC_GetSysClockFreq+0x2b8>
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	2b02      	cmp	r3, #2
 80020de:	f000 8083 	beq.w	80021e8 <HAL_RCC_GetSysClockFreq+0x204>
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	f200 80a1 	bhi.w	800222c <HAL_RCC_GetSysClockFreq+0x248>
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_RCC_GetSysClockFreq+0x114>
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d056      	beq.n	80021a4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80020f6:	e099      	b.n	800222c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80020f8:	4b6f      	ldr	r3, [pc, #444]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0320 	and.w	r3, r3, #32
 8002100:	2b00      	cmp	r3, #0
 8002102:	d02d      	beq.n	8002160 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002104:	4b6c      	ldr	r3, [pc, #432]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	08db      	lsrs	r3, r3, #3
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	4a6b      	ldr	r2, [pc, #428]	; (80022bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002110:	fa22 f303 	lsr.w	r3, r2, r3
 8002114:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	ee07 3a90 	vmov	s15, r3
 800211c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	ee07 3a90 	vmov	s15, r3
 8002126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800212a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800212e:	4b62      	ldr	r3, [pc, #392]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002136:	ee07 3a90 	vmov	s15, r3
 800213a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800213e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002142:	eddf 5a61 	vldr	s11, [pc, #388]	; 80022c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800214a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800214e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800215a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800215e:	e087      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	ee07 3a90 	vmov	s15, r3
 8002166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800216a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80022cc <HAL_RCC_GetSysClockFreq+0x2e8>
 800216e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002172:	4b51      	ldr	r3, [pc, #324]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800217a:	ee07 3a90 	vmov	s15, r3
 800217e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002182:	ed97 6a02 	vldr	s12, [r7, #8]
 8002186:	eddf 5a50 	vldr	s11, [pc, #320]	; 80022c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800218a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800218e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800219a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800219e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80021a2:	e065      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	ee07 3a90 	vmov	s15, r3
 80021aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021ae:	eddf 6a48 	vldr	s13, [pc, #288]	; 80022d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80021b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021b6:	4b40      	ldr	r3, [pc, #256]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021be:	ee07 3a90 	vmov	s15, r3
 80021c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80021ca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80022c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80021e6:	e043      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	ee07 3a90 	vmov	s15, r3
 80021ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021f2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80022d4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80021f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021fa:	4b2f      	ldr	r3, [pc, #188]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002202:	ee07 3a90 	vmov	s15, r3
 8002206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800220a:	ed97 6a02 	vldr	s12, [r7, #8]
 800220e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80022c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800221a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800221e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002226:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800222a:	e021      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	ee07 3a90 	vmov	s15, r3
 8002232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002236:	eddf 6a26 	vldr	s13, [pc, #152]	; 80022d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800223a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800223e:	4b1e      	ldr	r3, [pc, #120]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002246:	ee07 3a90 	vmov	s15, r3
 800224a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800224e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002252:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80022c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800225a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800225e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800226a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800226e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002270:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002274:	0a5b      	lsrs	r3, r3, #9
 8002276:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800227a:	3301      	adds	r3, #1
 800227c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	ee07 3a90 	vmov	s15, r3
 8002284:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002288:	edd7 6a07 	vldr	s13, [r7, #28]
 800228c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002290:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002294:	ee17 3a90 	vmov	r3, s15
 8002298:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800229a:	e005      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800229c:	2300      	movs	r3, #0
 800229e:	61bb      	str	r3, [r7, #24]
      break;
 80022a0:	e002      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80022a2:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80022a4:	61bb      	str	r3, [r7, #24]
      break;
 80022a6:	bf00      	nop
  }

  return sysclockfreq;
 80022a8:	69bb      	ldr	r3, [r7, #24]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3724      	adds	r7, #36	; 0x24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	58024400 	.word	0x58024400
 80022bc:	03d09000 	.word	0x03d09000
 80022c0:	003d0900 	.word	0x003d0900
 80022c4:	007a1200 	.word	0x007a1200
 80022c8:	46000000 	.word	0x46000000
 80022cc:	4c742400 	.word	0x4c742400
 80022d0:	4a742400 	.word	0x4a742400
 80022d4:	4af42400 	.word	0x4af42400

080022d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80022de:	f7ff fe81 	bl	8001fe4 <HAL_RCC_GetSysClockFreq>
 80022e2:	4602      	mov	r2, r0
 80022e4:	4b10      	ldr	r3, [pc, #64]	; (8002328 <HAL_RCC_GetHCLKFreq+0x50>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	0a1b      	lsrs	r3, r3, #8
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	490f      	ldr	r1, [pc, #60]	; (800232c <HAL_RCC_GetHCLKFreq+0x54>)
 80022f0:	5ccb      	ldrb	r3, [r1, r3]
 80022f2:	f003 031f 	and.w	r3, r3, #31
 80022f6:	fa22 f303 	lsr.w	r3, r2, r3
 80022fa:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80022fc:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <HAL_RCC_GetHCLKFreq+0x50>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	f003 030f 	and.w	r3, r3, #15
 8002304:	4a09      	ldr	r2, [pc, #36]	; (800232c <HAL_RCC_GetHCLKFreq+0x54>)
 8002306:	5cd3      	ldrb	r3, [r2, r3]
 8002308:	f003 031f 	and.w	r3, r3, #31
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	fa22 f303 	lsr.w	r3, r2, r3
 8002312:	4a07      	ldr	r2, [pc, #28]	; (8002330 <HAL_RCC_GetHCLKFreq+0x58>)
 8002314:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002316:	4a07      	ldr	r2, [pc, #28]	; (8002334 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800231c:	4b04      	ldr	r3, [pc, #16]	; (8002330 <HAL_RCC_GetHCLKFreq+0x58>)
 800231e:	681b      	ldr	r3, [r3, #0]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	58024400 	.word	0x58024400
 800232c:	08005374 	.word	0x08005374
 8002330:	24000004 	.word	0x24000004
 8002334:	24000000 	.word	0x24000000

08002338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800233c:	f7ff ffcc 	bl	80022d8 <HAL_RCC_GetHCLKFreq>
 8002340:	4602      	mov	r2, r0
 8002342:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	091b      	lsrs	r3, r3, #4
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	4904      	ldr	r1, [pc, #16]	; (8002360 <HAL_RCC_GetPCLK1Freq+0x28>)
 800234e:	5ccb      	ldrb	r3, [r1, r3]
 8002350:	f003 031f 	and.w	r3, r3, #31
 8002354:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002358:	4618      	mov	r0, r3
 800235a:	bd80      	pop	{r7, pc}
 800235c:	58024400 	.word	0x58024400
 8002360:	08005374 	.word	0x08005374

08002364 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002368:	f7ff ffb6 	bl	80022d8 <HAL_RCC_GetHCLKFreq>
 800236c:	4602      	mov	r2, r0
 800236e:	4b06      	ldr	r3, [pc, #24]	; (8002388 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	0a1b      	lsrs	r3, r3, #8
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	4904      	ldr	r1, [pc, #16]	; (800238c <HAL_RCC_GetPCLK2Freq+0x28>)
 800237a:	5ccb      	ldrb	r3, [r1, r3]
 800237c:	f003 031f 	and.w	r3, r3, #31
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002384:	4618      	mov	r0, r3
 8002386:	bd80      	pop	{r7, pc}
 8002388:	58024400 	.word	0x58024400
 800238c:	08005374 	.word	0x08005374

08002390 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002394:	b0c8      	sub	sp, #288	; 0x120
 8002396:	af00      	add	r7, sp, #0
 8002398:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800239c:	2300      	movs	r3, #0
 800239e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023a2:	2300      	movs	r3, #0
 80023a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80023b4:	2500      	movs	r5, #0
 80023b6:	ea54 0305 	orrs.w	r3, r4, r5
 80023ba:	d049      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80023bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80023c6:	d02f      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80023c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80023cc:	d828      	bhi.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80023ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023d2:	d01a      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80023d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023d8:	d822      	bhi.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80023de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023e2:	d007      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023e4:	e01c      	b.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023e6:	4ba7      	ldr	r3, [pc, #668]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ea:	4aa6      	ldr	r2, [pc, #664]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80023f2:	e01a      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80023f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023f8:	3308      	adds	r3, #8
 80023fa:	2102      	movs	r1, #2
 80023fc:	4618      	mov	r0, r3
 80023fe:	f001 fc43 	bl	8003c88 <RCCEx_PLL2_Config>
 8002402:	4603      	mov	r3, r0
 8002404:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002408:	e00f      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800240a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800240e:	3328      	adds	r3, #40	; 0x28
 8002410:	2102      	movs	r1, #2
 8002412:	4618      	mov	r0, r3
 8002414:	f001 fcea 	bl	8003dec <RCCEx_PLL3_Config>
 8002418:	4603      	mov	r3, r0
 800241a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800241e:	e004      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002426:	e000      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002428:	bf00      	nop
    }

    if (ret == HAL_OK)
 800242a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10a      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002432:	4b94      	ldr	r3, [pc, #592]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002436:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800243a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800243e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002440:	4a90      	ldr	r2, [pc, #576]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002442:	430b      	orrs	r3, r1
 8002444:	6513      	str	r3, [r2, #80]	; 0x50
 8002446:	e003      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002448:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800244c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002450:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002458:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800245c:	f04f 0900 	mov.w	r9, #0
 8002460:	ea58 0309 	orrs.w	r3, r8, r9
 8002464:	d047      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002466:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800246a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246c:	2b04      	cmp	r3, #4
 800246e:	d82a      	bhi.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002470:	a201      	add	r2, pc, #4	; (adr r2, 8002478 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002476:	bf00      	nop
 8002478:	0800248d 	.word	0x0800248d
 800247c:	0800249b 	.word	0x0800249b
 8002480:	080024b1 	.word	0x080024b1
 8002484:	080024cf 	.word	0x080024cf
 8002488:	080024cf 	.word	0x080024cf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800248c:	4b7d      	ldr	r3, [pc, #500]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800248e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002490:	4a7c      	ldr	r2, [pc, #496]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002496:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002498:	e01a      	b.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800249a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800249e:	3308      	adds	r3, #8
 80024a0:	2100      	movs	r1, #0
 80024a2:	4618      	mov	r0, r3
 80024a4:	f001 fbf0 	bl	8003c88 <RCCEx_PLL2_Config>
 80024a8:	4603      	mov	r3, r0
 80024aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80024ae:	e00f      	b.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80024b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024b4:	3328      	adds	r3, #40	; 0x28
 80024b6:	2100      	movs	r1, #0
 80024b8:	4618      	mov	r0, r3
 80024ba:	f001 fc97 	bl	8003dec <RCCEx_PLL3_Config>
 80024be:	4603      	mov	r3, r0
 80024c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80024c4:	e004      	b.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80024cc:	e000      	b.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80024ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10a      	bne.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024d8:	4b6a      	ldr	r3, [pc, #424]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024dc:	f023 0107 	bic.w	r1, r3, #7
 80024e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e6:	4a67      	ldr	r2, [pc, #412]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024e8:	430b      	orrs	r3, r1
 80024ea:	6513      	str	r3, [r2, #80]	; 0x50
 80024ec:	e003      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80024f2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80024f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fe:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002502:	f04f 0b00 	mov.w	fp, #0
 8002506:	ea5a 030b 	orrs.w	r3, sl, fp
 800250a:	d054      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800250c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002512:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002516:	d036      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002518:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800251c:	d82f      	bhi.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800251e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002522:	d032      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002524:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002528:	d829      	bhi.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800252a:	2bc0      	cmp	r3, #192	; 0xc0
 800252c:	d02f      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800252e:	2bc0      	cmp	r3, #192	; 0xc0
 8002530:	d825      	bhi.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002532:	2b80      	cmp	r3, #128	; 0x80
 8002534:	d018      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8002536:	2b80      	cmp	r3, #128	; 0x80
 8002538:	d821      	bhi.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800253a:	2b00      	cmp	r3, #0
 800253c:	d002      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800253e:	2b40      	cmp	r3, #64	; 0x40
 8002540:	d007      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8002542:	e01c      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002544:	4b4f      	ldr	r3, [pc, #316]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002548:	4a4e      	ldr	r2, [pc, #312]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800254a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800254e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002550:	e01e      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002552:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002556:	3308      	adds	r3, #8
 8002558:	2100      	movs	r1, #0
 800255a:	4618      	mov	r0, r3
 800255c:	f001 fb94 	bl	8003c88 <RCCEx_PLL2_Config>
 8002560:	4603      	mov	r3, r0
 8002562:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002566:	e013      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002568:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800256c:	3328      	adds	r3, #40	; 0x28
 800256e:	2100      	movs	r1, #0
 8002570:	4618      	mov	r0, r3
 8002572:	f001 fc3b 	bl	8003dec <RCCEx_PLL3_Config>
 8002576:	4603      	mov	r3, r0
 8002578:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800257c:	e008      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002584:	e004      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002586:	bf00      	nop
 8002588:	e002      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800258a:	bf00      	nop
 800258c:	e000      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800258e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002590:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10a      	bne.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002598:	4b3a      	ldr	r3, [pc, #232]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800259a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800259c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80025a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a6:	4a37      	ldr	r2, [pc, #220]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025a8:	430b      	orrs	r3, r1
 80025aa:	6513      	str	r3, [r2, #80]	; 0x50
 80025ac:	e003      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80025b2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80025b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025be:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80025c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80025c6:	2300      	movs	r3, #0
 80025c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80025cc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80025d0:	460b      	mov	r3, r1
 80025d2:	4313      	orrs	r3, r2
 80025d4:	d05c      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80025d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025dc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80025e0:	d03b      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80025e2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80025e6:	d834      	bhi.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80025e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025ec:	d037      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80025ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025f2:	d82e      	bhi.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80025f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80025f8:	d033      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80025fa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80025fe:	d828      	bhi.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002604:	d01a      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8002606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800260a:	d822      	bhi.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8002610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002614:	d007      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002616:	e01c      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002618:	4b1a      	ldr	r3, [pc, #104]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	4a19      	ldr	r2, [pc, #100]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800261e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002622:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002624:	e01e      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002626:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800262a:	3308      	adds	r3, #8
 800262c:	2100      	movs	r1, #0
 800262e:	4618      	mov	r0, r3
 8002630:	f001 fb2a 	bl	8003c88 <RCCEx_PLL2_Config>
 8002634:	4603      	mov	r3, r0
 8002636:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800263a:	e013      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800263c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002640:	3328      	adds	r3, #40	; 0x28
 8002642:	2100      	movs	r1, #0
 8002644:	4618      	mov	r0, r3
 8002646:	f001 fbd1 	bl	8003dec <RCCEx_PLL3_Config>
 800264a:	4603      	mov	r3, r0
 800264c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002650:	e008      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002658:	e004      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800265a:	bf00      	nop
 800265c:	e002      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800265e:	bf00      	nop
 8002660:	e000      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002662:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002664:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10d      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800266e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002670:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8002674:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800267a:	4a02      	ldr	r2, [pc, #8]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800267c:	430b      	orrs	r3, r1
 800267e:	6513      	str	r3, [r2, #80]	; 0x50
 8002680:	e006      	b.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002682:	bf00      	nop
 8002684:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002688:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800268c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002690:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002698:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800269c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80026a0:	2300      	movs	r3, #0
 80026a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80026a6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80026aa:	460b      	mov	r3, r1
 80026ac:	4313      	orrs	r3, r2
 80026ae:	d03a      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80026b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b6:	2b30      	cmp	r3, #48	; 0x30
 80026b8:	d01f      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80026ba:	2b30      	cmp	r3, #48	; 0x30
 80026bc:	d819      	bhi.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80026be:	2b20      	cmp	r3, #32
 80026c0:	d00c      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80026c2:	2b20      	cmp	r3, #32
 80026c4:	d815      	bhi.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d019      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80026ca:	2b10      	cmp	r3, #16
 80026cc:	d111      	bne.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026ce:	4bae      	ldr	r3, [pc, #696]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80026d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d2:	4aad      	ldr	r2, [pc, #692]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80026d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80026da:	e011      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80026dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026e0:	3308      	adds	r3, #8
 80026e2:	2102      	movs	r1, #2
 80026e4:	4618      	mov	r0, r3
 80026e6:	f001 facf 	bl	8003c88 <RCCEx_PLL2_Config>
 80026ea:	4603      	mov	r3, r0
 80026ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80026f0:	e006      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80026f8:	e002      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80026fa:	bf00      	nop
 80026fc:	e000      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80026fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002700:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10a      	bne.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002708:	4b9f      	ldr	r3, [pc, #636]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800270a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002710:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002716:	4a9c      	ldr	r2, [pc, #624]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002718:	430b      	orrs	r3, r1
 800271a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800271c:	e003      	b.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800271e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002722:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002726:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800272a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002732:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002736:	2300      	movs	r3, #0
 8002738:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800273c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002740:	460b      	mov	r3, r1
 8002742:	4313      	orrs	r3, r2
 8002744:	d051      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002746:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800274a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800274c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002750:	d035      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002752:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002756:	d82e      	bhi.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002758:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800275c:	d031      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800275e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002762:	d828      	bhi.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002768:	d01a      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800276a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800276e:	d822      	bhi.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002778:	d007      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800277a:	e01c      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800277c:	4b82      	ldr	r3, [pc, #520]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800277e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002780:	4a81      	ldr	r2, [pc, #516]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002786:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002788:	e01c      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800278a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800278e:	3308      	adds	r3, #8
 8002790:	2100      	movs	r1, #0
 8002792:	4618      	mov	r0, r3
 8002794:	f001 fa78 	bl	8003c88 <RCCEx_PLL2_Config>
 8002798:	4603      	mov	r3, r0
 800279a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800279e:	e011      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027a4:	3328      	adds	r3, #40	; 0x28
 80027a6:	2100      	movs	r1, #0
 80027a8:	4618      	mov	r0, r3
 80027aa:	f001 fb1f 	bl	8003dec <RCCEx_PLL3_Config>
 80027ae:	4603      	mov	r3, r0
 80027b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80027b4:	e006      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80027bc:	e002      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80027be:	bf00      	nop
 80027c0:	e000      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80027c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10a      	bne.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80027cc:	4b6e      	ldr	r3, [pc, #440]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80027ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027d0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80027d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027da:	4a6b      	ldr	r2, [pc, #428]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80027dc:	430b      	orrs	r3, r1
 80027de:	6513      	str	r3, [r2, #80]	; 0x50
 80027e0:	e003      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80027e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80027ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80027f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80027fa:	2300      	movs	r3, #0
 80027fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002800:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002804:	460b      	mov	r3, r1
 8002806:	4313      	orrs	r3, r2
 8002808:	d053      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800280a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800280e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002810:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002814:	d033      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002816:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800281a:	d82c      	bhi.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800281c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002820:	d02f      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8002822:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002826:	d826      	bhi.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002828:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800282c:	d02b      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800282e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002832:	d820      	bhi.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002834:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002838:	d012      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800283a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800283e:	d81a      	bhi.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002840:	2b00      	cmp	r3, #0
 8002842:	d022      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8002844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002848:	d115      	bne.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800284a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800284e:	3308      	adds	r3, #8
 8002850:	2101      	movs	r1, #1
 8002852:	4618      	mov	r0, r3
 8002854:	f001 fa18 	bl	8003c88 <RCCEx_PLL2_Config>
 8002858:	4603      	mov	r3, r0
 800285a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800285e:	e015      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002860:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002864:	3328      	adds	r3, #40	; 0x28
 8002866:	2101      	movs	r1, #1
 8002868:	4618      	mov	r0, r3
 800286a:	f001 fabf 	bl	8003dec <RCCEx_PLL3_Config>
 800286e:	4603      	mov	r3, r0
 8002870:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002874:	e00a      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800287c:	e006      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800287e:	bf00      	nop
 8002880:	e004      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002882:	bf00      	nop
 8002884:	e002      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002886:	bf00      	nop
 8002888:	e000      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800288a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800288c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10a      	bne.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002894:	4b3c      	ldr	r3, [pc, #240]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002898:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800289c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028a2:	4a39      	ldr	r2, [pc, #228]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80028a4:	430b      	orrs	r3, r1
 80028a6:	6513      	str	r3, [r2, #80]	; 0x50
 80028a8:	e003      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80028ae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80028b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ba:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80028be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80028c2:	2300      	movs	r3, #0
 80028c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80028c8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80028cc:	460b      	mov	r3, r1
 80028ce:	4313      	orrs	r3, r2
 80028d0:	d060      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80028d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80028da:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80028de:	d039      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80028e0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80028e4:	d832      	bhi.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80028e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028ea:	d035      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80028ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028f0:	d82c      	bhi.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80028f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f6:	d031      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80028f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028fc:	d826      	bhi.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80028fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002902:	d02d      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002904:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002908:	d820      	bhi.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800290a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800290e:	d012      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002910:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002914:	d81a      	bhi.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002916:	2b00      	cmp	r3, #0
 8002918:	d024      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800291a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800291e:	d115      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002920:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002924:	3308      	adds	r3, #8
 8002926:	2101      	movs	r1, #1
 8002928:	4618      	mov	r0, r3
 800292a:	f001 f9ad 	bl	8003c88 <RCCEx_PLL2_Config>
 800292e:	4603      	mov	r3, r0
 8002930:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002934:	e017      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002936:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800293a:	3328      	adds	r3, #40	; 0x28
 800293c:	2101      	movs	r1, #1
 800293e:	4618      	mov	r0, r3
 8002940:	f001 fa54 	bl	8003dec <RCCEx_PLL3_Config>
 8002944:	4603      	mov	r3, r0
 8002946:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800294a:	e00c      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002952:	e008      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002954:	bf00      	nop
 8002956:	e006      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002958:	bf00      	nop
 800295a:	e004      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800295c:	bf00      	nop
 800295e:	e002      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002960:	bf00      	nop
 8002962:	e000      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002966:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10e      	bne.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800296e:	4b06      	ldr	r3, [pc, #24]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002972:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002976:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800297a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800297e:	4a02      	ldr	r2, [pc, #8]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002980:	430b      	orrs	r3, r1
 8002982:	6593      	str	r3, [r2, #88]	; 0x58
 8002984:	e006      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002986:	bf00      	nop
 8002988:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800298c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002990:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002994:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80029a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80029a4:	2300      	movs	r3, #0
 80029a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80029aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80029ae:	460b      	mov	r3, r1
 80029b0:	4313      	orrs	r3, r2
 80029b2:	d037      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80029b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029be:	d00e      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80029c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029c4:	d816      	bhi.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d018      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80029ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029ce:	d111      	bne.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029d0:	4bc4      	ldr	r3, [pc, #784]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80029d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d4:	4ac3      	ldr	r2, [pc, #780]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80029d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80029dc:	e00f      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80029de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029e2:	3308      	adds	r3, #8
 80029e4:	2101      	movs	r1, #1
 80029e6:	4618      	mov	r0, r3
 80029e8:	f001 f94e 	bl	8003c88 <RCCEx_PLL2_Config>
 80029ec:	4603      	mov	r3, r0
 80029ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80029f2:	e004      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80029fa:	e000      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80029fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10a      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a06:	4bb7      	ldr	r3, [pc, #732]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a0a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002a0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a14:	4ab3      	ldr	r2, [pc, #716]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a16:	430b      	orrs	r3, r1
 8002a18:	6513      	str	r3, [r2, #80]	; 0x50
 8002a1a:	e003      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a1c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a20:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002a30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a34:	2300      	movs	r3, #0
 8002a36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002a3a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4313      	orrs	r3, r2
 8002a42:	d039      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002a44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	d81c      	bhi.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002a4e:	a201      	add	r2, pc, #4	; (adr r2, 8002a54 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a54:	08002a91 	.word	0x08002a91
 8002a58:	08002a65 	.word	0x08002a65
 8002a5c:	08002a73 	.word	0x08002a73
 8002a60:	08002a91 	.word	0x08002a91
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a64:	4b9f      	ldr	r3, [pc, #636]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a68:	4a9e      	ldr	r2, [pc, #632]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002a70:	e00f      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002a72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a76:	3308      	adds	r3, #8
 8002a78:	2102      	movs	r1, #2
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f001 f904 	bl	8003c88 <RCCEx_PLL2_Config>
 8002a80:	4603      	mov	r3, r0
 8002a82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002a86:	e004      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002a8e:	e000      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002a90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a92:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10a      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002a9a:	4b92      	ldr	r3, [pc, #584]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a9e:	f023 0103 	bic.w	r1, r3, #3
 8002aa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa8:	4a8e      	ldr	r2, [pc, #568]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002aaa:	430b      	orrs	r3, r1
 8002aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aae:	e003      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ab4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ab8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002ac4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ac8:	2300      	movs	r3, #0
 8002aca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ace:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f000 8099 	beq.w	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ada:	4b83      	ldr	r3, [pc, #524]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a82      	ldr	r2, [pc, #520]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ae6:	f7fe f967 	bl	8000db8 <HAL_GetTick>
 8002aea:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002aee:	e00b      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af0:	f7fe f962 	bl	8000db8 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b64      	cmp	r3, #100	; 0x64
 8002afe:	d903      	bls.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002b06:	e005      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b08:	4b77      	ldr	r3, [pc, #476]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0ed      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002b14:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d173      	bne.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002b1c:	4b71      	ldr	r3, [pc, #452]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002b28:	4053      	eors	r3, r2
 8002b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d015      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b32:	4b6c      	ldr	r3, [pc, #432]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b3a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b3e:	4b69      	ldr	r3, [pc, #420]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b42:	4a68      	ldr	r2, [pc, #416]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b48:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b4a:	4b66      	ldr	r3, [pc, #408]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4e:	4a65      	ldr	r2, [pc, #404]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b54:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002b56:	4a63      	ldr	r2, [pc, #396]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b5c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002b5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b6a:	d118      	bne.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6c:	f7fe f924 	bl	8000db8 <HAL_GetTick>
 8002b70:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b74:	e00d      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b76:	f7fe f91f 	bl	8000db8 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002b80:	1ad2      	subs	r2, r2, r3
 8002b82:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d903      	bls.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8002b90:	e005      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b92:	4b54      	ldr	r3, [pc, #336]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0eb      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002b9e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d129      	bne.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002baa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bb6:	d10e      	bne.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002bb8:	4b4a      	ldr	r3, [pc, #296]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002bc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bc4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002bc8:	091a      	lsrs	r2, r3, #4
 8002bca:	4b48      	ldr	r3, [pc, #288]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002bcc:	4013      	ands	r3, r2
 8002bce:	4a45      	ldr	r2, [pc, #276]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	6113      	str	r3, [r2, #16]
 8002bd4:	e005      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002bd6:	4b43      	ldr	r3, [pc, #268]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	4a42      	ldr	r2, [pc, #264]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bdc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002be0:	6113      	str	r3, [r2, #16]
 8002be2:	4b40      	ldr	r3, [pc, #256]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002be4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002be6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002bee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf2:	4a3c      	ldr	r2, [pc, #240]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bf4:	430b      	orrs	r3, r1
 8002bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf8:	e008      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bfa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002bfe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8002c02:	e003      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c04:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c08:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002c0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c14:	f002 0301 	and.w	r3, r2, #1
 8002c18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c22:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f000 8090 	beq.w	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c36:	2b28      	cmp	r3, #40	; 0x28
 8002c38:	d870      	bhi.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002c3a:	a201      	add	r2, pc, #4	; (adr r2, 8002c40 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c40:	08002d25 	.word	0x08002d25
 8002c44:	08002d1d 	.word	0x08002d1d
 8002c48:	08002d1d 	.word	0x08002d1d
 8002c4c:	08002d1d 	.word	0x08002d1d
 8002c50:	08002d1d 	.word	0x08002d1d
 8002c54:	08002d1d 	.word	0x08002d1d
 8002c58:	08002d1d 	.word	0x08002d1d
 8002c5c:	08002d1d 	.word	0x08002d1d
 8002c60:	08002cf1 	.word	0x08002cf1
 8002c64:	08002d1d 	.word	0x08002d1d
 8002c68:	08002d1d 	.word	0x08002d1d
 8002c6c:	08002d1d 	.word	0x08002d1d
 8002c70:	08002d1d 	.word	0x08002d1d
 8002c74:	08002d1d 	.word	0x08002d1d
 8002c78:	08002d1d 	.word	0x08002d1d
 8002c7c:	08002d1d 	.word	0x08002d1d
 8002c80:	08002d07 	.word	0x08002d07
 8002c84:	08002d1d 	.word	0x08002d1d
 8002c88:	08002d1d 	.word	0x08002d1d
 8002c8c:	08002d1d 	.word	0x08002d1d
 8002c90:	08002d1d 	.word	0x08002d1d
 8002c94:	08002d1d 	.word	0x08002d1d
 8002c98:	08002d1d 	.word	0x08002d1d
 8002c9c:	08002d1d 	.word	0x08002d1d
 8002ca0:	08002d25 	.word	0x08002d25
 8002ca4:	08002d1d 	.word	0x08002d1d
 8002ca8:	08002d1d 	.word	0x08002d1d
 8002cac:	08002d1d 	.word	0x08002d1d
 8002cb0:	08002d1d 	.word	0x08002d1d
 8002cb4:	08002d1d 	.word	0x08002d1d
 8002cb8:	08002d1d 	.word	0x08002d1d
 8002cbc:	08002d1d 	.word	0x08002d1d
 8002cc0:	08002d25 	.word	0x08002d25
 8002cc4:	08002d1d 	.word	0x08002d1d
 8002cc8:	08002d1d 	.word	0x08002d1d
 8002ccc:	08002d1d 	.word	0x08002d1d
 8002cd0:	08002d1d 	.word	0x08002d1d
 8002cd4:	08002d1d 	.word	0x08002d1d
 8002cd8:	08002d1d 	.word	0x08002d1d
 8002cdc:	08002d1d 	.word	0x08002d1d
 8002ce0:	08002d25 	.word	0x08002d25
 8002ce4:	58024400 	.word	0x58024400
 8002ce8:	58024800 	.word	0x58024800
 8002cec:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002cf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cf4:	3308      	adds	r3, #8
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 ffc5 	bl	8003c88 <RCCEx_PLL2_Config>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002d04:	e00f      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d0a:	3328      	adds	r3, #40	; 0x28
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f001 f86c 	bl	8003dec <RCCEx_PLL3_Config>
 8002d14:	4603      	mov	r3, r0
 8002d16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002d1a:	e004      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002d22:	e000      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8002d24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d26:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10b      	bne.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002d2e:	4bc0      	ldr	r3, [pc, #768]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d32:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d3e:	4abc      	ldr	r2, [pc, #752]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002d40:	430b      	orrs	r3, r1
 8002d42:	6553      	str	r3, [r2, #84]	; 0x54
 8002d44:	e003      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d46:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d4a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002d4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d56:	f002 0302 	and.w	r3, r2, #2
 8002d5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002d64:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002d68:	460b      	mov	r3, r1
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	d043      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d76:	2b05      	cmp	r3, #5
 8002d78:	d824      	bhi.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8002d7a:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8002d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d80:	08002dcd 	.word	0x08002dcd
 8002d84:	08002d99 	.word	0x08002d99
 8002d88:	08002daf 	.word	0x08002daf
 8002d8c:	08002dcd 	.word	0x08002dcd
 8002d90:	08002dcd 	.word	0x08002dcd
 8002d94:	08002dcd 	.word	0x08002dcd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d9c:	3308      	adds	r3, #8
 8002d9e:	2101      	movs	r1, #1
 8002da0:	4618      	mov	r0, r3
 8002da2:	f000 ff71 	bl	8003c88 <RCCEx_PLL2_Config>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002dac:	e00f      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002dae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002db2:	3328      	adds	r3, #40	; 0x28
 8002db4:	2101      	movs	r1, #1
 8002db6:	4618      	mov	r0, r3
 8002db8:	f001 f818 	bl	8003dec <RCCEx_PLL3_Config>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002dc2:	e004      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002dca:	e000      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8002dcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10b      	bne.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002dd6:	4b96      	ldr	r3, [pc, #600]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dda:	f023 0107 	bic.w	r1, r3, #7
 8002dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002de6:	4a92      	ldr	r2, [pc, #584]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002de8:	430b      	orrs	r3, r1
 8002dea:	6553      	str	r3, [r2, #84]	; 0x54
 8002dec:	e003      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002df2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfe:	f002 0304 	and.w	r3, r2, #4
 8002e02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e06:	2300      	movs	r3, #0
 8002e08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e0c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4313      	orrs	r3, r2
 8002e14:	d043      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002e16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e1e:	2b05      	cmp	r3, #5
 8002e20:	d824      	bhi.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8002e22:	a201      	add	r2, pc, #4	; (adr r2, 8002e28 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8002e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e28:	08002e75 	.word	0x08002e75
 8002e2c:	08002e41 	.word	0x08002e41
 8002e30:	08002e57 	.word	0x08002e57
 8002e34:	08002e75 	.word	0x08002e75
 8002e38:	08002e75 	.word	0x08002e75
 8002e3c:	08002e75 	.word	0x08002e75
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e44:	3308      	adds	r3, #8
 8002e46:	2101      	movs	r1, #1
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 ff1d 	bl	8003c88 <RCCEx_PLL2_Config>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002e54:	e00f      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e5a:	3328      	adds	r3, #40	; 0x28
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 ffc4 	bl	8003dec <RCCEx_PLL3_Config>
 8002e64:	4603      	mov	r3, r0
 8002e66:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002e6a:	e004      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002e72:	e000      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8002e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e76:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10b      	bne.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e7e:	4b6c      	ldr	r3, [pc, #432]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e82:	f023 0107 	bic.w	r1, r3, #7
 8002e86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e8e:	4a68      	ldr	r2, [pc, #416]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002e90:	430b      	orrs	r3, r1
 8002e92:	6593      	str	r3, [r2, #88]	; 0x58
 8002e94:	e003      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e96:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e9a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea6:	f002 0320 	and.w	r3, r2, #32
 8002eaa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002eae:	2300      	movs	r3, #0
 8002eb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002eb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	d055      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002ebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ec2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ec6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eca:	d033      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8002ecc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ed0:	d82c      	bhi.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed6:	d02f      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8002ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002edc:	d826      	bhi.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002ede:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ee2:	d02b      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8002ee4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ee8:	d820      	bhi.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002eea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eee:	d012      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8002ef0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ef4:	d81a      	bhi.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d022      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8002efa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002efe:	d115      	bne.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f04:	3308      	adds	r3, #8
 8002f06:	2100      	movs	r1, #0
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 febd 	bl	8003c88 <RCCEx_PLL2_Config>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002f14:	e015      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002f16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f1a:	3328      	adds	r3, #40	; 0x28
 8002f1c:	2102      	movs	r1, #2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 ff64 	bl	8003dec <RCCEx_PLL3_Config>
 8002f24:	4603      	mov	r3, r0
 8002f26:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002f2a:	e00a      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002f32:	e006      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002f34:	bf00      	nop
 8002f36:	e004      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002f38:	bf00      	nop
 8002f3a:	e002      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002f3c:	bf00      	nop
 8002f3e:	e000      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002f40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f42:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10b      	bne.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f4a:	4b39      	ldr	r3, [pc, #228]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002f52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f5a:	4a35      	ldr	r2, [pc, #212]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002f5c:	430b      	orrs	r3, r1
 8002f5e:	6553      	str	r3, [r2, #84]	; 0x54
 8002f60:	e003      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f62:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f66:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002f6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f72:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002f76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002f80:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002f84:	460b      	mov	r3, r1
 8002f86:	4313      	orrs	r3, r2
 8002f88:	d058      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002f8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002f92:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002f96:	d033      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8002f98:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002f9c:	d82c      	bhi.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8002f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa2:	d02f      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8002fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa8:	d826      	bhi.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8002faa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fae:	d02b      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8002fb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fb4:	d820      	bhi.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8002fb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fba:	d012      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8002fbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fc0:	d81a      	bhi.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d022      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8002fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fca:	d115      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fd0:	3308      	adds	r3, #8
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 fe57 	bl	8003c88 <RCCEx_PLL2_Config>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002fe0:	e015      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002fe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fe6:	3328      	adds	r3, #40	; 0x28
 8002fe8:	2102      	movs	r1, #2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 fefe 	bl	8003dec <RCCEx_PLL3_Config>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002ff6:	e00a      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002ffe:	e006      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003000:	bf00      	nop
 8003002:	e004      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003004:	bf00      	nop
 8003006:	e002      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003008:	bf00      	nop
 800300a:	e000      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800300c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800300e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10e      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003016:	4b06      	ldr	r3, [pc, #24]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800301e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003022:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003026:	4a02      	ldr	r2, [pc, #8]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003028:	430b      	orrs	r3, r1
 800302a:	6593      	str	r3, [r2, #88]	; 0x58
 800302c:	e006      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800302e:	bf00      	nop
 8003030:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003034:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003038:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800303c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003044:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003048:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800304c:	2300      	movs	r3, #0
 800304e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003052:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003056:	460b      	mov	r3, r1
 8003058:	4313      	orrs	r3, r2
 800305a:	d055      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800305c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003060:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003064:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003068:	d033      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800306a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800306e:	d82c      	bhi.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003070:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003074:	d02f      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800307a:	d826      	bhi.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800307c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003080:	d02b      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003082:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003086:	d820      	bhi.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003088:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800308c:	d012      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800308e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003092:	d81a      	bhi.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003094:	2b00      	cmp	r3, #0
 8003096:	d022      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003098:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800309c:	d115      	bne.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800309e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030a2:	3308      	adds	r3, #8
 80030a4:	2100      	movs	r1, #0
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 fdee 	bl	8003c88 <RCCEx_PLL2_Config>
 80030ac:	4603      	mov	r3, r0
 80030ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80030b2:	e015      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80030b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030b8:	3328      	adds	r3, #40	; 0x28
 80030ba:	2102      	movs	r1, #2
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 fe95 	bl	8003dec <RCCEx_PLL3_Config>
 80030c2:	4603      	mov	r3, r0
 80030c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80030c8:	e00a      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80030d0:	e006      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80030d2:	bf00      	nop
 80030d4:	e004      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80030d6:	bf00      	nop
 80030d8:	e002      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80030da:	bf00      	nop
 80030dc:	e000      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80030de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10b      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80030e8:	4ba1      	ldr	r3, [pc, #644]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80030ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ec:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80030f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80030f8:	4a9d      	ldr	r2, [pc, #628]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80030fa:	430b      	orrs	r3, r1
 80030fc:	6593      	str	r3, [r2, #88]	; 0x58
 80030fe:	e003      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003100:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003104:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003108:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800310c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003110:	f002 0308 	and.w	r3, r2, #8
 8003114:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003118:	2300      	movs	r3, #0
 800311a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800311e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003122:	460b      	mov	r3, r1
 8003124:	4313      	orrs	r3, r2
 8003126:	d01e      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003128:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800312c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003134:	d10c      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003136:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800313a:	3328      	adds	r3, #40	; 0x28
 800313c:	2102      	movs	r1, #2
 800313e:	4618      	mov	r0, r3
 8003140:	f000 fe54 	bl	8003dec <RCCEx_PLL3_Config>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003150:	4b87      	ldr	r3, [pc, #540]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003154:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003158:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800315c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003160:	4a83      	ldr	r2, [pc, #524]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003162:	430b      	orrs	r3, r1
 8003164:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003166:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800316a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316e:	f002 0310 	and.w	r3, r2, #16
 8003172:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003176:	2300      	movs	r3, #0
 8003178:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800317c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003180:	460b      	mov	r3, r1
 8003182:	4313      	orrs	r3, r2
 8003184:	d01e      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003186:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800318a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800318e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003192:	d10c      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003194:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003198:	3328      	adds	r3, #40	; 0x28
 800319a:	2102      	movs	r1, #2
 800319c:	4618      	mov	r0, r3
 800319e:	f000 fe25 	bl	8003dec <RCCEx_PLL3_Config>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031ae:	4b70      	ldr	r3, [pc, #448]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80031be:	4a6c      	ldr	r2, [pc, #432]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031c0:	430b      	orrs	r3, r1
 80031c2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031cc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80031d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031d4:	2300      	movs	r3, #0
 80031d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031da:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80031de:	460b      	mov	r3, r1
 80031e0:	4313      	orrs	r3, r2
 80031e2:	d03e      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80031e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80031ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031f0:	d022      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80031f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031f6:	d81b      	bhi.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80031fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003200:	d00b      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8003202:	e015      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003204:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003208:	3308      	adds	r3, #8
 800320a:	2100      	movs	r1, #0
 800320c:	4618      	mov	r0, r3
 800320e:	f000 fd3b 	bl	8003c88 <RCCEx_PLL2_Config>
 8003212:	4603      	mov	r3, r0
 8003214:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003218:	e00f      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800321a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800321e:	3328      	adds	r3, #40	; 0x28
 8003220:	2102      	movs	r1, #2
 8003222:	4618      	mov	r0, r3
 8003224:	f000 fde2 	bl	8003dec <RCCEx_PLL3_Config>
 8003228:	4603      	mov	r3, r0
 800322a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800322e:	e004      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003236:	e000      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003238:	bf00      	nop
    }

    if (ret == HAL_OK)
 800323a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10b      	bne.n	800325a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003242:	4b4b      	ldr	r3, [pc, #300]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003246:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800324a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800324e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003252:	4a47      	ldr	r2, [pc, #284]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003254:	430b      	orrs	r3, r1
 8003256:	6593      	str	r3, [r2, #88]	; 0x58
 8003258:	e003      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800325a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800325e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003262:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800326e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003270:	2300      	movs	r3, #0
 8003272:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003274:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003278:	460b      	mov	r3, r1
 800327a:	4313      	orrs	r3, r2
 800327c:	d03b      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800327e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003286:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800328a:	d01f      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800328c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003290:	d818      	bhi.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003292:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003296:	d003      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8003298:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800329c:	d007      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800329e:	e011      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032a0:	4b33      	ldr	r3, [pc, #204]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a4:	4a32      	ldr	r2, [pc, #200]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80032ac:	e00f      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032b2:	3328      	adds	r3, #40	; 0x28
 80032b4:	2101      	movs	r1, #1
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 fd98 	bl	8003dec <RCCEx_PLL3_Config>
 80032bc:	4603      	mov	r3, r0
 80032be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80032c2:	e004      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80032ca:	e000      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80032cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10b      	bne.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032d6:	4b26      	ldr	r3, [pc, #152]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032da:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80032de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e6:	4a22      	ldr	r2, [pc, #136]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032e8:	430b      	orrs	r3, r1
 80032ea:	6553      	str	r3, [r2, #84]	; 0x54
 80032ec:	e003      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032f2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80032f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fe:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003302:	673b      	str	r3, [r7, #112]	; 0x70
 8003304:	2300      	movs	r3, #0
 8003306:	677b      	str	r3, [r7, #116]	; 0x74
 8003308:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800330c:	460b      	mov	r3, r1
 800330e:	4313      	orrs	r3, r2
 8003310:	d034      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003312:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800331c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003320:	d007      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8003322:	e011      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003324:	4b12      	ldr	r3, [pc, #72]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003328:	4a11      	ldr	r2, [pc, #68]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800332a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800332e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003330:	e00e      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003332:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003336:	3308      	adds	r3, #8
 8003338:	2102      	movs	r1, #2
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fca4 	bl	8003c88 <RCCEx_PLL2_Config>
 8003340:	4603      	mov	r3, r0
 8003342:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003346:	e003      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800334e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003350:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10d      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003358:	4b05      	ldr	r3, [pc, #20]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800335a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003360:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003366:	4a02      	ldr	r2, [pc, #8]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003368:	430b      	orrs	r3, r1
 800336a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800336c:	e006      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800336e:	bf00      	nop
 8003370:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003374:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003378:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800337c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003384:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003388:	66bb      	str	r3, [r7, #104]	; 0x68
 800338a:	2300      	movs	r3, #0
 800338c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800338e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003392:	460b      	mov	r3, r1
 8003394:	4313      	orrs	r3, r2
 8003396:	d00c      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003398:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800339c:	3328      	adds	r3, #40	; 0x28
 800339e:	2102      	movs	r1, #2
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 fd23 	bl	8003dec <RCCEx_PLL3_Config>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d002      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80033b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ba:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80033be:	663b      	str	r3, [r7, #96]	; 0x60
 80033c0:	2300      	movs	r3, #0
 80033c2:	667b      	str	r3, [r7, #100]	; 0x64
 80033c4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80033c8:	460b      	mov	r3, r1
 80033ca:	4313      	orrs	r3, r2
 80033cc:	d038      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80033ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033da:	d018      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80033dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033e0:	d811      	bhi.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80033e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e6:	d014      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80033e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ec:	d80b      	bhi.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d011      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80033f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033f6:	d106      	bne.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033f8:	4bc3      	ldr	r3, [pc, #780]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80033fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fc:	4ac2      	ldr	r2, [pc, #776]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80033fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003402:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003404:	e008      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800340c:	e004      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800340e:	bf00      	nop
 8003410:	e002      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003412:	bf00      	nop
 8003414:	e000      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003416:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003418:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10b      	bne.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003420:	4bb9      	ldr	r3, [pc, #740]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003424:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003428:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800342c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003430:	4ab5      	ldr	r2, [pc, #724]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003432:	430b      	orrs	r3, r1
 8003434:	6553      	str	r3, [r2, #84]	; 0x54
 8003436:	e003      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003438:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800343c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003440:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003448:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800344c:	65bb      	str	r3, [r7, #88]	; 0x58
 800344e:	2300      	movs	r3, #0
 8003450:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003452:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003456:	460b      	mov	r3, r1
 8003458:	4313      	orrs	r3, r2
 800345a:	d009      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800345c:	4baa      	ldr	r3, [pc, #680]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800345e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003460:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003464:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800346a:	4aa7      	ldr	r2, [pc, #668]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800346c:	430b      	orrs	r3, r1
 800346e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003470:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003478:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800347c:	653b      	str	r3, [r7, #80]	; 0x50
 800347e:	2300      	movs	r3, #0
 8003480:	657b      	str	r3, [r7, #84]	; 0x54
 8003482:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003486:	460b      	mov	r3, r1
 8003488:	4313      	orrs	r3, r2
 800348a:	d009      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800348c:	4b9e      	ldr	r3, [pc, #632]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800348e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003490:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003494:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349a:	4a9b      	ldr	r2, [pc, #620]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800349c:	430b      	orrs	r3, r1
 800349e:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80034a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80034ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80034ae:	2300      	movs	r3, #0
 80034b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034b2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80034b6:	460b      	mov	r3, r1
 80034b8:	4313      	orrs	r3, r2
 80034ba:	d009      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80034bc:	4b92      	ldr	r3, [pc, #584]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c0:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 80034c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ca:	4a8f      	ldr	r2, [pc, #572]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034cc:	430b      	orrs	r3, r1
 80034ce:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80034d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80034dc:	643b      	str	r3, [r7, #64]	; 0x40
 80034de:	2300      	movs	r3, #0
 80034e0:	647b      	str	r3, [r7, #68]	; 0x44
 80034e2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80034e6:	460b      	mov	r3, r1
 80034e8:	4313      	orrs	r3, r2
 80034ea:	d00e      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80034ec:	4b86      	ldr	r3, [pc, #536]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	4a85      	ldr	r2, [pc, #532]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80034f6:	6113      	str	r3, [r2, #16]
 80034f8:	4b83      	ldr	r3, [pc, #524]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034fa:	6919      	ldr	r1, [r3, #16]
 80034fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003500:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003504:	4a80      	ldr	r2, [pc, #512]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003506:	430b      	orrs	r3, r1
 8003508:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800350a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800350e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003512:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003516:	63bb      	str	r3, [r7, #56]	; 0x38
 8003518:	2300      	movs	r3, #0
 800351a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800351c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003520:	460b      	mov	r3, r1
 8003522:	4313      	orrs	r3, r2
 8003524:	d009      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003526:	4b78      	ldr	r3, [pc, #480]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800352a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800352e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003534:	4a74      	ldr	r2, [pc, #464]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003536:	430b      	orrs	r3, r1
 8003538:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800353a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800353e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003542:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003546:	633b      	str	r3, [r7, #48]	; 0x30
 8003548:	2300      	movs	r3, #0
 800354a:	637b      	str	r3, [r7, #52]	; 0x34
 800354c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003550:	460b      	mov	r3, r1
 8003552:	4313      	orrs	r3, r2
 8003554:	d00a      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003556:	4b6c      	ldr	r3, [pc, #432]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800355e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003566:	4a68      	ldr	r2, [pc, #416]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003568:	430b      	orrs	r3, r1
 800356a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800356c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003574:	2100      	movs	r1, #0
 8003576:	62b9      	str	r1, [r7, #40]	; 0x28
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800357e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003582:	460b      	mov	r3, r1
 8003584:	4313      	orrs	r3, r2
 8003586:	d011      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003588:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800358c:	3308      	adds	r3, #8
 800358e:	2100      	movs	r1, #0
 8003590:	4618      	mov	r0, r3
 8003592:	f000 fb79 	bl	8003c88 <RCCEx_PLL2_Config>
 8003596:	4603      	mov	r3, r0
 8003598:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800359c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d003      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035a8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80035ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b4:	2100      	movs	r1, #0
 80035b6:	6239      	str	r1, [r7, #32]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	627b      	str	r3, [r7, #36]	; 0x24
 80035be:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80035c2:	460b      	mov	r3, r1
 80035c4:	4313      	orrs	r3, r2
 80035c6:	d011      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035cc:	3308      	adds	r3, #8
 80035ce:	2101      	movs	r1, #1
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 fb59 	bl	8003c88 <RCCEx_PLL2_Config>
 80035d6:	4603      	mov	r3, r0
 80035d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80035dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035e8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80035ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f4:	2100      	movs	r1, #0
 80035f6:	61b9      	str	r1, [r7, #24]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	61fb      	str	r3, [r7, #28]
 80035fe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003602:	460b      	mov	r3, r1
 8003604:	4313      	orrs	r3, r2
 8003606:	d011      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003608:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800360c:	3308      	adds	r3, #8
 800360e:	2102      	movs	r1, #2
 8003610:	4618      	mov	r0, r3
 8003612:	f000 fb39 	bl	8003c88 <RCCEx_PLL2_Config>
 8003616:	4603      	mov	r3, r0
 8003618:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800361c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003624:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003628:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800362c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003634:	2100      	movs	r1, #0
 8003636:	6139      	str	r1, [r7, #16]
 8003638:	f003 0308 	and.w	r3, r3, #8
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003642:	460b      	mov	r3, r1
 8003644:	4313      	orrs	r3, r2
 8003646:	d011      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003648:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800364c:	3328      	adds	r3, #40	; 0x28
 800364e:	2100      	movs	r1, #0
 8003650:	4618      	mov	r0, r3
 8003652:	f000 fbcb 	bl	8003dec <RCCEx_PLL3_Config>
 8003656:	4603      	mov	r3, r0
 8003658:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800365c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003664:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003668:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800366c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003674:	2100      	movs	r1, #0
 8003676:	60b9      	str	r1, [r7, #8]
 8003678:	f003 0310 	and.w	r3, r3, #16
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003682:	460b      	mov	r3, r1
 8003684:	4313      	orrs	r3, r2
 8003686:	d011      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003688:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800368c:	3328      	adds	r3, #40	; 0x28
 800368e:	2101      	movs	r1, #1
 8003690:	4618      	mov	r0, r3
 8003692:	f000 fbab 	bl	8003dec <RCCEx_PLL3_Config>
 8003696:	4603      	mov	r3, r0
 8003698:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800369c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036a8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80036ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b4:	2100      	movs	r1, #0
 80036b6:	6039      	str	r1, [r7, #0]
 80036b8:	f003 0320 	and.w	r3, r3, #32
 80036bc:	607b      	str	r3, [r7, #4]
 80036be:	e9d7 1200 	ldrd	r1, r2, [r7]
 80036c2:	460b      	mov	r3, r1
 80036c4:	4313      	orrs	r3, r2
 80036c6:	d011      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036cc:	3328      	adds	r3, #40	; 0x28
 80036ce:	2102      	movs	r1, #2
 80036d0:	4618      	mov	r0, r3
 80036d2:	f000 fb8b 	bl	8003dec <RCCEx_PLL3_Config>
 80036d6:	4603      	mov	r3, r0
 80036d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80036dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d003      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036e8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80036ec:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80036f4:	2300      	movs	r3, #0
 80036f6:	e000      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003700:	46bd      	mov	sp, r7
 8003702:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003706:	bf00      	nop
 8003708:	58024400 	.word	0x58024400

0800370c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003710:	f7fe fde2 	bl	80022d8 <HAL_RCC_GetHCLKFreq>
 8003714:	4602      	mov	r2, r0
 8003716:	4b06      	ldr	r3, [pc, #24]	; (8003730 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	091b      	lsrs	r3, r3, #4
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	4904      	ldr	r1, [pc, #16]	; (8003734 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003722:	5ccb      	ldrb	r3, [r1, r3]
 8003724:	f003 031f 	and.w	r3, r3, #31
 8003728:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800372c:	4618      	mov	r0, r3
 800372e:	bd80      	pop	{r7, pc}
 8003730:	58024400 	.word	0x58024400
 8003734:	08005374 	.word	0x08005374

08003738 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003738:	b480      	push	{r7}
 800373a:	b089      	sub	sp, #36	; 0x24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003740:	4ba1      	ldr	r3, [pc, #644]	; (80039c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003744:	f003 0303 	and.w	r3, r3, #3
 8003748:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800374a:	4b9f      	ldr	r3, [pc, #636]	; (80039c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800374c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374e:	0b1b      	lsrs	r3, r3, #12
 8003750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003754:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003756:	4b9c      	ldr	r3, [pc, #624]	; (80039c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375a:	091b      	lsrs	r3, r3, #4
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003762:	4b99      	ldr	r3, [pc, #612]	; (80039c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003766:	08db      	lsrs	r3, r3, #3
 8003768:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	fb02 f303 	mul.w	r3, r2, r3
 8003772:	ee07 3a90 	vmov	s15, r3
 8003776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800377a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 8111 	beq.w	80039a8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	2b02      	cmp	r3, #2
 800378a:	f000 8083 	beq.w	8003894 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	2b02      	cmp	r3, #2
 8003792:	f200 80a1 	bhi.w	80038d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d056      	beq.n	8003850 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80037a2:	e099      	b.n	80038d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037a4:	4b88      	ldr	r3, [pc, #544]	; (80039c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0320 	and.w	r3, r3, #32
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d02d      	beq.n	800380c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80037b0:	4b85      	ldr	r3, [pc, #532]	; (80039c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	08db      	lsrs	r3, r3, #3
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	4a84      	ldr	r2, [pc, #528]	; (80039cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80037bc:	fa22 f303 	lsr.w	r3, r2, r3
 80037c0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	ee07 3a90 	vmov	s15, r3
 80037c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	ee07 3a90 	vmov	s15, r3
 80037d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037da:	4b7b      	ldr	r3, [pc, #492]	; (80039c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037e2:	ee07 3a90 	vmov	s15, r3
 80037e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80037ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80039d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80037f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003806:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800380a:	e087      	b.n	800391c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	ee07 3a90 	vmov	s15, r3
 8003812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003816:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80039d4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800381a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800381e:	4b6a      	ldr	r3, [pc, #424]	; (80039c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003826:	ee07 3a90 	vmov	s15, r3
 800382a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800382e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003832:	eddf 5a67 	vldr	s11, [pc, #412]	; 80039d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800383a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800383e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800384a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800384e:	e065      	b.n	800391c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	ee07 3a90 	vmov	s15, r3
 8003856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800385a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80039d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800385e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003862:	4b59      	ldr	r3, [pc, #356]	; (80039c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800386a:	ee07 3a90 	vmov	s15, r3
 800386e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003872:	ed97 6a03 	vldr	s12, [r7, #12]
 8003876:	eddf 5a56 	vldr	s11, [pc, #344]	; 80039d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800387a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800387e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800388a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800388e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003892:	e043      	b.n	800391c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	ee07 3a90 	vmov	s15, r3
 800389a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800389e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80039dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80038a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038a6:	4b48      	ldr	r3, [pc, #288]	; (80039c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ae:	ee07 3a90 	vmov	s15, r3
 80038b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80038ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80039d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038d6:	e021      	b.n	800391c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	ee07 3a90 	vmov	s15, r3
 80038de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80039d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80038e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ea:	4b37      	ldr	r3, [pc, #220]	; (80039c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038f2:	ee07 3a90 	vmov	s15, r3
 80038f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80038fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80039d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800390a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800390e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003916:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800391a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800391c:	4b2a      	ldr	r3, [pc, #168]	; (80039c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800391e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003920:	0a5b      	lsrs	r3, r3, #9
 8003922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003926:	ee07 3a90 	vmov	s15, r3
 800392a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800392e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003932:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003936:	edd7 6a07 	vldr	s13, [r7, #28]
 800393a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800393e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003942:	ee17 2a90 	vmov	r2, s15
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800394a:	4b1f      	ldr	r3, [pc, #124]	; (80039c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800394c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394e:	0c1b      	lsrs	r3, r3, #16
 8003950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003954:	ee07 3a90 	vmov	s15, r3
 8003958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800395c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003960:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003964:	edd7 6a07 	vldr	s13, [r7, #28]
 8003968:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800396c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003970:	ee17 2a90 	vmov	r2, s15
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003978:	4b13      	ldr	r3, [pc, #76]	; (80039c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800397a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397c:	0e1b      	lsrs	r3, r3, #24
 800397e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003982:	ee07 3a90 	vmov	s15, r3
 8003986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800398a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800398e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003992:	edd7 6a07 	vldr	s13, [r7, #28]
 8003996:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800399a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800399e:	ee17 2a90 	vmov	r2, s15
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80039a6:	e008      	b.n	80039ba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	609a      	str	r2, [r3, #8]
}
 80039ba:	bf00      	nop
 80039bc:	3724      	adds	r7, #36	; 0x24
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	58024400 	.word	0x58024400
 80039cc:	03d09000 	.word	0x03d09000
 80039d0:	46000000 	.word	0x46000000
 80039d4:	4c742400 	.word	0x4c742400
 80039d8:	4a742400 	.word	0x4a742400
 80039dc:	4af42400 	.word	0x4af42400

080039e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b089      	sub	sp, #36	; 0x24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039e8:	4ba1      	ldr	r3, [pc, #644]	; (8003c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ec:	f003 0303 	and.w	r3, r3, #3
 80039f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80039f2:	4b9f      	ldr	r3, [pc, #636]	; (8003c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f6:	0d1b      	lsrs	r3, r3, #20
 80039f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80039fe:	4b9c      	ldr	r3, [pc, #624]	; (8003c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a02:	0a1b      	lsrs	r3, r3, #8
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003a0a:	4b99      	ldr	r3, [pc, #612]	; (8003c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0e:	08db      	lsrs	r3, r3, #3
 8003a10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	fb02 f303 	mul.w	r3, r2, r3
 8003a1a:	ee07 3a90 	vmov	s15, r3
 8003a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 8111 	beq.w	8003c50 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	f000 8083 	beq.w	8003b3c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	f200 80a1 	bhi.w	8003b80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d056      	beq.n	8003af8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003a4a:	e099      	b.n	8003b80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a4c:	4b88      	ldr	r3, [pc, #544]	; (8003c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0320 	and.w	r3, r3, #32
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d02d      	beq.n	8003ab4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a58:	4b85      	ldr	r3, [pc, #532]	; (8003c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	08db      	lsrs	r3, r3, #3
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	4a84      	ldr	r2, [pc, #528]	; (8003c74 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003a64:	fa22 f303 	lsr.w	r3, r2, r3
 8003a68:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	ee07 3a90 	vmov	s15, r3
 8003a70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	ee07 3a90 	vmov	s15, r3
 8003a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a82:	4b7b      	ldr	r3, [pc, #492]	; (8003c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a8a:	ee07 3a90 	vmov	s15, r3
 8003a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a92:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a96:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003c78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003ab2:	e087      	b.n	8003bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	ee07 3a90 	vmov	s15, r3
 8003aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003abe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ac6:	4b6a      	ldr	r3, [pc, #424]	; (8003c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ace:	ee07 3a90 	vmov	s15, r3
 8003ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ad6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ada:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003c78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003af2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003af6:	e065      	b.n	8003bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	ee07 3a90 	vmov	s15, r3
 8003afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b02:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003c80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b0a:	4b59      	ldr	r3, [pc, #356]	; (8003c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b12:	ee07 3a90 	vmov	s15, r3
 8003b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b1e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003c78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b3a:	e043      	b.n	8003bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	ee07 3a90 	vmov	s15, r3
 8003b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b46:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003c84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b4e:	4b48      	ldr	r3, [pc, #288]	; (8003c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b56:	ee07 3a90 	vmov	s15, r3
 8003b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b62:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003c78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b7e:	e021      	b.n	8003bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	ee07 3a90 	vmov	s15, r3
 8003b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b8a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003c80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b92:	4b37      	ldr	r3, [pc, #220]	; (8003c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b9a:	ee07 3a90 	vmov	s15, r3
 8003b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ba2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ba6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003c78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bc2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003bc4:	4b2a      	ldr	r3, [pc, #168]	; (8003c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	0a5b      	lsrs	r3, r3, #9
 8003bca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bce:	ee07 3a90 	vmov	s15, r3
 8003bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bde:	edd7 6a07 	vldr	s13, [r7, #28]
 8003be2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003be6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bea:	ee17 2a90 	vmov	r2, s15
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003bf2:	4b1f      	ldr	r3, [pc, #124]	; (8003c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	0c1b      	lsrs	r3, r3, #16
 8003bf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bfc:	ee07 3a90 	vmov	s15, r3
 8003c00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c18:	ee17 2a90 	vmov	r2, s15
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003c20:	4b13      	ldr	r3, [pc, #76]	; (8003c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c24:	0e1b      	lsrs	r3, r3, #24
 8003c26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c2a:	ee07 3a90 	vmov	s15, r3
 8003c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c46:	ee17 2a90 	vmov	r2, s15
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003c4e:	e008      	b.n	8003c62 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	609a      	str	r2, [r3, #8]
}
 8003c62:	bf00      	nop
 8003c64:	3724      	adds	r7, #36	; 0x24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	58024400 	.word	0x58024400
 8003c74:	03d09000 	.word	0x03d09000
 8003c78:	46000000 	.word	0x46000000
 8003c7c:	4c742400 	.word	0x4c742400
 8003c80:	4a742400 	.word	0x4a742400
 8003c84:	4af42400 	.word	0x4af42400

08003c88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c96:	4b53      	ldr	r3, [pc, #332]	; (8003de4 <RCCEx_PLL2_Config+0x15c>)
 8003c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	d101      	bne.n	8003ca6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e099      	b.n	8003dda <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003ca6:	4b4f      	ldr	r3, [pc, #316]	; (8003de4 <RCCEx_PLL2_Config+0x15c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a4e      	ldr	r2, [pc, #312]	; (8003de4 <RCCEx_PLL2_Config+0x15c>)
 8003cac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cb2:	f7fd f881 	bl	8000db8 <HAL_GetTick>
 8003cb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003cb8:	e008      	b.n	8003ccc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003cba:	f7fd f87d 	bl	8000db8 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e086      	b.n	8003dda <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003ccc:	4b45      	ldr	r3, [pc, #276]	; (8003de4 <RCCEx_PLL2_Config+0x15c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1f0      	bne.n	8003cba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003cd8:	4b42      	ldr	r3, [pc, #264]	; (8003de4 <RCCEx_PLL2_Config+0x15c>)
 8003cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cdc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	031b      	lsls	r3, r3, #12
 8003ce6:	493f      	ldr	r1, [pc, #252]	; (8003de4 <RCCEx_PLL2_Config+0x15c>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	628b      	str	r3, [r1, #40]	; 0x28
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	025b      	lsls	r3, r3, #9
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	431a      	orrs	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	3b01      	subs	r3, #1
 8003d08:	041b      	lsls	r3, r3, #16
 8003d0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	3b01      	subs	r3, #1
 8003d16:	061b      	lsls	r3, r3, #24
 8003d18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d1c:	4931      	ldr	r1, [pc, #196]	; (8003de4 <RCCEx_PLL2_Config+0x15c>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003d22:	4b30      	ldr	r3, [pc, #192]	; (8003de4 <RCCEx_PLL2_Config+0x15c>)
 8003d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	492d      	ldr	r1, [pc, #180]	; (8003de4 <RCCEx_PLL2_Config+0x15c>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003d34:	4b2b      	ldr	r3, [pc, #172]	; (8003de4 <RCCEx_PLL2_Config+0x15c>)
 8003d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d38:	f023 0220 	bic.w	r2, r3, #32
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	4928      	ldr	r1, [pc, #160]	; (8003de4 <RCCEx_PLL2_Config+0x15c>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003d46:	4b27      	ldr	r3, [pc, #156]	; (8003de4 <RCCEx_PLL2_Config+0x15c>)
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4a:	4a26      	ldr	r2, [pc, #152]	; (8003de4 <RCCEx_PLL2_Config+0x15c>)
 8003d4c:	f023 0310 	bic.w	r3, r3, #16
 8003d50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003d52:	4b24      	ldr	r3, [pc, #144]	; (8003de4 <RCCEx_PLL2_Config+0x15c>)
 8003d54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d56:	4b24      	ldr	r3, [pc, #144]	; (8003de8 <RCCEx_PLL2_Config+0x160>)
 8003d58:	4013      	ands	r3, r2
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	69d2      	ldr	r2, [r2, #28]
 8003d5e:	00d2      	lsls	r2, r2, #3
 8003d60:	4920      	ldr	r1, [pc, #128]	; (8003de4 <RCCEx_PLL2_Config+0x15c>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003d66:	4b1f      	ldr	r3, [pc, #124]	; (8003de4 <RCCEx_PLL2_Config+0x15c>)
 8003d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6a:	4a1e      	ldr	r2, [pc, #120]	; (8003de4 <RCCEx_PLL2_Config+0x15c>)
 8003d6c:	f043 0310 	orr.w	r3, r3, #16
 8003d70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d106      	bne.n	8003d86 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003d78:	4b1a      	ldr	r3, [pc, #104]	; (8003de4 <RCCEx_PLL2_Config+0x15c>)
 8003d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7c:	4a19      	ldr	r2, [pc, #100]	; (8003de4 <RCCEx_PLL2_Config+0x15c>)
 8003d7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d84:	e00f      	b.n	8003da6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d106      	bne.n	8003d9a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003d8c:	4b15      	ldr	r3, [pc, #84]	; (8003de4 <RCCEx_PLL2_Config+0x15c>)
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	4a14      	ldr	r2, [pc, #80]	; (8003de4 <RCCEx_PLL2_Config+0x15c>)
 8003d92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d98:	e005      	b.n	8003da6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003d9a:	4b12      	ldr	r3, [pc, #72]	; (8003de4 <RCCEx_PLL2_Config+0x15c>)
 8003d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9e:	4a11      	ldr	r2, [pc, #68]	; (8003de4 <RCCEx_PLL2_Config+0x15c>)
 8003da0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003da4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003da6:	4b0f      	ldr	r3, [pc, #60]	; (8003de4 <RCCEx_PLL2_Config+0x15c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a0e      	ldr	r2, [pc, #56]	; (8003de4 <RCCEx_PLL2_Config+0x15c>)
 8003dac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003db0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003db2:	f7fd f801 	bl	8000db8 <HAL_GetTick>
 8003db6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003db8:	e008      	b.n	8003dcc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003dba:	f7fc fffd 	bl	8000db8 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e006      	b.n	8003dda <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003dcc:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <RCCEx_PLL2_Config+0x15c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0f0      	beq.n	8003dba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	58024400 	.word	0x58024400
 8003de8:	ffff0007 	.word	0xffff0007

08003dec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003dfa:	4b53      	ldr	r3, [pc, #332]	; (8003f48 <RCCEx_PLL3_Config+0x15c>)
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	2b03      	cmp	r3, #3
 8003e04:	d101      	bne.n	8003e0a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e099      	b.n	8003f3e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003e0a:	4b4f      	ldr	r3, [pc, #316]	; (8003f48 <RCCEx_PLL3_Config+0x15c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a4e      	ldr	r2, [pc, #312]	; (8003f48 <RCCEx_PLL3_Config+0x15c>)
 8003e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e16:	f7fc ffcf 	bl	8000db8 <HAL_GetTick>
 8003e1a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e1c:	e008      	b.n	8003e30 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003e1e:	f7fc ffcb 	bl	8000db8 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d901      	bls.n	8003e30 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e086      	b.n	8003f3e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e30:	4b45      	ldr	r3, [pc, #276]	; (8003f48 <RCCEx_PLL3_Config+0x15c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1f0      	bne.n	8003e1e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003e3c:	4b42      	ldr	r3, [pc, #264]	; (8003f48 <RCCEx_PLL3_Config+0x15c>)
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e40:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	051b      	lsls	r3, r3, #20
 8003e4a:	493f      	ldr	r1, [pc, #252]	; (8003f48 <RCCEx_PLL3_Config+0x15c>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	628b      	str	r3, [r1, #40]	; 0x28
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	3b01      	subs	r3, #1
 8003e56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	025b      	lsls	r3, r3, #9
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	431a      	orrs	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	041b      	lsls	r3, r3, #16
 8003e6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e72:	431a      	orrs	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	061b      	lsls	r3, r3, #24
 8003e7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003e80:	4931      	ldr	r1, [pc, #196]	; (8003f48 <RCCEx_PLL3_Config+0x15c>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003e86:	4b30      	ldr	r3, [pc, #192]	; (8003f48 <RCCEx_PLL3_Config+0x15c>)
 8003e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	492d      	ldr	r1, [pc, #180]	; (8003f48 <RCCEx_PLL3_Config+0x15c>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003e98:	4b2b      	ldr	r3, [pc, #172]	; (8003f48 <RCCEx_PLL3_Config+0x15c>)
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	4928      	ldr	r1, [pc, #160]	; (8003f48 <RCCEx_PLL3_Config+0x15c>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003eaa:	4b27      	ldr	r3, [pc, #156]	; (8003f48 <RCCEx_PLL3_Config+0x15c>)
 8003eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eae:	4a26      	ldr	r2, [pc, #152]	; (8003f48 <RCCEx_PLL3_Config+0x15c>)
 8003eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003eb6:	4b24      	ldr	r3, [pc, #144]	; (8003f48 <RCCEx_PLL3_Config+0x15c>)
 8003eb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eba:	4b24      	ldr	r3, [pc, #144]	; (8003f4c <RCCEx_PLL3_Config+0x160>)
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	69d2      	ldr	r2, [r2, #28]
 8003ec2:	00d2      	lsls	r2, r2, #3
 8003ec4:	4920      	ldr	r1, [pc, #128]	; (8003f48 <RCCEx_PLL3_Config+0x15c>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003eca:	4b1f      	ldr	r3, [pc, #124]	; (8003f48 <RCCEx_PLL3_Config+0x15c>)
 8003ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ece:	4a1e      	ldr	r2, [pc, #120]	; (8003f48 <RCCEx_PLL3_Config+0x15c>)
 8003ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d106      	bne.n	8003eea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003edc:	4b1a      	ldr	r3, [pc, #104]	; (8003f48 <RCCEx_PLL3_Config+0x15c>)
 8003ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee0:	4a19      	ldr	r2, [pc, #100]	; (8003f48 <RCCEx_PLL3_Config+0x15c>)
 8003ee2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ee6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ee8:	e00f      	b.n	8003f0a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d106      	bne.n	8003efe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003ef0:	4b15      	ldr	r3, [pc, #84]	; (8003f48 <RCCEx_PLL3_Config+0x15c>)
 8003ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef4:	4a14      	ldr	r2, [pc, #80]	; (8003f48 <RCCEx_PLL3_Config+0x15c>)
 8003ef6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003efa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003efc:	e005      	b.n	8003f0a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003efe:	4b12      	ldr	r3, [pc, #72]	; (8003f48 <RCCEx_PLL3_Config+0x15c>)
 8003f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f02:	4a11      	ldr	r2, [pc, #68]	; (8003f48 <RCCEx_PLL3_Config+0x15c>)
 8003f04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003f0a:	4b0f      	ldr	r3, [pc, #60]	; (8003f48 <RCCEx_PLL3_Config+0x15c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a0e      	ldr	r2, [pc, #56]	; (8003f48 <RCCEx_PLL3_Config+0x15c>)
 8003f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f16:	f7fc ff4f 	bl	8000db8 <HAL_GetTick>
 8003f1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f1c:	e008      	b.n	8003f30 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003f1e:	f7fc ff4b 	bl	8000db8 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e006      	b.n	8003f3e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f30:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <RCCEx_PLL3_Config+0x15c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0f0      	beq.n	8003f1e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	58024400 	.word	0x58024400
 8003f4c:	ffff0007 	.word	0xffff0007

08003f50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e042      	b.n	8003fe8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d106      	bne.n	8003f7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f7fc fd63 	bl	8000a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2224      	movs	r2, #36	; 0x24
 8003f7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 0201 	bic.w	r2, r2, #1
 8003f90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f82c 	bl	8003ff0 <UART_SetConfig>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d101      	bne.n	8003fa2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e022      	b.n	8003fe8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 fe8c 	bl	8004cc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689a      	ldr	r2, [r3, #8]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0201 	orr.w	r2, r2, #1
 8003fde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 ff13 	bl	8004e0c <UART_CheckIdleState>
 8003fe6:	4603      	mov	r3, r0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ff4:	b092      	sub	sp, #72	; 0x48
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	431a      	orrs	r2, r3
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	431a      	orrs	r2, r3
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	4313      	orrs	r3, r2
 8004016:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	4bbe      	ldr	r3, [pc, #760]	; (8004318 <UART_SetConfig+0x328>)
 8004020:	4013      	ands	r3, r2
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	6812      	ldr	r2, [r2, #0]
 8004026:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004028:	430b      	orrs	r3, r1
 800402a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	68da      	ldr	r2, [r3, #12]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4ab3      	ldr	r2, [pc, #716]	; (800431c <UART_SetConfig+0x32c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d004      	beq.n	800405c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004058:	4313      	orrs	r3, r2
 800405a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	689a      	ldr	r2, [r3, #8]
 8004062:	4baf      	ldr	r3, [pc, #700]	; (8004320 <UART_SetConfig+0x330>)
 8004064:	4013      	ands	r3, r2
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	6812      	ldr	r2, [r2, #0]
 800406a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800406c:	430b      	orrs	r3, r1
 800406e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004076:	f023 010f 	bic.w	r1, r3, #15
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4aa6      	ldr	r2, [pc, #664]	; (8004324 <UART_SetConfig+0x334>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d177      	bne.n	8004180 <UART_SetConfig+0x190>
 8004090:	4ba5      	ldr	r3, [pc, #660]	; (8004328 <UART_SetConfig+0x338>)
 8004092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004094:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004098:	2b28      	cmp	r3, #40	; 0x28
 800409a:	d86d      	bhi.n	8004178 <UART_SetConfig+0x188>
 800409c:	a201      	add	r2, pc, #4	; (adr r2, 80040a4 <UART_SetConfig+0xb4>)
 800409e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a2:	bf00      	nop
 80040a4:	08004149 	.word	0x08004149
 80040a8:	08004179 	.word	0x08004179
 80040ac:	08004179 	.word	0x08004179
 80040b0:	08004179 	.word	0x08004179
 80040b4:	08004179 	.word	0x08004179
 80040b8:	08004179 	.word	0x08004179
 80040bc:	08004179 	.word	0x08004179
 80040c0:	08004179 	.word	0x08004179
 80040c4:	08004151 	.word	0x08004151
 80040c8:	08004179 	.word	0x08004179
 80040cc:	08004179 	.word	0x08004179
 80040d0:	08004179 	.word	0x08004179
 80040d4:	08004179 	.word	0x08004179
 80040d8:	08004179 	.word	0x08004179
 80040dc:	08004179 	.word	0x08004179
 80040e0:	08004179 	.word	0x08004179
 80040e4:	08004159 	.word	0x08004159
 80040e8:	08004179 	.word	0x08004179
 80040ec:	08004179 	.word	0x08004179
 80040f0:	08004179 	.word	0x08004179
 80040f4:	08004179 	.word	0x08004179
 80040f8:	08004179 	.word	0x08004179
 80040fc:	08004179 	.word	0x08004179
 8004100:	08004179 	.word	0x08004179
 8004104:	08004161 	.word	0x08004161
 8004108:	08004179 	.word	0x08004179
 800410c:	08004179 	.word	0x08004179
 8004110:	08004179 	.word	0x08004179
 8004114:	08004179 	.word	0x08004179
 8004118:	08004179 	.word	0x08004179
 800411c:	08004179 	.word	0x08004179
 8004120:	08004179 	.word	0x08004179
 8004124:	08004169 	.word	0x08004169
 8004128:	08004179 	.word	0x08004179
 800412c:	08004179 	.word	0x08004179
 8004130:	08004179 	.word	0x08004179
 8004134:	08004179 	.word	0x08004179
 8004138:	08004179 	.word	0x08004179
 800413c:	08004179 	.word	0x08004179
 8004140:	08004179 	.word	0x08004179
 8004144:	08004171 	.word	0x08004171
 8004148:	2301      	movs	r3, #1
 800414a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800414e:	e326      	b.n	800479e <UART_SetConfig+0x7ae>
 8004150:	2304      	movs	r3, #4
 8004152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004156:	e322      	b.n	800479e <UART_SetConfig+0x7ae>
 8004158:	2308      	movs	r3, #8
 800415a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800415e:	e31e      	b.n	800479e <UART_SetConfig+0x7ae>
 8004160:	2310      	movs	r3, #16
 8004162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004166:	e31a      	b.n	800479e <UART_SetConfig+0x7ae>
 8004168:	2320      	movs	r3, #32
 800416a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800416e:	e316      	b.n	800479e <UART_SetConfig+0x7ae>
 8004170:	2340      	movs	r3, #64	; 0x40
 8004172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004176:	e312      	b.n	800479e <UART_SetConfig+0x7ae>
 8004178:	2380      	movs	r3, #128	; 0x80
 800417a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800417e:	e30e      	b.n	800479e <UART_SetConfig+0x7ae>
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a69      	ldr	r2, [pc, #420]	; (800432c <UART_SetConfig+0x33c>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d130      	bne.n	80041ec <UART_SetConfig+0x1fc>
 800418a:	4b67      	ldr	r3, [pc, #412]	; (8004328 <UART_SetConfig+0x338>)
 800418c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	2b05      	cmp	r3, #5
 8004194:	d826      	bhi.n	80041e4 <UART_SetConfig+0x1f4>
 8004196:	a201      	add	r2, pc, #4	; (adr r2, 800419c <UART_SetConfig+0x1ac>)
 8004198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419c:	080041b5 	.word	0x080041b5
 80041a0:	080041bd 	.word	0x080041bd
 80041a4:	080041c5 	.word	0x080041c5
 80041a8:	080041cd 	.word	0x080041cd
 80041ac:	080041d5 	.word	0x080041d5
 80041b0:	080041dd 	.word	0x080041dd
 80041b4:	2300      	movs	r3, #0
 80041b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041ba:	e2f0      	b.n	800479e <UART_SetConfig+0x7ae>
 80041bc:	2304      	movs	r3, #4
 80041be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041c2:	e2ec      	b.n	800479e <UART_SetConfig+0x7ae>
 80041c4:	2308      	movs	r3, #8
 80041c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041ca:	e2e8      	b.n	800479e <UART_SetConfig+0x7ae>
 80041cc:	2310      	movs	r3, #16
 80041ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041d2:	e2e4      	b.n	800479e <UART_SetConfig+0x7ae>
 80041d4:	2320      	movs	r3, #32
 80041d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041da:	e2e0      	b.n	800479e <UART_SetConfig+0x7ae>
 80041dc:	2340      	movs	r3, #64	; 0x40
 80041de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041e2:	e2dc      	b.n	800479e <UART_SetConfig+0x7ae>
 80041e4:	2380      	movs	r3, #128	; 0x80
 80041e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041ea:	e2d8      	b.n	800479e <UART_SetConfig+0x7ae>
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a4f      	ldr	r2, [pc, #316]	; (8004330 <UART_SetConfig+0x340>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d130      	bne.n	8004258 <UART_SetConfig+0x268>
 80041f6:	4b4c      	ldr	r3, [pc, #304]	; (8004328 <UART_SetConfig+0x338>)
 80041f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	2b05      	cmp	r3, #5
 8004200:	d826      	bhi.n	8004250 <UART_SetConfig+0x260>
 8004202:	a201      	add	r2, pc, #4	; (adr r2, 8004208 <UART_SetConfig+0x218>)
 8004204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004208:	08004221 	.word	0x08004221
 800420c:	08004229 	.word	0x08004229
 8004210:	08004231 	.word	0x08004231
 8004214:	08004239 	.word	0x08004239
 8004218:	08004241 	.word	0x08004241
 800421c:	08004249 	.word	0x08004249
 8004220:	2300      	movs	r3, #0
 8004222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004226:	e2ba      	b.n	800479e <UART_SetConfig+0x7ae>
 8004228:	2304      	movs	r3, #4
 800422a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800422e:	e2b6      	b.n	800479e <UART_SetConfig+0x7ae>
 8004230:	2308      	movs	r3, #8
 8004232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004236:	e2b2      	b.n	800479e <UART_SetConfig+0x7ae>
 8004238:	2310      	movs	r3, #16
 800423a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800423e:	e2ae      	b.n	800479e <UART_SetConfig+0x7ae>
 8004240:	2320      	movs	r3, #32
 8004242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004246:	e2aa      	b.n	800479e <UART_SetConfig+0x7ae>
 8004248:	2340      	movs	r3, #64	; 0x40
 800424a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800424e:	e2a6      	b.n	800479e <UART_SetConfig+0x7ae>
 8004250:	2380      	movs	r3, #128	; 0x80
 8004252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004256:	e2a2      	b.n	800479e <UART_SetConfig+0x7ae>
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a35      	ldr	r2, [pc, #212]	; (8004334 <UART_SetConfig+0x344>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d130      	bne.n	80042c4 <UART_SetConfig+0x2d4>
 8004262:	4b31      	ldr	r3, [pc, #196]	; (8004328 <UART_SetConfig+0x338>)
 8004264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004266:	f003 0307 	and.w	r3, r3, #7
 800426a:	2b05      	cmp	r3, #5
 800426c:	d826      	bhi.n	80042bc <UART_SetConfig+0x2cc>
 800426e:	a201      	add	r2, pc, #4	; (adr r2, 8004274 <UART_SetConfig+0x284>)
 8004270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004274:	0800428d 	.word	0x0800428d
 8004278:	08004295 	.word	0x08004295
 800427c:	0800429d 	.word	0x0800429d
 8004280:	080042a5 	.word	0x080042a5
 8004284:	080042ad 	.word	0x080042ad
 8004288:	080042b5 	.word	0x080042b5
 800428c:	2300      	movs	r3, #0
 800428e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004292:	e284      	b.n	800479e <UART_SetConfig+0x7ae>
 8004294:	2304      	movs	r3, #4
 8004296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800429a:	e280      	b.n	800479e <UART_SetConfig+0x7ae>
 800429c:	2308      	movs	r3, #8
 800429e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042a2:	e27c      	b.n	800479e <UART_SetConfig+0x7ae>
 80042a4:	2310      	movs	r3, #16
 80042a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042aa:	e278      	b.n	800479e <UART_SetConfig+0x7ae>
 80042ac:	2320      	movs	r3, #32
 80042ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042b2:	e274      	b.n	800479e <UART_SetConfig+0x7ae>
 80042b4:	2340      	movs	r3, #64	; 0x40
 80042b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042ba:	e270      	b.n	800479e <UART_SetConfig+0x7ae>
 80042bc:	2380      	movs	r3, #128	; 0x80
 80042be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042c2:	e26c      	b.n	800479e <UART_SetConfig+0x7ae>
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a1b      	ldr	r2, [pc, #108]	; (8004338 <UART_SetConfig+0x348>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d142      	bne.n	8004354 <UART_SetConfig+0x364>
 80042ce:	4b16      	ldr	r3, [pc, #88]	; (8004328 <UART_SetConfig+0x338>)
 80042d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	2b05      	cmp	r3, #5
 80042d8:	d838      	bhi.n	800434c <UART_SetConfig+0x35c>
 80042da:	a201      	add	r2, pc, #4	; (adr r2, 80042e0 <UART_SetConfig+0x2f0>)
 80042dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e0:	080042f9 	.word	0x080042f9
 80042e4:	08004301 	.word	0x08004301
 80042e8:	08004309 	.word	0x08004309
 80042ec:	08004311 	.word	0x08004311
 80042f0:	0800433d 	.word	0x0800433d
 80042f4:	08004345 	.word	0x08004345
 80042f8:	2300      	movs	r3, #0
 80042fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042fe:	e24e      	b.n	800479e <UART_SetConfig+0x7ae>
 8004300:	2304      	movs	r3, #4
 8004302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004306:	e24a      	b.n	800479e <UART_SetConfig+0x7ae>
 8004308:	2308      	movs	r3, #8
 800430a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800430e:	e246      	b.n	800479e <UART_SetConfig+0x7ae>
 8004310:	2310      	movs	r3, #16
 8004312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004316:	e242      	b.n	800479e <UART_SetConfig+0x7ae>
 8004318:	cfff69f3 	.word	0xcfff69f3
 800431c:	58000c00 	.word	0x58000c00
 8004320:	11fff4ff 	.word	0x11fff4ff
 8004324:	40011000 	.word	0x40011000
 8004328:	58024400 	.word	0x58024400
 800432c:	40004400 	.word	0x40004400
 8004330:	40004800 	.word	0x40004800
 8004334:	40004c00 	.word	0x40004c00
 8004338:	40005000 	.word	0x40005000
 800433c:	2320      	movs	r3, #32
 800433e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004342:	e22c      	b.n	800479e <UART_SetConfig+0x7ae>
 8004344:	2340      	movs	r3, #64	; 0x40
 8004346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800434a:	e228      	b.n	800479e <UART_SetConfig+0x7ae>
 800434c:	2380      	movs	r3, #128	; 0x80
 800434e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004352:	e224      	b.n	800479e <UART_SetConfig+0x7ae>
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4ab1      	ldr	r2, [pc, #708]	; (8004620 <UART_SetConfig+0x630>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d176      	bne.n	800444c <UART_SetConfig+0x45c>
 800435e:	4bb1      	ldr	r3, [pc, #708]	; (8004624 <UART_SetConfig+0x634>)
 8004360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004362:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004366:	2b28      	cmp	r3, #40	; 0x28
 8004368:	d86c      	bhi.n	8004444 <UART_SetConfig+0x454>
 800436a:	a201      	add	r2, pc, #4	; (adr r2, 8004370 <UART_SetConfig+0x380>)
 800436c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004370:	08004415 	.word	0x08004415
 8004374:	08004445 	.word	0x08004445
 8004378:	08004445 	.word	0x08004445
 800437c:	08004445 	.word	0x08004445
 8004380:	08004445 	.word	0x08004445
 8004384:	08004445 	.word	0x08004445
 8004388:	08004445 	.word	0x08004445
 800438c:	08004445 	.word	0x08004445
 8004390:	0800441d 	.word	0x0800441d
 8004394:	08004445 	.word	0x08004445
 8004398:	08004445 	.word	0x08004445
 800439c:	08004445 	.word	0x08004445
 80043a0:	08004445 	.word	0x08004445
 80043a4:	08004445 	.word	0x08004445
 80043a8:	08004445 	.word	0x08004445
 80043ac:	08004445 	.word	0x08004445
 80043b0:	08004425 	.word	0x08004425
 80043b4:	08004445 	.word	0x08004445
 80043b8:	08004445 	.word	0x08004445
 80043bc:	08004445 	.word	0x08004445
 80043c0:	08004445 	.word	0x08004445
 80043c4:	08004445 	.word	0x08004445
 80043c8:	08004445 	.word	0x08004445
 80043cc:	08004445 	.word	0x08004445
 80043d0:	0800442d 	.word	0x0800442d
 80043d4:	08004445 	.word	0x08004445
 80043d8:	08004445 	.word	0x08004445
 80043dc:	08004445 	.word	0x08004445
 80043e0:	08004445 	.word	0x08004445
 80043e4:	08004445 	.word	0x08004445
 80043e8:	08004445 	.word	0x08004445
 80043ec:	08004445 	.word	0x08004445
 80043f0:	08004435 	.word	0x08004435
 80043f4:	08004445 	.word	0x08004445
 80043f8:	08004445 	.word	0x08004445
 80043fc:	08004445 	.word	0x08004445
 8004400:	08004445 	.word	0x08004445
 8004404:	08004445 	.word	0x08004445
 8004408:	08004445 	.word	0x08004445
 800440c:	08004445 	.word	0x08004445
 8004410:	0800443d 	.word	0x0800443d
 8004414:	2301      	movs	r3, #1
 8004416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800441a:	e1c0      	b.n	800479e <UART_SetConfig+0x7ae>
 800441c:	2304      	movs	r3, #4
 800441e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004422:	e1bc      	b.n	800479e <UART_SetConfig+0x7ae>
 8004424:	2308      	movs	r3, #8
 8004426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800442a:	e1b8      	b.n	800479e <UART_SetConfig+0x7ae>
 800442c:	2310      	movs	r3, #16
 800442e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004432:	e1b4      	b.n	800479e <UART_SetConfig+0x7ae>
 8004434:	2320      	movs	r3, #32
 8004436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800443a:	e1b0      	b.n	800479e <UART_SetConfig+0x7ae>
 800443c:	2340      	movs	r3, #64	; 0x40
 800443e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004442:	e1ac      	b.n	800479e <UART_SetConfig+0x7ae>
 8004444:	2380      	movs	r3, #128	; 0x80
 8004446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800444a:	e1a8      	b.n	800479e <UART_SetConfig+0x7ae>
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a75      	ldr	r2, [pc, #468]	; (8004628 <UART_SetConfig+0x638>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d130      	bne.n	80044b8 <UART_SetConfig+0x4c8>
 8004456:	4b73      	ldr	r3, [pc, #460]	; (8004624 <UART_SetConfig+0x634>)
 8004458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	2b05      	cmp	r3, #5
 8004460:	d826      	bhi.n	80044b0 <UART_SetConfig+0x4c0>
 8004462:	a201      	add	r2, pc, #4	; (adr r2, 8004468 <UART_SetConfig+0x478>)
 8004464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004468:	08004481 	.word	0x08004481
 800446c:	08004489 	.word	0x08004489
 8004470:	08004491 	.word	0x08004491
 8004474:	08004499 	.word	0x08004499
 8004478:	080044a1 	.word	0x080044a1
 800447c:	080044a9 	.word	0x080044a9
 8004480:	2300      	movs	r3, #0
 8004482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004486:	e18a      	b.n	800479e <UART_SetConfig+0x7ae>
 8004488:	2304      	movs	r3, #4
 800448a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800448e:	e186      	b.n	800479e <UART_SetConfig+0x7ae>
 8004490:	2308      	movs	r3, #8
 8004492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004496:	e182      	b.n	800479e <UART_SetConfig+0x7ae>
 8004498:	2310      	movs	r3, #16
 800449a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800449e:	e17e      	b.n	800479e <UART_SetConfig+0x7ae>
 80044a0:	2320      	movs	r3, #32
 80044a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044a6:	e17a      	b.n	800479e <UART_SetConfig+0x7ae>
 80044a8:	2340      	movs	r3, #64	; 0x40
 80044aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044ae:	e176      	b.n	800479e <UART_SetConfig+0x7ae>
 80044b0:	2380      	movs	r3, #128	; 0x80
 80044b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044b6:	e172      	b.n	800479e <UART_SetConfig+0x7ae>
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a5b      	ldr	r2, [pc, #364]	; (800462c <UART_SetConfig+0x63c>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d130      	bne.n	8004524 <UART_SetConfig+0x534>
 80044c2:	4b58      	ldr	r3, [pc, #352]	; (8004624 <UART_SetConfig+0x634>)
 80044c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	2b05      	cmp	r3, #5
 80044cc:	d826      	bhi.n	800451c <UART_SetConfig+0x52c>
 80044ce:	a201      	add	r2, pc, #4	; (adr r2, 80044d4 <UART_SetConfig+0x4e4>)
 80044d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d4:	080044ed 	.word	0x080044ed
 80044d8:	080044f5 	.word	0x080044f5
 80044dc:	080044fd 	.word	0x080044fd
 80044e0:	08004505 	.word	0x08004505
 80044e4:	0800450d 	.word	0x0800450d
 80044e8:	08004515 	.word	0x08004515
 80044ec:	2300      	movs	r3, #0
 80044ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044f2:	e154      	b.n	800479e <UART_SetConfig+0x7ae>
 80044f4:	2304      	movs	r3, #4
 80044f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044fa:	e150      	b.n	800479e <UART_SetConfig+0x7ae>
 80044fc:	2308      	movs	r3, #8
 80044fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004502:	e14c      	b.n	800479e <UART_SetConfig+0x7ae>
 8004504:	2310      	movs	r3, #16
 8004506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800450a:	e148      	b.n	800479e <UART_SetConfig+0x7ae>
 800450c:	2320      	movs	r3, #32
 800450e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004512:	e144      	b.n	800479e <UART_SetConfig+0x7ae>
 8004514:	2340      	movs	r3, #64	; 0x40
 8004516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800451a:	e140      	b.n	800479e <UART_SetConfig+0x7ae>
 800451c:	2380      	movs	r3, #128	; 0x80
 800451e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004522:	e13c      	b.n	800479e <UART_SetConfig+0x7ae>
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a41      	ldr	r2, [pc, #260]	; (8004630 <UART_SetConfig+0x640>)
 800452a:	4293      	cmp	r3, r2
 800452c:	f040 8082 	bne.w	8004634 <UART_SetConfig+0x644>
 8004530:	4b3c      	ldr	r3, [pc, #240]	; (8004624 <UART_SetConfig+0x634>)
 8004532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004534:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004538:	2b28      	cmp	r3, #40	; 0x28
 800453a:	d86d      	bhi.n	8004618 <UART_SetConfig+0x628>
 800453c:	a201      	add	r2, pc, #4	; (adr r2, 8004544 <UART_SetConfig+0x554>)
 800453e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004542:	bf00      	nop
 8004544:	080045e9 	.word	0x080045e9
 8004548:	08004619 	.word	0x08004619
 800454c:	08004619 	.word	0x08004619
 8004550:	08004619 	.word	0x08004619
 8004554:	08004619 	.word	0x08004619
 8004558:	08004619 	.word	0x08004619
 800455c:	08004619 	.word	0x08004619
 8004560:	08004619 	.word	0x08004619
 8004564:	080045f1 	.word	0x080045f1
 8004568:	08004619 	.word	0x08004619
 800456c:	08004619 	.word	0x08004619
 8004570:	08004619 	.word	0x08004619
 8004574:	08004619 	.word	0x08004619
 8004578:	08004619 	.word	0x08004619
 800457c:	08004619 	.word	0x08004619
 8004580:	08004619 	.word	0x08004619
 8004584:	080045f9 	.word	0x080045f9
 8004588:	08004619 	.word	0x08004619
 800458c:	08004619 	.word	0x08004619
 8004590:	08004619 	.word	0x08004619
 8004594:	08004619 	.word	0x08004619
 8004598:	08004619 	.word	0x08004619
 800459c:	08004619 	.word	0x08004619
 80045a0:	08004619 	.word	0x08004619
 80045a4:	08004601 	.word	0x08004601
 80045a8:	08004619 	.word	0x08004619
 80045ac:	08004619 	.word	0x08004619
 80045b0:	08004619 	.word	0x08004619
 80045b4:	08004619 	.word	0x08004619
 80045b8:	08004619 	.word	0x08004619
 80045bc:	08004619 	.word	0x08004619
 80045c0:	08004619 	.word	0x08004619
 80045c4:	08004609 	.word	0x08004609
 80045c8:	08004619 	.word	0x08004619
 80045cc:	08004619 	.word	0x08004619
 80045d0:	08004619 	.word	0x08004619
 80045d4:	08004619 	.word	0x08004619
 80045d8:	08004619 	.word	0x08004619
 80045dc:	08004619 	.word	0x08004619
 80045e0:	08004619 	.word	0x08004619
 80045e4:	08004611 	.word	0x08004611
 80045e8:	2301      	movs	r3, #1
 80045ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045ee:	e0d6      	b.n	800479e <UART_SetConfig+0x7ae>
 80045f0:	2304      	movs	r3, #4
 80045f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045f6:	e0d2      	b.n	800479e <UART_SetConfig+0x7ae>
 80045f8:	2308      	movs	r3, #8
 80045fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045fe:	e0ce      	b.n	800479e <UART_SetConfig+0x7ae>
 8004600:	2310      	movs	r3, #16
 8004602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004606:	e0ca      	b.n	800479e <UART_SetConfig+0x7ae>
 8004608:	2320      	movs	r3, #32
 800460a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800460e:	e0c6      	b.n	800479e <UART_SetConfig+0x7ae>
 8004610:	2340      	movs	r3, #64	; 0x40
 8004612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004616:	e0c2      	b.n	800479e <UART_SetConfig+0x7ae>
 8004618:	2380      	movs	r3, #128	; 0x80
 800461a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800461e:	e0be      	b.n	800479e <UART_SetConfig+0x7ae>
 8004620:	40011400 	.word	0x40011400
 8004624:	58024400 	.word	0x58024400
 8004628:	40007800 	.word	0x40007800
 800462c:	40007c00 	.word	0x40007c00
 8004630:	40011800 	.word	0x40011800
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4aad      	ldr	r2, [pc, #692]	; (80048f0 <UART_SetConfig+0x900>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d176      	bne.n	800472c <UART_SetConfig+0x73c>
 800463e:	4bad      	ldr	r3, [pc, #692]	; (80048f4 <UART_SetConfig+0x904>)
 8004640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004642:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004646:	2b28      	cmp	r3, #40	; 0x28
 8004648:	d86c      	bhi.n	8004724 <UART_SetConfig+0x734>
 800464a:	a201      	add	r2, pc, #4	; (adr r2, 8004650 <UART_SetConfig+0x660>)
 800464c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004650:	080046f5 	.word	0x080046f5
 8004654:	08004725 	.word	0x08004725
 8004658:	08004725 	.word	0x08004725
 800465c:	08004725 	.word	0x08004725
 8004660:	08004725 	.word	0x08004725
 8004664:	08004725 	.word	0x08004725
 8004668:	08004725 	.word	0x08004725
 800466c:	08004725 	.word	0x08004725
 8004670:	080046fd 	.word	0x080046fd
 8004674:	08004725 	.word	0x08004725
 8004678:	08004725 	.word	0x08004725
 800467c:	08004725 	.word	0x08004725
 8004680:	08004725 	.word	0x08004725
 8004684:	08004725 	.word	0x08004725
 8004688:	08004725 	.word	0x08004725
 800468c:	08004725 	.word	0x08004725
 8004690:	08004705 	.word	0x08004705
 8004694:	08004725 	.word	0x08004725
 8004698:	08004725 	.word	0x08004725
 800469c:	08004725 	.word	0x08004725
 80046a0:	08004725 	.word	0x08004725
 80046a4:	08004725 	.word	0x08004725
 80046a8:	08004725 	.word	0x08004725
 80046ac:	08004725 	.word	0x08004725
 80046b0:	0800470d 	.word	0x0800470d
 80046b4:	08004725 	.word	0x08004725
 80046b8:	08004725 	.word	0x08004725
 80046bc:	08004725 	.word	0x08004725
 80046c0:	08004725 	.word	0x08004725
 80046c4:	08004725 	.word	0x08004725
 80046c8:	08004725 	.word	0x08004725
 80046cc:	08004725 	.word	0x08004725
 80046d0:	08004715 	.word	0x08004715
 80046d4:	08004725 	.word	0x08004725
 80046d8:	08004725 	.word	0x08004725
 80046dc:	08004725 	.word	0x08004725
 80046e0:	08004725 	.word	0x08004725
 80046e4:	08004725 	.word	0x08004725
 80046e8:	08004725 	.word	0x08004725
 80046ec:	08004725 	.word	0x08004725
 80046f0:	0800471d 	.word	0x0800471d
 80046f4:	2301      	movs	r3, #1
 80046f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046fa:	e050      	b.n	800479e <UART_SetConfig+0x7ae>
 80046fc:	2304      	movs	r3, #4
 80046fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004702:	e04c      	b.n	800479e <UART_SetConfig+0x7ae>
 8004704:	2308      	movs	r3, #8
 8004706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800470a:	e048      	b.n	800479e <UART_SetConfig+0x7ae>
 800470c:	2310      	movs	r3, #16
 800470e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004712:	e044      	b.n	800479e <UART_SetConfig+0x7ae>
 8004714:	2320      	movs	r3, #32
 8004716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800471a:	e040      	b.n	800479e <UART_SetConfig+0x7ae>
 800471c:	2340      	movs	r3, #64	; 0x40
 800471e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004722:	e03c      	b.n	800479e <UART_SetConfig+0x7ae>
 8004724:	2380      	movs	r3, #128	; 0x80
 8004726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800472a:	e038      	b.n	800479e <UART_SetConfig+0x7ae>
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a71      	ldr	r2, [pc, #452]	; (80048f8 <UART_SetConfig+0x908>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d130      	bne.n	8004798 <UART_SetConfig+0x7a8>
 8004736:	4b6f      	ldr	r3, [pc, #444]	; (80048f4 <UART_SetConfig+0x904>)
 8004738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473a:	f003 0307 	and.w	r3, r3, #7
 800473e:	2b05      	cmp	r3, #5
 8004740:	d826      	bhi.n	8004790 <UART_SetConfig+0x7a0>
 8004742:	a201      	add	r2, pc, #4	; (adr r2, 8004748 <UART_SetConfig+0x758>)
 8004744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004748:	08004761 	.word	0x08004761
 800474c:	08004769 	.word	0x08004769
 8004750:	08004771 	.word	0x08004771
 8004754:	08004779 	.word	0x08004779
 8004758:	08004781 	.word	0x08004781
 800475c:	08004789 	.word	0x08004789
 8004760:	2302      	movs	r3, #2
 8004762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004766:	e01a      	b.n	800479e <UART_SetConfig+0x7ae>
 8004768:	2304      	movs	r3, #4
 800476a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800476e:	e016      	b.n	800479e <UART_SetConfig+0x7ae>
 8004770:	2308      	movs	r3, #8
 8004772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004776:	e012      	b.n	800479e <UART_SetConfig+0x7ae>
 8004778:	2310      	movs	r3, #16
 800477a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800477e:	e00e      	b.n	800479e <UART_SetConfig+0x7ae>
 8004780:	2320      	movs	r3, #32
 8004782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004786:	e00a      	b.n	800479e <UART_SetConfig+0x7ae>
 8004788:	2340      	movs	r3, #64	; 0x40
 800478a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800478e:	e006      	b.n	800479e <UART_SetConfig+0x7ae>
 8004790:	2380      	movs	r3, #128	; 0x80
 8004792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004796:	e002      	b.n	800479e <UART_SetConfig+0x7ae>
 8004798:	2380      	movs	r3, #128	; 0x80
 800479a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a55      	ldr	r2, [pc, #340]	; (80048f8 <UART_SetConfig+0x908>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	f040 80f8 	bne.w	800499a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047aa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80047ae:	2b20      	cmp	r3, #32
 80047b0:	dc46      	bgt.n	8004840 <UART_SetConfig+0x850>
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	db75      	blt.n	80048a2 <UART_SetConfig+0x8b2>
 80047b6:	3b02      	subs	r3, #2
 80047b8:	2b1e      	cmp	r3, #30
 80047ba:	d872      	bhi.n	80048a2 <UART_SetConfig+0x8b2>
 80047bc:	a201      	add	r2, pc, #4	; (adr r2, 80047c4 <UART_SetConfig+0x7d4>)
 80047be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c2:	bf00      	nop
 80047c4:	08004847 	.word	0x08004847
 80047c8:	080048a3 	.word	0x080048a3
 80047cc:	0800484f 	.word	0x0800484f
 80047d0:	080048a3 	.word	0x080048a3
 80047d4:	080048a3 	.word	0x080048a3
 80047d8:	080048a3 	.word	0x080048a3
 80047dc:	0800485f 	.word	0x0800485f
 80047e0:	080048a3 	.word	0x080048a3
 80047e4:	080048a3 	.word	0x080048a3
 80047e8:	080048a3 	.word	0x080048a3
 80047ec:	080048a3 	.word	0x080048a3
 80047f0:	080048a3 	.word	0x080048a3
 80047f4:	080048a3 	.word	0x080048a3
 80047f8:	080048a3 	.word	0x080048a3
 80047fc:	0800486f 	.word	0x0800486f
 8004800:	080048a3 	.word	0x080048a3
 8004804:	080048a3 	.word	0x080048a3
 8004808:	080048a3 	.word	0x080048a3
 800480c:	080048a3 	.word	0x080048a3
 8004810:	080048a3 	.word	0x080048a3
 8004814:	080048a3 	.word	0x080048a3
 8004818:	080048a3 	.word	0x080048a3
 800481c:	080048a3 	.word	0x080048a3
 8004820:	080048a3 	.word	0x080048a3
 8004824:	080048a3 	.word	0x080048a3
 8004828:	080048a3 	.word	0x080048a3
 800482c:	080048a3 	.word	0x080048a3
 8004830:	080048a3 	.word	0x080048a3
 8004834:	080048a3 	.word	0x080048a3
 8004838:	080048a3 	.word	0x080048a3
 800483c:	08004895 	.word	0x08004895
 8004840:	2b40      	cmp	r3, #64	; 0x40
 8004842:	d02a      	beq.n	800489a <UART_SetConfig+0x8aa>
 8004844:	e02d      	b.n	80048a2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004846:	f7fe ff61 	bl	800370c <HAL_RCCEx_GetD3PCLK1Freq>
 800484a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800484c:	e02f      	b.n	80048ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800484e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004852:	4618      	mov	r0, r3
 8004854:	f7fe ff70 	bl	8003738 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800485c:	e027      	b.n	80048ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800485e:	f107 0318 	add.w	r3, r7, #24
 8004862:	4618      	mov	r0, r3
 8004864:	f7ff f8bc 	bl	80039e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800486c:	e01f      	b.n	80048ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800486e:	4b21      	ldr	r3, [pc, #132]	; (80048f4 <UART_SetConfig+0x904>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0320 	and.w	r3, r3, #32
 8004876:	2b00      	cmp	r3, #0
 8004878:	d009      	beq.n	800488e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800487a:	4b1e      	ldr	r3, [pc, #120]	; (80048f4 <UART_SetConfig+0x904>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	08db      	lsrs	r3, r3, #3
 8004880:	f003 0303 	and.w	r3, r3, #3
 8004884:	4a1d      	ldr	r2, [pc, #116]	; (80048fc <UART_SetConfig+0x90c>)
 8004886:	fa22 f303 	lsr.w	r3, r2, r3
 800488a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800488c:	e00f      	b.n	80048ae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800488e:	4b1b      	ldr	r3, [pc, #108]	; (80048fc <UART_SetConfig+0x90c>)
 8004890:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004892:	e00c      	b.n	80048ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004894:	4b1a      	ldr	r3, [pc, #104]	; (8004900 <UART_SetConfig+0x910>)
 8004896:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004898:	e009      	b.n	80048ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800489a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800489e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80048a0:	e005      	b.n	80048ae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80048a2:	2300      	movs	r3, #0
 80048a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80048ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 81ee 	beq.w	8004c92 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	4a12      	ldr	r2, [pc, #72]	; (8004904 <UART_SetConfig+0x914>)
 80048bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048c0:	461a      	mov	r2, r3
 80048c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80048c8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	4613      	mov	r3, r2
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	4413      	add	r3, r2
 80048d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d305      	bcc.n	80048e6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d910      	bls.n	8004908 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80048ec:	e1d1      	b.n	8004c92 <UART_SetConfig+0xca2>
 80048ee:	bf00      	nop
 80048f0:	40011c00 	.word	0x40011c00
 80048f4:	58024400 	.word	0x58024400
 80048f8:	58000c00 	.word	0x58000c00
 80048fc:	03d09000 	.word	0x03d09000
 8004900:	003d0900 	.word	0x003d0900
 8004904:	08005384 	.word	0x08005384
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800490a:	2200      	movs	r2, #0
 800490c:	60bb      	str	r3, [r7, #8]
 800490e:	60fa      	str	r2, [r7, #12]
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	4ac0      	ldr	r2, [pc, #768]	; (8004c18 <UART_SetConfig+0xc28>)
 8004916:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800491a:	b29b      	uxth	r3, r3
 800491c:	2200      	movs	r2, #0
 800491e:	603b      	str	r3, [r7, #0]
 8004920:	607a      	str	r2, [r7, #4]
 8004922:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004926:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800492a:	f7fb fcdf 	bl	80002ec <__aeabi_uldivmod>
 800492e:	4602      	mov	r2, r0
 8004930:	460b      	mov	r3, r1
 8004932:	4610      	mov	r0, r2
 8004934:	4619      	mov	r1, r3
 8004936:	f04f 0200 	mov.w	r2, #0
 800493a:	f04f 0300 	mov.w	r3, #0
 800493e:	020b      	lsls	r3, r1, #8
 8004940:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004944:	0202      	lsls	r2, r0, #8
 8004946:	6979      	ldr	r1, [r7, #20]
 8004948:	6849      	ldr	r1, [r1, #4]
 800494a:	0849      	lsrs	r1, r1, #1
 800494c:	2000      	movs	r0, #0
 800494e:	460c      	mov	r4, r1
 8004950:	4605      	mov	r5, r0
 8004952:	eb12 0804 	adds.w	r8, r2, r4
 8004956:	eb43 0905 	adc.w	r9, r3, r5
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	469a      	mov	sl, r3
 8004962:	4693      	mov	fp, r2
 8004964:	4652      	mov	r2, sl
 8004966:	465b      	mov	r3, fp
 8004968:	4640      	mov	r0, r8
 800496a:	4649      	mov	r1, r9
 800496c:	f7fb fcbe 	bl	80002ec <__aeabi_uldivmod>
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	4613      	mov	r3, r2
 8004976:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800497e:	d308      	bcc.n	8004992 <UART_SetConfig+0x9a2>
 8004980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004982:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004986:	d204      	bcs.n	8004992 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800498e:	60da      	str	r2, [r3, #12]
 8004990:	e17f      	b.n	8004c92 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004998:	e17b      	b.n	8004c92 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049a2:	f040 80bd 	bne.w	8004b20 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80049a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80049aa:	2b20      	cmp	r3, #32
 80049ac:	dc48      	bgt.n	8004a40 <UART_SetConfig+0xa50>
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	db7b      	blt.n	8004aaa <UART_SetConfig+0xaba>
 80049b2:	2b20      	cmp	r3, #32
 80049b4:	d879      	bhi.n	8004aaa <UART_SetConfig+0xaba>
 80049b6:	a201      	add	r2, pc, #4	; (adr r2, 80049bc <UART_SetConfig+0x9cc>)
 80049b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049bc:	08004a47 	.word	0x08004a47
 80049c0:	08004a4f 	.word	0x08004a4f
 80049c4:	08004aab 	.word	0x08004aab
 80049c8:	08004aab 	.word	0x08004aab
 80049cc:	08004a57 	.word	0x08004a57
 80049d0:	08004aab 	.word	0x08004aab
 80049d4:	08004aab 	.word	0x08004aab
 80049d8:	08004aab 	.word	0x08004aab
 80049dc:	08004a67 	.word	0x08004a67
 80049e0:	08004aab 	.word	0x08004aab
 80049e4:	08004aab 	.word	0x08004aab
 80049e8:	08004aab 	.word	0x08004aab
 80049ec:	08004aab 	.word	0x08004aab
 80049f0:	08004aab 	.word	0x08004aab
 80049f4:	08004aab 	.word	0x08004aab
 80049f8:	08004aab 	.word	0x08004aab
 80049fc:	08004a77 	.word	0x08004a77
 8004a00:	08004aab 	.word	0x08004aab
 8004a04:	08004aab 	.word	0x08004aab
 8004a08:	08004aab 	.word	0x08004aab
 8004a0c:	08004aab 	.word	0x08004aab
 8004a10:	08004aab 	.word	0x08004aab
 8004a14:	08004aab 	.word	0x08004aab
 8004a18:	08004aab 	.word	0x08004aab
 8004a1c:	08004aab 	.word	0x08004aab
 8004a20:	08004aab 	.word	0x08004aab
 8004a24:	08004aab 	.word	0x08004aab
 8004a28:	08004aab 	.word	0x08004aab
 8004a2c:	08004aab 	.word	0x08004aab
 8004a30:	08004aab 	.word	0x08004aab
 8004a34:	08004aab 	.word	0x08004aab
 8004a38:	08004aab 	.word	0x08004aab
 8004a3c:	08004a9d 	.word	0x08004a9d
 8004a40:	2b40      	cmp	r3, #64	; 0x40
 8004a42:	d02e      	beq.n	8004aa2 <UART_SetConfig+0xab2>
 8004a44:	e031      	b.n	8004aaa <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a46:	f7fd fc77 	bl	8002338 <HAL_RCC_GetPCLK1Freq>
 8004a4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004a4c:	e033      	b.n	8004ab6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a4e:	f7fd fc89 	bl	8002364 <HAL_RCC_GetPCLK2Freq>
 8004a52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004a54:	e02f      	b.n	8004ab6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7fe fe6c 	bl	8003738 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a64:	e027      	b.n	8004ab6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a66:	f107 0318 	add.w	r3, r7, #24
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fe ffb8 	bl	80039e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a74:	e01f      	b.n	8004ab6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a76:	4b69      	ldr	r3, [pc, #420]	; (8004c1c <UART_SetConfig+0xc2c>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0320 	and.w	r3, r3, #32
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d009      	beq.n	8004a96 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004a82:	4b66      	ldr	r3, [pc, #408]	; (8004c1c <UART_SetConfig+0xc2c>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	08db      	lsrs	r3, r3, #3
 8004a88:	f003 0303 	and.w	r3, r3, #3
 8004a8c:	4a64      	ldr	r2, [pc, #400]	; (8004c20 <UART_SetConfig+0xc30>)
 8004a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a94:	e00f      	b.n	8004ab6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8004a96:	4b62      	ldr	r3, [pc, #392]	; (8004c20 <UART_SetConfig+0xc30>)
 8004a98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a9a:	e00c      	b.n	8004ab6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004a9c:	4b61      	ldr	r3, [pc, #388]	; (8004c24 <UART_SetConfig+0xc34>)
 8004a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004aa0:	e009      	b.n	8004ab6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004aa8:	e005      	b.n	8004ab6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004ab4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f000 80ea 	beq.w	8004c92 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	4a55      	ldr	r2, [pc, #340]	; (8004c18 <UART_SetConfig+0xc28>)
 8004ac4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ac8:	461a      	mov	r2, r3
 8004aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004acc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ad0:	005a      	lsls	r2, r3, #1
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	085b      	lsrs	r3, r3, #1
 8004ad8:	441a      	add	r2, r3
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae6:	2b0f      	cmp	r3, #15
 8004ae8:	d916      	bls.n	8004b18 <UART_SetConfig+0xb28>
 8004aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004af0:	d212      	bcs.n	8004b18 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	f023 030f 	bic.w	r3, r3, #15
 8004afa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afe:	085b      	lsrs	r3, r3, #1
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	f003 0307 	and.w	r3, r3, #7
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004b14:	60da      	str	r2, [r3, #12]
 8004b16:	e0bc      	b.n	8004c92 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004b1e:	e0b8      	b.n	8004c92 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b20:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004b24:	2b20      	cmp	r3, #32
 8004b26:	dc4b      	bgt.n	8004bc0 <UART_SetConfig+0xbd0>
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f2c0 8087 	blt.w	8004c3c <UART_SetConfig+0xc4c>
 8004b2e:	2b20      	cmp	r3, #32
 8004b30:	f200 8084 	bhi.w	8004c3c <UART_SetConfig+0xc4c>
 8004b34:	a201      	add	r2, pc, #4	; (adr r2, 8004b3c <UART_SetConfig+0xb4c>)
 8004b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3a:	bf00      	nop
 8004b3c:	08004bc7 	.word	0x08004bc7
 8004b40:	08004bcf 	.word	0x08004bcf
 8004b44:	08004c3d 	.word	0x08004c3d
 8004b48:	08004c3d 	.word	0x08004c3d
 8004b4c:	08004bd7 	.word	0x08004bd7
 8004b50:	08004c3d 	.word	0x08004c3d
 8004b54:	08004c3d 	.word	0x08004c3d
 8004b58:	08004c3d 	.word	0x08004c3d
 8004b5c:	08004be7 	.word	0x08004be7
 8004b60:	08004c3d 	.word	0x08004c3d
 8004b64:	08004c3d 	.word	0x08004c3d
 8004b68:	08004c3d 	.word	0x08004c3d
 8004b6c:	08004c3d 	.word	0x08004c3d
 8004b70:	08004c3d 	.word	0x08004c3d
 8004b74:	08004c3d 	.word	0x08004c3d
 8004b78:	08004c3d 	.word	0x08004c3d
 8004b7c:	08004bf7 	.word	0x08004bf7
 8004b80:	08004c3d 	.word	0x08004c3d
 8004b84:	08004c3d 	.word	0x08004c3d
 8004b88:	08004c3d 	.word	0x08004c3d
 8004b8c:	08004c3d 	.word	0x08004c3d
 8004b90:	08004c3d 	.word	0x08004c3d
 8004b94:	08004c3d 	.word	0x08004c3d
 8004b98:	08004c3d 	.word	0x08004c3d
 8004b9c:	08004c3d 	.word	0x08004c3d
 8004ba0:	08004c3d 	.word	0x08004c3d
 8004ba4:	08004c3d 	.word	0x08004c3d
 8004ba8:	08004c3d 	.word	0x08004c3d
 8004bac:	08004c3d 	.word	0x08004c3d
 8004bb0:	08004c3d 	.word	0x08004c3d
 8004bb4:	08004c3d 	.word	0x08004c3d
 8004bb8:	08004c3d 	.word	0x08004c3d
 8004bbc:	08004c2f 	.word	0x08004c2f
 8004bc0:	2b40      	cmp	r3, #64	; 0x40
 8004bc2:	d037      	beq.n	8004c34 <UART_SetConfig+0xc44>
 8004bc4:	e03a      	b.n	8004c3c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bc6:	f7fd fbb7 	bl	8002338 <HAL_RCC_GetPCLK1Freq>
 8004bca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004bcc:	e03c      	b.n	8004c48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bce:	f7fd fbc9 	bl	8002364 <HAL_RCC_GetPCLK2Freq>
 8004bd2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004bd4:	e038      	b.n	8004c48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fe fdac 	bl	8003738 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004be4:	e030      	b.n	8004c48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004be6:	f107 0318 	add.w	r3, r7, #24
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fe fef8 	bl	80039e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bf4:	e028      	b.n	8004c48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bf6:	4b09      	ldr	r3, [pc, #36]	; (8004c1c <UART_SetConfig+0xc2c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0320 	and.w	r3, r3, #32
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d012      	beq.n	8004c28 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004c02:	4b06      	ldr	r3, [pc, #24]	; (8004c1c <UART_SetConfig+0xc2c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	08db      	lsrs	r3, r3, #3
 8004c08:	f003 0303 	and.w	r3, r3, #3
 8004c0c:	4a04      	ldr	r2, [pc, #16]	; (8004c20 <UART_SetConfig+0xc30>)
 8004c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c14:	e018      	b.n	8004c48 <UART_SetConfig+0xc58>
 8004c16:	bf00      	nop
 8004c18:	08005384 	.word	0x08005384
 8004c1c:	58024400 	.word	0x58024400
 8004c20:	03d09000 	.word	0x03d09000
 8004c24:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8004c28:	4b24      	ldr	r3, [pc, #144]	; (8004cbc <UART_SetConfig+0xccc>)
 8004c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c2c:	e00c      	b.n	8004c48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004c2e:	4b24      	ldr	r3, [pc, #144]	; (8004cc0 <UART_SetConfig+0xcd0>)
 8004c30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c32:	e009      	b.n	8004c48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c3a:	e005      	b.n	8004c48 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004c46:	bf00      	nop
    }

    if (pclk != 0U)
 8004c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d021      	beq.n	8004c92 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	4a1c      	ldr	r2, [pc, #112]	; (8004cc4 <UART_SetConfig+0xcd4>)
 8004c54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c58:	461a      	mov	r2, r3
 8004c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c5c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	085b      	lsrs	r3, r3, #1
 8004c66:	441a      	add	r2, r3
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c70:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c74:	2b0f      	cmp	r3, #15
 8004c76:	d909      	bls.n	8004c8c <UART_SetConfig+0xc9c>
 8004c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c7e:	d205      	bcs.n	8004c8c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	60da      	str	r2, [r3, #12]
 8004c8a:	e002      	b.n	8004c92 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	2200      	movs	r2, #0
 8004cac:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004cae:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3748      	adds	r7, #72	; 0x48
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cbc:	03d09000 	.word	0x03d09000
 8004cc0:	003d0900 	.word	0x003d0900
 8004cc4:	08005384 	.word	0x08005384

08004cc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00a      	beq.n	8004cf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00a      	beq.n	8004d36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3a:	f003 0308 	and.w	r3, r3, #8
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5c:	f003 0310 	and.w	r3, r3, #16
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7e:	f003 0320 	and.w	r3, r3, #32
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00a      	beq.n	8004d9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d01a      	beq.n	8004dde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dc6:	d10a      	bne.n	8004dde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	605a      	str	r2, [r3, #4]
  }
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b098      	sub	sp, #96	; 0x60
 8004e10:	af02      	add	r7, sp, #8
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e1c:	f7fb ffcc 	bl	8000db8 <HAL_GetTick>
 8004e20:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0308 	and.w	r3, r3, #8
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d12f      	bne.n	8004e90 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f88e 	bl	8004f60 <UART_WaitOnFlagUntilTimeout>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d022      	beq.n	8004e90 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e52:	e853 3f00 	ldrex	r3, [r3]
 8004e56:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e5e:	653b      	str	r3, [r7, #80]	; 0x50
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	461a      	mov	r2, r3
 8004e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e68:	647b      	str	r3, [r7, #68]	; 0x44
 8004e6a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e70:	e841 2300 	strex	r3, r2, [r1]
 8004e74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1e6      	bne.n	8004e4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e063      	b.n	8004f58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0304 	and.w	r3, r3, #4
 8004e9a:	2b04      	cmp	r3, #4
 8004e9c:	d149      	bne.n	8004f32 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e9e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f857 	bl	8004f60 <UART_WaitOnFlagUntilTimeout>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d03c      	beq.n	8004f32 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	e853 3f00 	ldrex	r3, [r3]
 8004ec4:	623b      	str	r3, [r7, #32]
   return(result);
 8004ec6:	6a3b      	ldr	r3, [r7, #32]
 8004ec8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ed6:	633b      	str	r3, [r7, #48]	; 0x30
 8004ed8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ede:	e841 2300 	strex	r3, r2, [r1]
 8004ee2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1e6      	bne.n	8004eb8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	3308      	adds	r3, #8
 8004ef0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	e853 3f00 	ldrex	r3, [r3]
 8004ef8:	60fb      	str	r3, [r7, #12]
   return(result);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f023 0301 	bic.w	r3, r3, #1
 8004f00:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	3308      	adds	r3, #8
 8004f08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f0a:	61fa      	str	r2, [r7, #28]
 8004f0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0e:	69b9      	ldr	r1, [r7, #24]
 8004f10:	69fa      	ldr	r2, [r7, #28]
 8004f12:	e841 2300 	strex	r3, r2, [r1]
 8004f16:	617b      	str	r3, [r7, #20]
   return(result);
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1e5      	bne.n	8004eea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2220      	movs	r2, #32
 8004f22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e012      	b.n	8004f58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2220      	movs	r2, #32
 8004f36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3758      	adds	r7, #88	; 0x58
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	603b      	str	r3, [r7, #0]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f70:	e049      	b.n	8005006 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f78:	d045      	beq.n	8005006 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f7a:	f7fb ff1d 	bl	8000db8 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d302      	bcc.n	8004f90 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e048      	b.n	8005026 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0304 	and.w	r3, r3, #4
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d031      	beq.n	8005006 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	f003 0308 	and.w	r3, r3, #8
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d110      	bne.n	8004fd2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2208      	movs	r2, #8
 8004fb6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f000 f839 	bl	8005030 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2208      	movs	r2, #8
 8004fc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e029      	b.n	8005026 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69db      	ldr	r3, [r3, #28]
 8004fd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fe0:	d111      	bne.n	8005006 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f000 f81f 	bl	8005030 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e00f      	b.n	8005026 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	69da      	ldr	r2, [r3, #28]
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	4013      	ands	r3, r2
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	429a      	cmp	r2, r3
 8005014:	bf0c      	ite	eq
 8005016:	2301      	moveq	r3, #1
 8005018:	2300      	movne	r3, #0
 800501a:	b2db      	uxtb	r3, r3
 800501c:	461a      	mov	r2, r3
 800501e:	79fb      	ldrb	r3, [r7, #7]
 8005020:	429a      	cmp	r2, r3
 8005022:	d0a6      	beq.n	8004f72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
	...

08005030 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005030:	b480      	push	{r7}
 8005032:	b095      	sub	sp, #84	; 0x54
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005040:	e853 3f00 	ldrex	r3, [r3]
 8005044:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005048:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800504c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	461a      	mov	r2, r3
 8005054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005056:	643b      	str	r3, [r7, #64]	; 0x40
 8005058:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800505c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800505e:	e841 2300 	strex	r3, r2, [r1]
 8005062:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1e6      	bne.n	8005038 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	3308      	adds	r3, #8
 8005070:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005072:	6a3b      	ldr	r3, [r7, #32]
 8005074:	e853 3f00 	ldrex	r3, [r3]
 8005078:	61fb      	str	r3, [r7, #28]
   return(result);
 800507a:	69fa      	ldr	r2, [r7, #28]
 800507c:	4b1e      	ldr	r3, [pc, #120]	; (80050f8 <UART_EndRxTransfer+0xc8>)
 800507e:	4013      	ands	r3, r2
 8005080:	64bb      	str	r3, [r7, #72]	; 0x48
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3308      	adds	r3, #8
 8005088:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800508a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800508c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005092:	e841 2300 	strex	r3, r2, [r1]
 8005096:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1e5      	bne.n	800506a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d118      	bne.n	80050d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	e853 3f00 	ldrex	r3, [r3]
 80050b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	f023 0310 	bic.w	r3, r3, #16
 80050ba:	647b      	str	r3, [r7, #68]	; 0x44
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	461a      	mov	r2, r3
 80050c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050c4:	61bb      	str	r3, [r7, #24]
 80050c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c8:	6979      	ldr	r1, [r7, #20]
 80050ca:	69ba      	ldr	r2, [r7, #24]
 80050cc:	e841 2300 	strex	r3, r2, [r1]
 80050d0:	613b      	str	r3, [r7, #16]
   return(result);
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1e6      	bne.n	80050a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2220      	movs	r2, #32
 80050dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	675a      	str	r2, [r3, #116]	; 0x74
}
 80050ec:	bf00      	nop
 80050ee:	3754      	adds	r7, #84	; 0x54
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	effffffe 	.word	0xeffffffe

080050fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800510a:	2b01      	cmp	r3, #1
 800510c:	d101      	bne.n	8005112 <HAL_UARTEx_DisableFifoMode+0x16>
 800510e:	2302      	movs	r3, #2
 8005110:	e027      	b.n	8005162 <HAL_UARTEx_DisableFifoMode+0x66>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2224      	movs	r2, #36	; 0x24
 800511e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0201 	bic.w	r2, r2, #1
 8005138:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005140:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2220      	movs	r2, #32
 8005154:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3714      	adds	r7, #20
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b084      	sub	sp, #16
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
 8005176:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800517e:	2b01      	cmp	r3, #1
 8005180:	d101      	bne.n	8005186 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005182:	2302      	movs	r3, #2
 8005184:	e02d      	b.n	80051e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2224      	movs	r2, #36	; 0x24
 8005192:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f022 0201 	bic.w	r2, r2, #1
 80051ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	683a      	ldr	r2, [r7, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f850 	bl	8005268 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2220      	movs	r2, #32
 80051d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b084      	sub	sp, #16
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
 80051f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d101      	bne.n	8005202 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80051fe:	2302      	movs	r3, #2
 8005200:	e02d      	b.n	800525e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2224      	movs	r2, #36	; 0x24
 800520e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 0201 	bic.w	r2, r2, #1
 8005228:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	683a      	ldr	r2, [r7, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f812 	bl	8005268 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2220      	movs	r2, #32
 8005250:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
	...

08005268 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005274:	2b00      	cmp	r3, #0
 8005276:	d108      	bne.n	800528a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005288:	e031      	b.n	80052ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800528a:	2310      	movs	r3, #16
 800528c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800528e:	2310      	movs	r3, #16
 8005290:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	0e5b      	lsrs	r3, r3, #25
 800529a:	b2db      	uxtb	r3, r3
 800529c:	f003 0307 	and.w	r3, r3, #7
 80052a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	0f5b      	lsrs	r3, r3, #29
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052b2:	7bbb      	ldrb	r3, [r7, #14]
 80052b4:	7b3a      	ldrb	r2, [r7, #12]
 80052b6:	4911      	ldr	r1, [pc, #68]	; (80052fc <UARTEx_SetNbDataToProcess+0x94>)
 80052b8:	5c8a      	ldrb	r2, [r1, r2]
 80052ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80052be:	7b3a      	ldrb	r2, [r7, #12]
 80052c0:	490f      	ldr	r1, [pc, #60]	; (8005300 <UARTEx_SetNbDataToProcess+0x98>)
 80052c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052d0:	7bfb      	ldrb	r3, [r7, #15]
 80052d2:	7b7a      	ldrb	r2, [r7, #13]
 80052d4:	4909      	ldr	r1, [pc, #36]	; (80052fc <UARTEx_SetNbDataToProcess+0x94>)
 80052d6:	5c8a      	ldrb	r2, [r1, r2]
 80052d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80052dc:	7b7a      	ldrb	r2, [r7, #13]
 80052de:	4908      	ldr	r1, [pc, #32]	; (8005300 <UARTEx_SetNbDataToProcess+0x98>)
 80052e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80052ee:	bf00      	nop
 80052f0:	3714      	adds	r7, #20
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	0800539c 	.word	0x0800539c
 8005300:	080053a4 	.word	0x080053a4

08005304 <__libc_init_array>:
 8005304:	b570      	push	{r4, r5, r6, lr}
 8005306:	4d0d      	ldr	r5, [pc, #52]	; (800533c <__libc_init_array+0x38>)
 8005308:	4c0d      	ldr	r4, [pc, #52]	; (8005340 <__libc_init_array+0x3c>)
 800530a:	1b64      	subs	r4, r4, r5
 800530c:	10a4      	asrs	r4, r4, #2
 800530e:	2600      	movs	r6, #0
 8005310:	42a6      	cmp	r6, r4
 8005312:	d109      	bne.n	8005328 <__libc_init_array+0x24>
 8005314:	4d0b      	ldr	r5, [pc, #44]	; (8005344 <__libc_init_array+0x40>)
 8005316:	4c0c      	ldr	r4, [pc, #48]	; (8005348 <__libc_init_array+0x44>)
 8005318:	f000 f820 	bl	800535c <_init>
 800531c:	1b64      	subs	r4, r4, r5
 800531e:	10a4      	asrs	r4, r4, #2
 8005320:	2600      	movs	r6, #0
 8005322:	42a6      	cmp	r6, r4
 8005324:	d105      	bne.n	8005332 <__libc_init_array+0x2e>
 8005326:	bd70      	pop	{r4, r5, r6, pc}
 8005328:	f855 3b04 	ldr.w	r3, [r5], #4
 800532c:	4798      	blx	r3
 800532e:	3601      	adds	r6, #1
 8005330:	e7ee      	b.n	8005310 <__libc_init_array+0xc>
 8005332:	f855 3b04 	ldr.w	r3, [r5], #4
 8005336:	4798      	blx	r3
 8005338:	3601      	adds	r6, #1
 800533a:	e7f2      	b.n	8005322 <__libc_init_array+0x1e>
 800533c:	080053b4 	.word	0x080053b4
 8005340:	080053b4 	.word	0x080053b4
 8005344:	080053b4 	.word	0x080053b4
 8005348:	080053b8 	.word	0x080053b8

0800534c <memset>:
 800534c:	4402      	add	r2, r0
 800534e:	4603      	mov	r3, r0
 8005350:	4293      	cmp	r3, r2
 8005352:	d100      	bne.n	8005356 <memset+0xa>
 8005354:	4770      	bx	lr
 8005356:	f803 1b01 	strb.w	r1, [r3], #1
 800535a:	e7f9      	b.n	8005350 <memset+0x4>

0800535c <_init>:
 800535c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535e:	bf00      	nop
 8005360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005362:	bc08      	pop	{r3}
 8005364:	469e      	mov	lr, r3
 8005366:	4770      	bx	lr

08005368 <_fini>:
 8005368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800536a:	bf00      	nop
 800536c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800536e:	bc08      	pop	{r3}
 8005370:	469e      	mov	lr, r3
 8005372:	4770      	bx	lr
