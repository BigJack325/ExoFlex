
h7a3zi-q.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050fc  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080053a8  080053a8  000153a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080053e0  080053e0  000153e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080053e8  080053e8  000153e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080053ec  080053ec  000153ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  080053f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b4  24000010  08005400  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240000c4  08005400  000200c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f46d  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001c7e  00000000  00000000  0002f4ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000a58  00000000  00000000  00031130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000009b0  00000000  00000000  00031b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002ec89  00000000  00000000  00032538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000e341  00000000  00000000  000611c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00131e89  00000000  00000000  0006f502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001a138b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002a04  00000000  00000000  001a13dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08005390 	.word	0x08005390

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08005390 	.word	0x08005390

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b974 	b.w	80005ec <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468e      	mov	lr, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14d      	bne.n	80003c6 <__udivmoddi4+0xaa>
 800032a:	428a      	cmp	r2, r1
 800032c:	4694      	mov	ip, r2
 800032e:	d969      	bls.n	8000404 <__udivmoddi4+0xe8>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b152      	cbz	r2, 800034c <__udivmoddi4+0x30>
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	f1c2 0120 	rsb	r1, r2, #32
 800033e:	fa20 f101 	lsr.w	r1, r0, r1
 8000342:	fa0c fc02 	lsl.w	ip, ip, r2
 8000346:	ea41 0e03 	orr.w	lr, r1, r3
 800034a:	4094      	lsls	r4, r2
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	0c21      	lsrs	r1, r4, #16
 8000352:	fbbe f6f8 	udiv	r6, lr, r8
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fb08 e316 	mls	r3, r8, r6, lr
 800035e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000362:	fb06 f107 	mul.w	r1, r6, r7
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 811f 	bcs.w	80005b4 <__udivmoddi4+0x298>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 811c 	bls.w	80005b4 <__udivmoddi4+0x298>
 800037c:	3e02      	subs	r6, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 f707 	mul.w	r7, r0, r7
 8000394:	42a7      	cmp	r7, r4
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x92>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a0:	f080 810a 	bcs.w	80005b8 <__udivmoddi4+0x29c>
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	f240 8107 	bls.w	80005b8 <__udivmoddi4+0x29c>
 80003aa:	4464      	add	r4, ip
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa4>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xc2>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80ef 	beq.w	80005ae <__udivmoddi4+0x292>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x160>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd4>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80f9 	bhi.w	80005e2 <__udivmoddi4+0x2c6>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	469e      	mov	lr, r3
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa4>
 80003fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa4>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xec>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 8092 	bne.w	8000536 <__udivmoddi4+0x21a>
 8000412:	eba1 010c 	sub.w	r1, r1, ip
 8000416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	2601      	movs	r6, #1
 8000420:	0c20      	lsrs	r0, r4, #16
 8000422:	fbb1 f3f7 	udiv	r3, r1, r7
 8000426:	fb07 1113 	mls	r1, r7, r3, r1
 800042a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042e:	fb0e f003 	mul.w	r0, lr, r3
 8000432:	4288      	cmp	r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x12c>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f103 38ff 	add.w	r8, r3, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x12a>
 8000440:	4288      	cmp	r0, r1
 8000442:	f200 80cb 	bhi.w	80005dc <__udivmoddi4+0x2c0>
 8000446:	4643      	mov	r3, r8
 8000448:	1a09      	subs	r1, r1, r0
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1110 	mls	r1, r7, r0, r1
 8000454:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000458:	fb0e fe00 	mul.w	lr, lr, r0
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x156>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 31ff 	add.w	r1, r0, #4294967295
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x154>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f200 80bb 	bhi.w	80005e6 <__udivmoddi4+0x2ca>
 8000470:	4608      	mov	r0, r1
 8000472:	eba4 040e 	sub.w	r4, r4, lr
 8000476:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047a:	e79c      	b.n	80003b6 <__udivmoddi4+0x9a>
 800047c:	f1c6 0720 	rsb	r7, r6, #32
 8000480:	40b3      	lsls	r3, r6
 8000482:	fa22 fc07 	lsr.w	ip, r2, r7
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa20 f407 	lsr.w	r4, r0, r7
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	431c      	orrs	r4, r3
 8000494:	40f9      	lsrs	r1, r7
 8000496:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049a:	fa00 f306 	lsl.w	r3, r0, r6
 800049e:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a2:	0c20      	lsrs	r0, r4, #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	fb08 f00e 	mul.w	r0, r8, lr
 80004b4:	4288      	cmp	r0, r1
 80004b6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b8>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2bc>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2bc>
 80004ce:	f1a8 0802 	sub.w	r8, r8, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	1a09      	subs	r1, r1, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004dc:	fb09 1110 	mls	r1, r9, r0, r1
 80004e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	458e      	cmp	lr, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x1e2>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f4:	d26c      	bcs.n	80005d0 <__udivmoddi4+0x2b4>
 80004f6:	458e      	cmp	lr, r1
 80004f8:	d96a      	bls.n	80005d0 <__udivmoddi4+0x2b4>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000502:	fba0 9402 	umull	r9, r4, r0, r2
 8000506:	eba1 010e 	sub.w	r1, r1, lr
 800050a:	42a1      	cmp	r1, r4
 800050c:	46c8      	mov	r8, r9
 800050e:	46a6      	mov	lr, r4
 8000510:	d356      	bcc.n	80005c0 <__udivmoddi4+0x2a4>
 8000512:	d053      	beq.n	80005bc <__udivmoddi4+0x2a0>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x212>
 8000516:	ebb3 0208 	subs.w	r2, r3, r8
 800051a:	eb61 010e 	sbc.w	r1, r1, lr
 800051e:	fa01 f707 	lsl.w	r7, r1, r7
 8000522:	fa22 f306 	lsr.w	r3, r2, r6
 8000526:	40f1      	lsrs	r1, r6
 8000528:	431f      	orrs	r7, r3
 800052a:	e9c5 7100 	strd	r7, r1, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	40d8      	lsrs	r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
 8000544:	4091      	lsls	r1, r2
 8000546:	4301      	orrs	r1, r0
 8000548:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054c:	fa1f fe8c 	uxth.w	lr, ip
 8000550:	fbb3 f0f7 	udiv	r0, r3, r7
 8000554:	fb07 3610 	mls	r6, r7, r0, r3
 8000558:	0c0b      	lsrs	r3, r1, #16
 800055a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055e:	fb00 f60e 	mul.w	r6, r0, lr
 8000562:	429e      	cmp	r6, r3
 8000564:	fa04 f402 	lsl.w	r4, r4, r2
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x260>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000572:	d22f      	bcs.n	80005d4 <__udivmoddi4+0x2b8>
 8000574:	429e      	cmp	r6, r3
 8000576:	d92d      	bls.n	80005d4 <__udivmoddi4+0x2b8>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1b9b      	subs	r3, r3, r6
 800057e:	b289      	uxth	r1, r1
 8000580:	fbb3 f6f7 	udiv	r6, r3, r7
 8000584:	fb07 3316 	mls	r3, r7, r6, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb06 f30e 	mul.w	r3, r6, lr
 8000590:	428b      	cmp	r3, r1
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x28a>
 8000594:	eb1c 0101 	adds.w	r1, ip, r1
 8000598:	f106 38ff 	add.w	r8, r6, #4294967295
 800059c:	d216      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d914      	bls.n	80005cc <__udivmoddi4+0x2b0>
 80005a2:	3e02      	subs	r6, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	1ac9      	subs	r1, r1, r3
 80005a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ac:	e738      	b.n	8000420 <__udivmoddi4+0x104>
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e705      	b.n	80003c0 <__udivmoddi4+0xa4>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e3      	b.n	8000380 <__udivmoddi4+0x64>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6f8      	b.n	80003ae <__udivmoddi4+0x92>
 80005bc:	454b      	cmp	r3, r9
 80005be:	d2a9      	bcs.n	8000514 <__udivmoddi4+0x1f8>
 80005c0:	ebb9 0802 	subs.w	r8, r9, r2
 80005c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7a3      	b.n	8000514 <__udivmoddi4+0x1f8>
 80005cc:	4646      	mov	r6, r8
 80005ce:	e7ea      	b.n	80005a6 <__udivmoddi4+0x28a>
 80005d0:	4620      	mov	r0, r4
 80005d2:	e794      	b.n	80004fe <__udivmoddi4+0x1e2>
 80005d4:	4640      	mov	r0, r8
 80005d6:	e7d1      	b.n	800057c <__udivmoddi4+0x260>
 80005d8:	46d0      	mov	r8, sl
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b8>
 80005dc:	3b02      	subs	r3, #2
 80005de:	4461      	add	r1, ip
 80005e0:	e732      	b.n	8000448 <__udivmoddi4+0x12c>
 80005e2:	4630      	mov	r0, r6
 80005e4:	e709      	b.n	80003fa <__udivmoddi4+0xde>
 80005e6:	4464      	add	r4, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e742      	b.n	8000472 <__udivmoddi4+0x156>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 fb5f 	bl	8000cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f823 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 f8eb 	bl	80007d8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000602:	f000 f895 	bl	8000730 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000606:	f000 f8df 	bl	80007c8 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t u32Timer = HAL_GetTick();
 800060a:	f000 fbdb 	bl	8000dc4 <HAL_GetTick>
 800060e:	6078      	str	r0, [r7, #4]

  uint8_t result = add(2,3);
 8000610:	2103      	movs	r1, #3
 8000612:	2002      	movs	r0, #2
 8000614:	f004 fe7c 	bl	8005310 <add>
 8000618:	4603      	mov	r3, r0
 800061a:	70fb      	strb	r3, [r7, #3]

  while (1)
  {
	 if (HAL_GetTick() - u32Timer >= 500)
 800061c:	f000 fbd2 	bl	8000dc4 <HAL_GetTick>
 8000620:	4602      	mov	r2, r0
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800062a:	d3f7      	bcc.n	800061c <main+0x2c>
	 {
		 HAL_GPIO_TogglePin(GPIOB, LD1_Pin|LD3_Pin);
 800062c:	f244 0101 	movw	r1, #16385	; 0x4001
 8000630:	4803      	ldr	r0, [pc, #12]	; (8000640 <main+0x50>)
 8000632:	f000 fe80 	bl	8001336 <HAL_GPIO_TogglePin>
		 u32Timer = HAL_GetTick();
 8000636:	f000 fbc5 	bl	8000dc4 <HAL_GetTick>
 800063a:	6078      	str	r0, [r7, #4]
	 if (HAL_GetTick() - u32Timer >= 500)
 800063c:	e7ee      	b.n	800061c <main+0x2c>
 800063e:	bf00      	nop
 8000640:	58020400 	.word	0x58020400

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b09c      	sub	sp, #112	; 0x70
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800064e:	224c      	movs	r2, #76	; 0x4c
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f004 fe94 	bl	8005380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2220      	movs	r2, #32
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f004 fe8e 	bl	8005380 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000664:	4b30      	ldr	r3, [pc, #192]	; (8000728 <SystemClock_Config+0xe4>)
 8000666:	f04f 32ff 	mov.w	r2, #4294967295
 800066a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800066e:	2004      	movs	r0, #4
 8000670:	f000 fe7c 	bl	800136c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000674:	2300      	movs	r3, #0
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	4b2c      	ldr	r3, [pc, #176]	; (800072c <SystemClock_Config+0xe8>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	4a2b      	ldr	r2, [pc, #172]	; (800072c <SystemClock_Config+0xe8>)
 800067e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b29      	ldr	r3, [pc, #164]	; (800072c <SystemClock_Config+0xe8>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000690:	bf00      	nop
 8000692:	4b26      	ldr	r3, [pc, #152]	; (800072c <SystemClock_Config+0xe8>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800069a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800069e:	d1f8      	bne.n	8000692 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80006a0:	2321      	movs	r3, #33	; 0x21
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006aa:	2301      	movs	r3, #1
 80006ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ae:	2302      	movs	r3, #2
 80006b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b2:	2302      	movs	r3, #2
 80006b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b6:	2301      	movs	r3, #1
 80006b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006ba:	2318      	movs	r3, #24
 80006bc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006be:	2302      	movs	r3, #2
 80006c0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c2:	2304      	movs	r3, #4
 80006c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006ca:	230c      	movs	r3, #12
 80006cc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006ce:	2300      	movs	r3, #0
 80006d0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 fea0 	bl	8001420 <HAL_RCC_OscConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006e6:	f000 f991 	bl	8000a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	233f      	movs	r3, #63	; 0x3f
 80006ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ee:	2303      	movs	r3, #3
 80006f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2102      	movs	r1, #2
 800070e:	4618      	mov	r0, r3
 8000710:	f001 fab8 	bl	8001c84 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xda>
  {
    Error_Handler();
 800071a:	f000 f977 	bl	8000a0c <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3770      	adds	r7, #112	; 0x70
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	58024400 	.word	0x58024400
 800072c:	58024800 	.word	0x58024800

08000730 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000734:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <MX_USART3_UART_Init+0x90>)
 8000736:	4a23      	ldr	r2, [pc, #140]	; (80007c4 <MX_USART3_UART_Init+0x94>)
 8000738:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800073a:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <MX_USART3_UART_Init+0x90>)
 800073c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000740:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000742:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <MX_USART3_UART_Init+0x90>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000748:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <MX_USART3_UART_Init+0x90>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800074e:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <MX_USART3_UART_Init+0x90>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000754:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <MX_USART3_UART_Init+0x90>)
 8000756:	220c      	movs	r2, #12
 8000758:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075a:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <MX_USART3_UART_Init+0x90>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000760:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <MX_USART3_UART_Init+0x90>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000766:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <MX_USART3_UART_Init+0x90>)
 8000768:	2200      	movs	r2, #0
 800076a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_USART3_UART_Init+0x90>)
 800076e:	2200      	movs	r2, #0
 8000770:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000772:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <MX_USART3_UART_Init+0x90>)
 8000774:	2200      	movs	r2, #0
 8000776:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000778:	4811      	ldr	r0, [pc, #68]	; (80007c0 <MX_USART3_UART_Init+0x90>)
 800077a:	f003 fbef 	bl	8003f5c <HAL_UART_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000784:	f000 f942 	bl	8000a0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000788:	2100      	movs	r1, #0
 800078a:	480d      	ldr	r0, [pc, #52]	; (80007c0 <MX_USART3_UART_Init+0x90>)
 800078c:	f004 fcf5 	bl	800517a <HAL_UARTEx_SetTxFifoThreshold>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000796:	f000 f939 	bl	8000a0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800079a:	2100      	movs	r1, #0
 800079c:	4808      	ldr	r0, [pc, #32]	; (80007c0 <MX_USART3_UART_Init+0x90>)
 800079e:	f004 fd2a 	bl	80051f6 <HAL_UARTEx_SetRxFifoThreshold>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80007a8:	f000 f930 	bl	8000a0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80007ac:	4804      	ldr	r0, [pc, #16]	; (80007c0 <MX_USART3_UART_Init+0x90>)
 80007ae:	f004 fcab 	bl	8005108 <HAL_UARTEx_DisableFifoMode>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80007b8:	f000 f928 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	2400002c 	.word	0x2400002c
 80007c4:	40004800 	.word	0x40004800

080007c8 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
	...

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08e      	sub	sp, #56	; 0x38
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	4b80      	ldr	r3, [pc, #512]	; (80009f0 <MX_GPIO_Init+0x218>)
 80007f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007f4:	4a7e      	ldr	r2, [pc, #504]	; (80009f0 <MX_GPIO_Init+0x218>)
 80007f6:	f043 0304 	orr.w	r3, r3, #4
 80007fa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007fe:	4b7c      	ldr	r3, [pc, #496]	; (80009f0 <MX_GPIO_Init+0x218>)
 8000800:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000804:	f003 0304 	and.w	r3, r3, #4
 8000808:	623b      	str	r3, [r7, #32]
 800080a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800080c:	4b78      	ldr	r3, [pc, #480]	; (80009f0 <MX_GPIO_Init+0x218>)
 800080e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000812:	4a77      	ldr	r2, [pc, #476]	; (80009f0 <MX_GPIO_Init+0x218>)
 8000814:	f043 0320 	orr.w	r3, r3, #32
 8000818:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800081c:	4b74      	ldr	r3, [pc, #464]	; (80009f0 <MX_GPIO_Init+0x218>)
 800081e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000822:	f003 0320 	and.w	r3, r3, #32
 8000826:	61fb      	str	r3, [r7, #28]
 8000828:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082a:	4b71      	ldr	r3, [pc, #452]	; (80009f0 <MX_GPIO_Init+0x218>)
 800082c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000830:	4a6f      	ldr	r2, [pc, #444]	; (80009f0 <MX_GPIO_Init+0x218>)
 8000832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000836:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800083a:	4b6d      	ldr	r3, [pc, #436]	; (80009f0 <MX_GPIO_Init+0x218>)
 800083c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000844:	61bb      	str	r3, [r7, #24]
 8000846:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000848:	4b69      	ldr	r3, [pc, #420]	; (80009f0 <MX_GPIO_Init+0x218>)
 800084a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800084e:	4a68      	ldr	r2, [pc, #416]	; (80009f0 <MX_GPIO_Init+0x218>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000858:	4b65      	ldr	r3, [pc, #404]	; (80009f0 <MX_GPIO_Init+0x218>)
 800085a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	617b      	str	r3, [r7, #20]
 8000864:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000866:	4b62      	ldr	r3, [pc, #392]	; (80009f0 <MX_GPIO_Init+0x218>)
 8000868:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800086c:	4a60      	ldr	r2, [pc, #384]	; (80009f0 <MX_GPIO_Init+0x218>)
 800086e:	f043 0308 	orr.w	r3, r3, #8
 8000872:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000876:	4b5e      	ldr	r3, [pc, #376]	; (80009f0 <MX_GPIO_Init+0x218>)
 8000878:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800087c:	f003 0308 	and.w	r3, r3, #8
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000884:	4b5a      	ldr	r3, [pc, #360]	; (80009f0 <MX_GPIO_Init+0x218>)
 8000886:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800088a:	4a59      	ldr	r2, [pc, #356]	; (80009f0 <MX_GPIO_Init+0x218>)
 800088c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000890:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000894:	4b56      	ldr	r3, [pc, #344]	; (80009f0 <MX_GPIO_Init+0x218>)
 8000896:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800089a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	4b53      	ldr	r3, [pc, #332]	; (80009f0 <MX_GPIO_Init+0x218>)
 80008a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008a8:	4a51      	ldr	r2, [pc, #324]	; (80009f0 <MX_GPIO_Init+0x218>)
 80008aa:	f043 0301 	orr.w	r3, r3, #1
 80008ae:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008b2:	4b4f      	ldr	r3, [pc, #316]	; (80009f0 <MX_GPIO_Init+0x218>)
 80008b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008b8:	f003 0301 	and.w	r3, r3, #1
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008c0:	4b4b      	ldr	r3, [pc, #300]	; (80009f0 <MX_GPIO_Init+0x218>)
 80008c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008c6:	4a4a      	ldr	r2, [pc, #296]	; (80009f0 <MX_GPIO_Init+0x218>)
 80008c8:	f043 0310 	orr.w	r3, r3, #16
 80008cc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008d0:	4b47      	ldr	r3, [pc, #284]	; (80009f0 <MX_GPIO_Init+0x218>)
 80008d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008d6:	f003 0310 	and.w	r3, r3, #16
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008e4:	4843      	ldr	r0, [pc, #268]	; (80009f4 <MX_GPIO_Init+0x21c>)
 80008e6:	f000 fd0d 	bl	8001304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	f244 0101 	movw	r1, #16385	; 0x4001
 80008f0:	4841      	ldr	r0, [pc, #260]	; (80009f8 <MX_GPIO_Init+0x220>)
 80008f2:	f000 fd07 	bl	8001304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2102      	movs	r1, #2
 80008fa:	4840      	ldr	r0, [pc, #256]	; (80009fc <MX_GPIO_Init+0x224>)
 80008fc:	f000 fd02 	bl	8001304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000900:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000906:	2300      	movs	r3, #0
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000912:	4619      	mov	r1, r3
 8000914:	483a      	ldr	r0, [pc, #232]	; (8000a00 <MX_GPIO_Init+0x228>)
 8000916:	f000 fb45 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800091a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	2301      	movs	r3, #1
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000930:	4619      	mov	r1, r3
 8000932:	4830      	ldr	r0, [pc, #192]	; (80009f4 <MX_GPIO_Init+0x21c>)
 8000934:	f000 fb36 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000938:	f244 0301 	movw	r3, #16385	; 0x4001
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094e:	4619      	mov	r1, r3
 8000950:	4829      	ldr	r0, [pc, #164]	; (80009f8 <MX_GPIO_Init+0x220>)
 8000952:	f000 fb27 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000956:	2380      	movs	r3, #128	; 0x80
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800095a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000968:	4619      	mov	r1, r3
 800096a:	4826      	ldr	r0, [pc, #152]	; (8000a04 <MX_GPIO_Init+0x22c>)
 800096c:	f000 fb1a 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000970:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000982:	4619      	mov	r1, r3
 8000984:	4820      	ldr	r0, [pc, #128]	; (8000a08 <MX_GPIO_Init+0x230>)
 8000986:	f000 fb0d 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800098a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800099c:	230a      	movs	r3, #10
 800099e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a4:	4619      	mov	r1, r3
 80009a6:	4818      	ldr	r0, [pc, #96]	; (8000a08 <MX_GPIO_Init+0x230>)
 80009a8:	f000 fafc 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80009ac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	2302      	movs	r3, #2
 80009b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c2:	4619      	mov	r1, r3
 80009c4:	4810      	ldr	r0, [pc, #64]	; (8000a08 <MX_GPIO_Init+0x230>)
 80009c6:	f000 faed 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009ca:	2302      	movs	r3, #2
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009de:	4619      	mov	r1, r3
 80009e0:	4806      	ldr	r0, [pc, #24]	; (80009fc <MX_GPIO_Init+0x224>)
 80009e2:	f000 fadf 	bl	8000fa4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009e6:	bf00      	nop
 80009e8:	3738      	adds	r7, #56	; 0x38
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	58024400 	.word	0x58024400
 80009f4:	58021400 	.word	0x58021400
 80009f8:	58020400 	.word	0x58020400
 80009fc:	58021000 	.word	0x58021000
 8000a00:	58020800 	.word	0x58020800
 8000a04:	58021800 	.word	0x58021800
 8000a08:	58020000 	.word	0x58020000

08000a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <Error_Handler+0x8>
	...

08000a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <HAL_MspInit+0x30>)
 8000a20:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000a24:	4a08      	ldr	r2, [pc, #32]	; (8000a48 <HAL_MspInit+0x30>)
 8000a26:	f043 0302 	orr.w	r3, r3, #2
 8000a2a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_MspInit+0x30>)
 8000a30:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000a34:	f003 0302 	and.w	r3, r3, #2
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	58024400 	.word	0x58024400

08000a4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b0ba      	sub	sp, #232	; 0xe8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a64:	f107 0310 	add.w	r3, r7, #16
 8000a68:	22c0      	movs	r2, #192	; 0xc0
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f004 fc87 	bl	8005380 <memset>
  if(huart->Instance==USART3)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a27      	ldr	r2, [pc, #156]	; (8000b14 <HAL_UART_MspInit+0xc8>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d146      	bne.n	8000b0a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a7c:	f04f 0202 	mov.w	r2, #2
 8000a80:	f04f 0300 	mov.w	r3, #0
 8000a84:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 fc82 	bl	800239c <HAL_RCCEx_PeriphCLKConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000a9e:	f7ff ffb5 	bl	8000a0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000aa2:	4b1d      	ldr	r3, [pc, #116]	; (8000b18 <HAL_UART_MspInit+0xcc>)
 8000aa4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000aa8:	4a1b      	ldr	r2, [pc, #108]	; (8000b18 <HAL_UART_MspInit+0xcc>)
 8000aaa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aae:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000ab2:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <HAL_UART_MspInit+0xcc>)
 8000ab4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000ab8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac0:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <HAL_UART_MspInit+0xcc>)
 8000ac2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ac6:	4a14      	ldr	r2, [pc, #80]	; (8000b18 <HAL_UART_MspInit+0xcc>)
 8000ac8:	f043 0308 	orr.w	r3, r3, #8
 8000acc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <HAL_UART_MspInit+0xcc>)
 8000ad2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ad6:	f003 0308 	and.w	r3, r3, #8
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000ade:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ae2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000af8:	2307      	movs	r3, #7
 8000afa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000afe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000b02:	4619      	mov	r1, r3
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <HAL_UART_MspInit+0xd0>)
 8000b06:	f000 fa4d 	bl	8000fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b0a:	bf00      	nop
 8000b0c:	37e8      	adds	r7, #232	; 0xe8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40004800 	.word	0x40004800
 8000b18:	58024400 	.word	0x58024400
 8000b1c:	58020c00 	.word	0x58020c00

08000b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <NMI_Handler+0x4>

08000b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <HardFault_Handler+0x4>

08000b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <MemManage_Handler+0x4>

08000b32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <BusFault_Handler+0x4>

08000b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <UsageFault_Handler+0x4>

08000b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6c:	f000 f916 	bl	8000d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b78:	4b32      	ldr	r3, [pc, #200]	; (8000c44 <SystemInit+0xd0>)
 8000b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7e:	4a31      	ldr	r2, [pc, #196]	; (8000c44 <SystemInit+0xd0>)
 8000b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b88:	4b2f      	ldr	r3, [pc, #188]	; (8000c48 <SystemInit+0xd4>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f003 030f 	and.w	r3, r3, #15
 8000b90:	2b02      	cmp	r3, #2
 8000b92:	d807      	bhi.n	8000ba4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b94:	4b2c      	ldr	r3, [pc, #176]	; (8000c48 <SystemInit+0xd4>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f023 030f 	bic.w	r3, r3, #15
 8000b9c:	4a2a      	ldr	r2, [pc, #168]	; (8000c48 <SystemInit+0xd4>)
 8000b9e:	f043 0303 	orr.w	r3, r3, #3
 8000ba2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ba4:	4b29      	ldr	r3, [pc, #164]	; (8000c4c <SystemInit+0xd8>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a28      	ldr	r2, [pc, #160]	; (8000c4c <SystemInit+0xd8>)
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000bb0:	4b26      	ldr	r3, [pc, #152]	; (8000c4c <SystemInit+0xd8>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000bb6:	4b25      	ldr	r3, [pc, #148]	; (8000c4c <SystemInit+0xd8>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	4924      	ldr	r1, [pc, #144]	; (8000c4c <SystemInit+0xd8>)
 8000bbc:	4b24      	ldr	r3, [pc, #144]	; (8000c50 <SystemInit+0xdc>)
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bc2:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <SystemInit+0xd4>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f003 030c 	and.w	r3, r3, #12
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d007      	beq.n	8000bde <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bce:	4b1e      	ldr	r3, [pc, #120]	; (8000c48 <SystemInit+0xd4>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f023 030f 	bic.w	r3, r3, #15
 8000bd6:	4a1c      	ldr	r2, [pc, #112]	; (8000c48 <SystemInit+0xd4>)
 8000bd8:	f043 0303 	orr.w	r3, r3, #3
 8000bdc:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000bde:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <SystemInit+0xd8>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000be4:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <SystemInit+0xd8>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000bea:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <SystemInit+0xd8>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000bf0:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <SystemInit+0xd8>)
 8000bf2:	4a18      	ldr	r2, [pc, #96]	; (8000c54 <SystemInit+0xe0>)
 8000bf4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000bf6:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <SystemInit+0xd8>)
 8000bf8:	4a17      	ldr	r2, [pc, #92]	; (8000c58 <SystemInit+0xe4>)
 8000bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <SystemInit+0xd8>)
 8000bfe:	4a17      	ldr	r2, [pc, #92]	; (8000c5c <SystemInit+0xe8>)
 8000c00:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <SystemInit+0xd8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c08:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <SystemInit+0xd8>)
 8000c0a:	4a14      	ldr	r2, [pc, #80]	; (8000c5c <SystemInit+0xe8>)
 8000c0c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <SystemInit+0xd8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c14:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <SystemInit+0xd8>)
 8000c16:	4a11      	ldr	r2, [pc, #68]	; (8000c5c <SystemInit+0xe8>)
 8000c18:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <SystemInit+0xd8>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <SystemInit+0xd8>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a09      	ldr	r2, [pc, #36]	; (8000c4c <SystemInit+0xd8>)
 8000c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <SystemInit+0xd8>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c32:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <SystemInit+0xec>)
 8000c34:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c38:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000ed00 	.word	0xe000ed00
 8000c48:	52002000 	.word	0x52002000
 8000c4c:	58024400 	.word	0x58024400
 8000c50:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c54:	02020200 	.word	0x02020200
 8000c58:	01ff0000 	.word	0x01ff0000
 8000c5c:	01010280 	.word	0x01010280
 8000c60:	52004000 	.word	0x52004000

08000c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c9c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c68:	f7ff ff84 	bl	8000b74 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c6c:	480c      	ldr	r0, [pc, #48]	; (8000ca0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c6e:	490d      	ldr	r1, [pc, #52]	; (8000ca4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c70:	4a0d      	ldr	r2, [pc, #52]	; (8000ca8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c74:	e002      	b.n	8000c7c <LoopCopyDataInit>

08000c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7a:	3304      	adds	r3, #4

08000c7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c80:	d3f9      	bcc.n	8000c76 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c82:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c84:	4c0a      	ldr	r4, [pc, #40]	; (8000cb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c88:	e001      	b.n	8000c8e <LoopFillZerobss>

08000c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c8c:	3204      	adds	r2, #4

08000c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c90:	d3fb      	bcc.n	8000c8a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c92:	f004 fb51 	bl	8005338 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c96:	f7ff fcab 	bl	80005f0 <main>
  bx  lr
 8000c9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c9c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000ca0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ca4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000ca8:	080053f0 	.word	0x080053f0
  ldr r2, =_sbss
 8000cac:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000cb0:	240000c4 	.word	0x240000c4

08000cb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb4:	e7fe      	b.n	8000cb4 <ADC_IRQHandler>
	...

08000cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cbe:	2003      	movs	r0, #3
 8000cc0:	f000 f93e 	bl	8000f40 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000cc4:	f001 f994 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <HAL_Init+0x68>)
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	0a1b      	lsrs	r3, r3, #8
 8000cd0:	f003 030f 	and.w	r3, r3, #15
 8000cd4:	4913      	ldr	r1, [pc, #76]	; (8000d24 <HAL_Init+0x6c>)
 8000cd6:	5ccb      	ldrb	r3, [r1, r3]
 8000cd8:	f003 031f 	and.w	r3, r3, #31
 8000cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ce0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <HAL_Init+0x68>)
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	4a0e      	ldr	r2, [pc, #56]	; (8000d24 <HAL_Init+0x6c>)
 8000cec:	5cd3      	ldrb	r3, [r2, r3]
 8000cee:	f003 031f 	and.w	r3, r3, #31
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8000cf8:	4a0b      	ldr	r2, [pc, #44]	; (8000d28 <HAL_Init+0x70>)
 8000cfa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000cfc:	4a0b      	ldr	r2, [pc, #44]	; (8000d2c <HAL_Init+0x74>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d02:	2000      	movs	r0, #0
 8000d04:	f000 f814 	bl	8000d30 <HAL_InitTick>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e002      	b.n	8000d18 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d12:	f7ff fe81 	bl	8000a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d16:	2300      	movs	r3, #0
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	58024400 	.word	0x58024400
 8000d24:	080053a8 	.word	0x080053a8
 8000d28:	24000004 	.word	0x24000004
 8000d2c:	24000000 	.word	0x24000000

08000d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d38:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <HAL_InitTick+0x60>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d101      	bne.n	8000d44 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	e021      	b.n	8000d88 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <HAL_InitTick+0x64>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <HAL_InitTick+0x60>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 f915 	bl	8000f8a <HAL_SYSTICK_Config>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e00e      	b.n	8000d88 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b0f      	cmp	r3, #15
 8000d6e:	d80a      	bhi.n	8000d86 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d70:	2200      	movs	r2, #0
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	f000 f8ed 	bl	8000f56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d7c:	4a06      	ldr	r2, [pc, #24]	; (8000d98 <HAL_InitTick+0x68>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d82:	2300      	movs	r3, #0
 8000d84:	e000      	b.n	8000d88 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	2400000c 	.word	0x2400000c
 8000d94:	24000000 	.word	0x24000000
 8000d98:	24000008 	.word	0x24000008

08000d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_IncTick+0x20>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_IncTick+0x24>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4413      	add	r3, r2
 8000dac:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <HAL_IncTick+0x24>)
 8000dae:	6013      	str	r3, [r2, #0]
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	2400000c 	.word	0x2400000c
 8000dc0:	240000c0 	.word	0x240000c0

08000dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <HAL_GetTick+0x14>)
 8000dca:	681b      	ldr	r3, [r3, #0]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	240000c0 	.word	0x240000c0

08000ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <__NVIC_SetPriorityGrouping+0x40>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df2:	68ba      	ldr	r2, [r7, #8]
 8000df4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000df8:	4013      	ands	r3, r2
 8000dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <__NVIC_SetPriorityGrouping+0x44>)
 8000e06:	4313      	orrs	r3, r2
 8000e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0a:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <__NVIC_SetPriorityGrouping+0x40>)
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	60d3      	str	r3, [r2, #12]
}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00
 8000e20:	05fa0000 	.word	0x05fa0000

08000e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e28:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <__NVIC_GetPriorityGrouping+0x18>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	0a1b      	lsrs	r3, r3, #8
 8000e2e:	f003 0307 	and.w	r3, r3, #7
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	db0a      	blt.n	8000e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	490c      	ldr	r1, [pc, #48]	; (8000e8c <__NVIC_SetPriority+0x4c>)
 8000e5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e5e:	0112      	lsls	r2, r2, #4
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	440b      	add	r3, r1
 8000e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e68:	e00a      	b.n	8000e80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4908      	ldr	r1, [pc, #32]	; (8000e90 <__NVIC_SetPriority+0x50>)
 8000e70:	88fb      	ldrh	r3, [r7, #6]
 8000e72:	f003 030f 	and.w	r3, r3, #15
 8000e76:	3b04      	subs	r3, #4
 8000e78:	0112      	lsls	r2, r2, #4
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	440b      	add	r3, r1
 8000e7e:	761a      	strb	r2, [r3, #24]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000e100 	.word	0xe000e100
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	; 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	bf28      	it	cs
 8000eb2:	2304      	movcs	r3, #4
 8000eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	2b06      	cmp	r3, #6
 8000ebc:	d902      	bls.n	8000ec4 <NVIC_EncodePriority+0x30>
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3b03      	subs	r3, #3
 8000ec2:	e000      	b.n	8000ec6 <NVIC_EncodePriority+0x32>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000edc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	43d9      	mvns	r1, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	4313      	orrs	r3, r2
         );
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3724      	adds	r7, #36	; 0x24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f0c:	d301      	bcc.n	8000f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e00f      	b.n	8000f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f12:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <SysTick_Config+0x40>)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f1a:	210f      	movs	r1, #15
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f20:	f7ff ff8e 	bl	8000e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f24:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <SysTick_Config+0x40>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2a:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <SysTick_Config+0x40>)
 8000f2c:	2207      	movs	r2, #7
 8000f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	e000e010 	.word	0xe000e010

08000f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff ff47 	bl	8000ddc <__NVIC_SetPriorityGrouping>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b086      	sub	sp, #24
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	60b9      	str	r1, [r7, #8]
 8000f60:	607a      	str	r2, [r7, #4]
 8000f62:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f64:	f7ff ff5e 	bl	8000e24 <__NVIC_GetPriorityGrouping>
 8000f68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	68b9      	ldr	r1, [r7, #8]
 8000f6e:	6978      	ldr	r0, [r7, #20]
 8000f70:	f7ff ff90 	bl	8000e94 <NVIC_EncodePriority>
 8000f74:	4602      	mov	r2, r0
 8000f76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ff5f 	bl	8000e40 <__NVIC_SetPriority>
}
 8000f82:	bf00      	nop
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff ffb2 	bl	8000efc <SysTick_Config>
 8000f98:	4603      	mov	r3, r0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b089      	sub	sp, #36	; 0x24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000fb2:	4b89      	ldr	r3, [pc, #548]	; (80011d8 <HAL_GPIO_Init+0x234>)
 8000fb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000fb6:	e194      	b.n	80012e2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	f000 8186 	beq.w	80012dc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d005      	beq.n	8000fe8 <HAL_GPIO_Init+0x44>
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d130      	bne.n	800104a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	68da      	ldr	r2, [r3, #12]
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800101e:	2201      	movs	r2, #1
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	091b      	lsrs	r3, r3, #4
 8001034:	f003 0201 	and.w	r2, r3, #1
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4313      	orrs	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 0303 	and.w	r3, r3, #3
 8001052:	2b03      	cmp	r3, #3
 8001054:	d017      	beq.n	8001086 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	2203      	movs	r2, #3
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	689a      	ldr	r2, [r3, #8]
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d123      	bne.n	80010da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	08da      	lsrs	r2, r3, #3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	3208      	adds	r2, #8
 800109a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	220f      	movs	r2, #15
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	691a      	ldr	r2, [r3, #16]
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	f003 0307 	and.w	r3, r3, #7
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	08da      	lsrs	r2, r3, #3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3208      	adds	r2, #8
 80010d4:	69b9      	ldr	r1, [r7, #24]
 80010d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	2203      	movs	r2, #3
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 0203 	and.w	r2, r3, #3
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001116:	2b00      	cmp	r3, #0
 8001118:	f000 80e0 	beq.w	80012dc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111c:	4b2f      	ldr	r3, [pc, #188]	; (80011dc <HAL_GPIO_Init+0x238>)
 800111e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001122:	4a2e      	ldr	r2, [pc, #184]	; (80011dc <HAL_GPIO_Init+0x238>)
 8001124:	f043 0302 	orr.w	r3, r3, #2
 8001128:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800112c:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <HAL_GPIO_Init+0x238>)
 800112e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800113a:	4a29      	ldr	r2, [pc, #164]	; (80011e0 <HAL_GPIO_Init+0x23c>)
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	089b      	lsrs	r3, r3, #2
 8001140:	3302      	adds	r3, #2
 8001142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001146:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f003 0303 	and.w	r3, r3, #3
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	220f      	movs	r2, #15
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a20      	ldr	r2, [pc, #128]	; (80011e4 <HAL_GPIO_Init+0x240>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d052      	beq.n	800120c <HAL_GPIO_Init+0x268>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a1f      	ldr	r2, [pc, #124]	; (80011e8 <HAL_GPIO_Init+0x244>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d031      	beq.n	80011d2 <HAL_GPIO_Init+0x22e>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a1e      	ldr	r2, [pc, #120]	; (80011ec <HAL_GPIO_Init+0x248>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d02b      	beq.n	80011ce <HAL_GPIO_Init+0x22a>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a1d      	ldr	r2, [pc, #116]	; (80011f0 <HAL_GPIO_Init+0x24c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d025      	beq.n	80011ca <HAL_GPIO_Init+0x226>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a1c      	ldr	r2, [pc, #112]	; (80011f4 <HAL_GPIO_Init+0x250>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d01f      	beq.n	80011c6 <HAL_GPIO_Init+0x222>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a1b      	ldr	r2, [pc, #108]	; (80011f8 <HAL_GPIO_Init+0x254>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d019      	beq.n	80011c2 <HAL_GPIO_Init+0x21e>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a1a      	ldr	r2, [pc, #104]	; (80011fc <HAL_GPIO_Init+0x258>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d013      	beq.n	80011be <HAL_GPIO_Init+0x21a>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a19      	ldr	r2, [pc, #100]	; (8001200 <HAL_GPIO_Init+0x25c>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d00d      	beq.n	80011ba <HAL_GPIO_Init+0x216>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a18      	ldr	r2, [pc, #96]	; (8001204 <HAL_GPIO_Init+0x260>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d007      	beq.n	80011b6 <HAL_GPIO_Init+0x212>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a17      	ldr	r2, [pc, #92]	; (8001208 <HAL_GPIO_Init+0x264>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d101      	bne.n	80011b2 <HAL_GPIO_Init+0x20e>
 80011ae:	2309      	movs	r3, #9
 80011b0:	e02d      	b.n	800120e <HAL_GPIO_Init+0x26a>
 80011b2:	230a      	movs	r3, #10
 80011b4:	e02b      	b.n	800120e <HAL_GPIO_Init+0x26a>
 80011b6:	2308      	movs	r3, #8
 80011b8:	e029      	b.n	800120e <HAL_GPIO_Init+0x26a>
 80011ba:	2307      	movs	r3, #7
 80011bc:	e027      	b.n	800120e <HAL_GPIO_Init+0x26a>
 80011be:	2306      	movs	r3, #6
 80011c0:	e025      	b.n	800120e <HAL_GPIO_Init+0x26a>
 80011c2:	2305      	movs	r3, #5
 80011c4:	e023      	b.n	800120e <HAL_GPIO_Init+0x26a>
 80011c6:	2304      	movs	r3, #4
 80011c8:	e021      	b.n	800120e <HAL_GPIO_Init+0x26a>
 80011ca:	2303      	movs	r3, #3
 80011cc:	e01f      	b.n	800120e <HAL_GPIO_Init+0x26a>
 80011ce:	2302      	movs	r3, #2
 80011d0:	e01d      	b.n	800120e <HAL_GPIO_Init+0x26a>
 80011d2:	2301      	movs	r3, #1
 80011d4:	e01b      	b.n	800120e <HAL_GPIO_Init+0x26a>
 80011d6:	bf00      	nop
 80011d8:	58000080 	.word	0x58000080
 80011dc:	58024400 	.word	0x58024400
 80011e0:	58000400 	.word	0x58000400
 80011e4:	58020000 	.word	0x58020000
 80011e8:	58020400 	.word	0x58020400
 80011ec:	58020800 	.word	0x58020800
 80011f0:	58020c00 	.word	0x58020c00
 80011f4:	58021000 	.word	0x58021000
 80011f8:	58021400 	.word	0x58021400
 80011fc:	58021800 	.word	0x58021800
 8001200:	58021c00 	.word	0x58021c00
 8001204:	58022000 	.word	0x58022000
 8001208:	58022400 	.word	0x58022400
 800120c:	2300      	movs	r3, #0
 800120e:	69fa      	ldr	r2, [r7, #28]
 8001210:	f002 0203 	and.w	r2, r2, #3
 8001214:	0092      	lsls	r2, r2, #2
 8001216:	4093      	lsls	r3, r2
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800121e:	4938      	ldr	r1, [pc, #224]	; (8001300 <HAL_GPIO_Init+0x35c>)
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	089b      	lsrs	r3, r3, #2
 8001224:	3302      	adds	r3, #2
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800122c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001252:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800125a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001280:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	3301      	adds	r3, #1
 80012e0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	fa22 f303 	lsr.w	r3, r2, r3
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f47f ae63 	bne.w	8000fb8 <HAL_GPIO_Init+0x14>
  }
}
 80012f2:	bf00      	nop
 80012f4:	bf00      	nop
 80012f6:	3724      	adds	r7, #36	; 0x24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	58000400 	.word	0x58000400

08001304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	807b      	strh	r3, [r7, #2]
 8001310:	4613      	mov	r3, r2
 8001312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001314:	787b      	ldrb	r3, [r7, #1]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800131a:	887a      	ldrh	r2, [r7, #2]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001320:	e003      	b.n	800132a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001322:	887b      	ldrh	r3, [r7, #2]
 8001324:	041a      	lsls	r2, r3, #16
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	619a      	str	r2, [r3, #24]
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001336:	b480      	push	{r7}
 8001338:	b085      	sub	sp, #20
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	460b      	mov	r3, r1
 8001340:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001348:	887a      	ldrh	r2, [r7, #2]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4013      	ands	r3, r2
 800134e:	041a      	lsls	r2, r3, #16
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	43d9      	mvns	r1, r3
 8001354:	887b      	ldrh	r3, [r7, #2]
 8001356:	400b      	ands	r3, r1
 8001358:	431a      	orrs	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	619a      	str	r2, [r3, #24]
}
 800135e:	bf00      	nop
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001374:	4b29      	ldr	r3, [pc, #164]	; (800141c <HAL_PWREx_ConfigSupply+0xb0>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	2b06      	cmp	r3, #6
 800137e:	d00a      	beq.n	8001396 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001380:	4b26      	ldr	r3, [pc, #152]	; (800141c <HAL_PWREx_ConfigSupply+0xb0>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	429a      	cmp	r2, r3
 800138c:	d001      	beq.n	8001392 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e040      	b.n	8001414 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001392:	2300      	movs	r3, #0
 8001394:	e03e      	b.n	8001414 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001396:	4b21      	ldr	r3, [pc, #132]	; (800141c <HAL_PWREx_ConfigSupply+0xb0>)
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800139e:	491f      	ldr	r1, [pc, #124]	; (800141c <HAL_PWREx_ConfigSupply+0xb0>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80013a6:	f7ff fd0d 	bl	8000dc4 <HAL_GetTick>
 80013aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80013ac:	e009      	b.n	80013c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80013ae:	f7ff fd09 	bl	8000dc4 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013bc:	d901      	bls.n	80013c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e028      	b.n	8001414 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80013c2:	4b16      	ldr	r3, [pc, #88]	; (800141c <HAL_PWREx_ConfigSupply+0xb0>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013ce:	d1ee      	bne.n	80013ae <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b1e      	cmp	r3, #30
 80013d4:	d008      	beq.n	80013e8 <HAL_PWREx_ConfigSupply+0x7c>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b2e      	cmp	r3, #46	; 0x2e
 80013da:	d005      	beq.n	80013e8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2b1d      	cmp	r3, #29
 80013e0:	d002      	beq.n	80013e8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2b2d      	cmp	r3, #45	; 0x2d
 80013e6:	d114      	bne.n	8001412 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80013e8:	f7ff fcec 	bl	8000dc4 <HAL_GetTick>
 80013ec:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80013ee:	e009      	b.n	8001404 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80013f0:	f7ff fce8 	bl	8000dc4 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013fe:	d901      	bls.n	8001404 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e007      	b.n	8001414 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <HAL_PWREx_ConfigSupply+0xb0>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001410:	d1ee      	bne.n	80013f0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	58024800 	.word	0x58024800

08001420 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08c      	sub	sp, #48	; 0x30
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d102      	bne.n	8001434 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	f000 bc1f 	b.w	8001c72 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 80b3 	beq.w	80015a8 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001442:	4b95      	ldr	r3, [pc, #596]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800144a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800144c:	4b92      	ldr	r3, [pc, #584]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 800144e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001450:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001454:	2b10      	cmp	r3, #16
 8001456:	d007      	beq.n	8001468 <HAL_RCC_OscConfig+0x48>
 8001458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800145a:	2b18      	cmp	r3, #24
 800145c:	d112      	bne.n	8001484 <HAL_RCC_OscConfig+0x64>
 800145e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001460:	f003 0303 	and.w	r3, r3, #3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d10d      	bne.n	8001484 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001468:	4b8b      	ldr	r3, [pc, #556]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001470:	2b00      	cmp	r3, #0
 8001472:	f000 8098 	beq.w	80015a6 <HAL_RCC_OscConfig+0x186>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	f040 8093 	bne.w	80015a6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e3f6      	b.n	8001c72 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800148c:	d106      	bne.n	800149c <HAL_RCC_OscConfig+0x7c>
 800148e:	4b82      	ldr	r3, [pc, #520]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a81      	ldr	r2, [pc, #516]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 8001494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	e058      	b.n	800154e <HAL_RCC_OscConfig+0x12e>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d112      	bne.n	80014ca <HAL_RCC_OscConfig+0xaa>
 80014a4:	4b7c      	ldr	r3, [pc, #496]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a7b      	ldr	r2, [pc, #492]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 80014aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	4b79      	ldr	r3, [pc, #484]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a78      	ldr	r2, [pc, #480]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 80014b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	4b76      	ldr	r3, [pc, #472]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a75      	ldr	r2, [pc, #468]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 80014c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	e041      	b.n	800154e <HAL_RCC_OscConfig+0x12e>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014d2:	d112      	bne.n	80014fa <HAL_RCC_OscConfig+0xda>
 80014d4:	4b70      	ldr	r3, [pc, #448]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a6f      	ldr	r2, [pc, #444]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 80014da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	4b6d      	ldr	r3, [pc, #436]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a6c      	ldr	r2, [pc, #432]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 80014e6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	4b6a      	ldr	r3, [pc, #424]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a69      	ldr	r2, [pc, #420]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 80014f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f6:	6013      	str	r3, [r2, #0]
 80014f8:	e029      	b.n	800154e <HAL_RCC_OscConfig+0x12e>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001502:	d112      	bne.n	800152a <HAL_RCC_OscConfig+0x10a>
 8001504:	4b64      	ldr	r3, [pc, #400]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a63      	ldr	r2, [pc, #396]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 800150a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	4b61      	ldr	r3, [pc, #388]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a60      	ldr	r2, [pc, #384]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 8001516:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	4b5e      	ldr	r3, [pc, #376]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a5d      	ldr	r2, [pc, #372]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 8001522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	e011      	b.n	800154e <HAL_RCC_OscConfig+0x12e>
 800152a:	4b5b      	ldr	r3, [pc, #364]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a5a      	ldr	r2, [pc, #360]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 8001530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	4b58      	ldr	r3, [pc, #352]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a57      	ldr	r2, [pc, #348]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 800153c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	4b55      	ldr	r3, [pc, #340]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a54      	ldr	r2, [pc, #336]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 8001548:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800154c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d013      	beq.n	800157e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001556:	f7ff fc35 	bl	8000dc4 <HAL_GetTick>
 800155a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800155e:	f7ff fc31 	bl	8000dc4 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b64      	cmp	r3, #100	; 0x64
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e380      	b.n	8001c72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001570:	4b49      	ldr	r3, [pc, #292]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0f0      	beq.n	800155e <HAL_RCC_OscConfig+0x13e>
 800157c:	e014      	b.n	80015a8 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157e:	f7ff fc21 	bl	8000dc4 <HAL_GetTick>
 8001582:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001586:	f7ff fc1d 	bl	8000dc4 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b64      	cmp	r3, #100	; 0x64
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e36c      	b.n	8001c72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001598:	4b3f      	ldr	r3, [pc, #252]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1f0      	bne.n	8001586 <HAL_RCC_OscConfig+0x166>
 80015a4:	e000      	b.n	80015a8 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 808c 	beq.w	80016ce <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015b6:	4b38      	ldr	r3, [pc, #224]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015be:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015c0:	4b35      	ldr	r3, [pc, #212]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 80015c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c4:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80015c6:	6a3b      	ldr	r3, [r7, #32]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d007      	beq.n	80015dc <HAL_RCC_OscConfig+0x1bc>
 80015cc:	6a3b      	ldr	r3, [r7, #32]
 80015ce:	2b18      	cmp	r3, #24
 80015d0:	d137      	bne.n	8001642 <HAL_RCC_OscConfig+0x222>
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d132      	bne.n	8001642 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015dc:	4b2e      	ldr	r3, [pc, #184]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d005      	beq.n	80015f4 <HAL_RCC_OscConfig+0x1d4>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d101      	bne.n	80015f4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e33e      	b.n	8001c72 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80015f4:	4b28      	ldr	r3, [pc, #160]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f023 0219 	bic.w	r2, r3, #25
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	4925      	ldr	r1, [pc, #148]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 8001602:	4313      	orrs	r3, r2
 8001604:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001606:	f7ff fbdd 	bl	8000dc4 <HAL_GetTick>
 800160a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800160e:	f7ff fbd9 	bl	8000dc4 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e328      	b.n	8001c72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001620:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0f0      	beq.n	800160e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162c:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	061b      	lsls	r3, r3, #24
 800163a:	4917      	ldr	r1, [pc, #92]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 800163c:	4313      	orrs	r3, r2
 800163e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001640:	e045      	b.n	80016ce <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d028      	beq.n	800169c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800164a:	4b13      	ldr	r3, [pc, #76]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f023 0219 	bic.w	r2, r3, #25
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	4910      	ldr	r1, [pc, #64]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 8001658:	4313      	orrs	r3, r2
 800165a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165c:	f7ff fbb2 	bl	8000dc4 <HAL_GetTick>
 8001660:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001664:	f7ff fbae 	bl	8000dc4 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e2fd      	b.n	8001c72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0304 	and.w	r3, r3, #4
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0f0      	beq.n	8001664 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001682:	4b05      	ldr	r3, [pc, #20]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	061b      	lsls	r3, r3, #24
 8001690:	4901      	ldr	r1, [pc, #4]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 8001692:	4313      	orrs	r3, r2
 8001694:	604b      	str	r3, [r1, #4]
 8001696:	e01a      	b.n	80016ce <HAL_RCC_OscConfig+0x2ae>
 8001698:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800169c:	4b97      	ldr	r3, [pc, #604]	; (80018fc <HAL_RCC_OscConfig+0x4dc>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a96      	ldr	r2, [pc, #600]	; (80018fc <HAL_RCC_OscConfig+0x4dc>)
 80016a2:	f023 0301 	bic.w	r3, r3, #1
 80016a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a8:	f7ff fb8c 	bl	8000dc4 <HAL_GetTick>
 80016ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b0:	f7ff fb88 	bl	8000dc4 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e2d7      	b.n	8001c72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016c2:	4b8e      	ldr	r3, [pc, #568]	; (80018fc <HAL_RCC_OscConfig+0x4dc>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f0      	bne.n	80016b0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0310 	and.w	r3, r3, #16
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d06a      	beq.n	80017b0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016da:	4b88      	ldr	r3, [pc, #544]	; (80018fc <HAL_RCC_OscConfig+0x4dc>)
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016e2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016e4:	4b85      	ldr	r3, [pc, #532]	; (80018fc <HAL_RCC_OscConfig+0x4dc>)
 80016e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	d007      	beq.n	8001700 <HAL_RCC_OscConfig+0x2e0>
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	2b18      	cmp	r3, #24
 80016f4:	d11b      	bne.n	800172e <HAL_RCC_OscConfig+0x30e>
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	f003 0303 	and.w	r3, r3, #3
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d116      	bne.n	800172e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001700:	4b7e      	ldr	r3, [pc, #504]	; (80018fc <HAL_RCC_OscConfig+0x4dc>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001708:	2b00      	cmp	r3, #0
 800170a:	d005      	beq.n	8001718 <HAL_RCC_OscConfig+0x2f8>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	69db      	ldr	r3, [r3, #28]
 8001710:	2b80      	cmp	r3, #128	; 0x80
 8001712:	d001      	beq.n	8001718 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e2ac      	b.n	8001c72 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001718:	4b78      	ldr	r3, [pc, #480]	; (80018fc <HAL_RCC_OscConfig+0x4dc>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	061b      	lsls	r3, r3, #24
 8001726:	4975      	ldr	r1, [pc, #468]	; (80018fc <HAL_RCC_OscConfig+0x4dc>)
 8001728:	4313      	orrs	r3, r2
 800172a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800172c:	e040      	b.n	80017b0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d023      	beq.n	800177e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001736:	4b71      	ldr	r3, [pc, #452]	; (80018fc <HAL_RCC_OscConfig+0x4dc>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a70      	ldr	r2, [pc, #448]	; (80018fc <HAL_RCC_OscConfig+0x4dc>)
 800173c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001742:	f7ff fb3f 	bl	8000dc4 <HAL_GetTick>
 8001746:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800174a:	f7ff fb3b 	bl	8000dc4 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e28a      	b.n	8001c72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800175c:	4b67      	ldr	r3, [pc, #412]	; (80018fc <HAL_RCC_OscConfig+0x4dc>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001768:	4b64      	ldr	r3, [pc, #400]	; (80018fc <HAL_RCC_OscConfig+0x4dc>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	061b      	lsls	r3, r3, #24
 8001776:	4961      	ldr	r1, [pc, #388]	; (80018fc <HAL_RCC_OscConfig+0x4dc>)
 8001778:	4313      	orrs	r3, r2
 800177a:	60cb      	str	r3, [r1, #12]
 800177c:	e018      	b.n	80017b0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800177e:	4b5f      	ldr	r3, [pc, #380]	; (80018fc <HAL_RCC_OscConfig+0x4dc>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a5e      	ldr	r2, [pc, #376]	; (80018fc <HAL_RCC_OscConfig+0x4dc>)
 8001784:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001788:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178a:	f7ff fb1b 	bl	8000dc4 <HAL_GetTick>
 800178e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001792:	f7ff fb17 	bl	8000dc4 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e266      	b.n	8001c72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80017a4:	4b55      	ldr	r3, [pc, #340]	; (80018fc <HAL_RCC_OscConfig+0x4dc>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1f0      	bne.n	8001792 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0308 	and.w	r3, r3, #8
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d036      	beq.n	800182a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d019      	beq.n	80017f8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017c4:	4b4d      	ldr	r3, [pc, #308]	; (80018fc <HAL_RCC_OscConfig+0x4dc>)
 80017c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017c8:	4a4c      	ldr	r2, [pc, #304]	; (80018fc <HAL_RCC_OscConfig+0x4dc>)
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d0:	f7ff faf8 	bl	8000dc4 <HAL_GetTick>
 80017d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d8:	f7ff faf4 	bl	8000dc4 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e243      	b.n	8001c72 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017ea:	4b44      	ldr	r3, [pc, #272]	; (80018fc <HAL_RCC_OscConfig+0x4dc>)
 80017ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0x3b8>
 80017f6:	e018      	b.n	800182a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017f8:	4b40      	ldr	r3, [pc, #256]	; (80018fc <HAL_RCC_OscConfig+0x4dc>)
 80017fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017fc:	4a3f      	ldr	r2, [pc, #252]	; (80018fc <HAL_RCC_OscConfig+0x4dc>)
 80017fe:	f023 0301 	bic.w	r3, r3, #1
 8001802:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001804:	f7ff fade 	bl	8000dc4 <HAL_GetTick>
 8001808:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800180c:	f7ff fada 	bl	8000dc4 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e229      	b.n	8001c72 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800181e:	4b37      	ldr	r3, [pc, #220]	; (80018fc <HAL_RCC_OscConfig+0x4dc>)
 8001820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f0      	bne.n	800180c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0320 	and.w	r3, r3, #32
 8001832:	2b00      	cmp	r3, #0
 8001834:	d036      	beq.n	80018a4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d019      	beq.n	8001872 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800183e:	4b2f      	ldr	r3, [pc, #188]	; (80018fc <HAL_RCC_OscConfig+0x4dc>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a2e      	ldr	r2, [pc, #184]	; (80018fc <HAL_RCC_OscConfig+0x4dc>)
 8001844:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001848:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800184a:	f7ff fabb 	bl	8000dc4 <HAL_GetTick>
 800184e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001852:	f7ff fab7 	bl	8000dc4 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e206      	b.n	8001c72 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001864:	4b25      	ldr	r3, [pc, #148]	; (80018fc <HAL_RCC_OscConfig+0x4dc>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0f0      	beq.n	8001852 <HAL_RCC_OscConfig+0x432>
 8001870:	e018      	b.n	80018a4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001872:	4b22      	ldr	r3, [pc, #136]	; (80018fc <HAL_RCC_OscConfig+0x4dc>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a21      	ldr	r2, [pc, #132]	; (80018fc <HAL_RCC_OscConfig+0x4dc>)
 8001878:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800187c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800187e:	f7ff faa1 	bl	8000dc4 <HAL_GetTick>
 8001882:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001886:	f7ff fa9d 	bl	8000dc4 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e1ec      	b.n	8001c72 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001898:	4b18      	ldr	r3, [pc, #96]	; (80018fc <HAL_RCC_OscConfig+0x4dc>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1f0      	bne.n	8001886 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 80af 	beq.w	8001a10 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80018b2:	4b13      	ldr	r3, [pc, #76]	; (8001900 <HAL_RCC_OscConfig+0x4e0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a12      	ldr	r2, [pc, #72]	; (8001900 <HAL_RCC_OscConfig+0x4e0>)
 80018b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80018be:	f7ff fa81 	bl	8000dc4 <HAL_GetTick>
 80018c2:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c6:	f7ff fa7d 	bl	8000dc4 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b64      	cmp	r3, #100	; 0x64
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e1cc      	b.n	8001c72 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018d8:	4b09      	ldr	r3, [pc, #36]	; (8001900 <HAL_RCC_OscConfig+0x4e0>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0f0      	beq.n	80018c6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d10b      	bne.n	8001904 <HAL_RCC_OscConfig+0x4e4>
 80018ec:	4b03      	ldr	r3, [pc, #12]	; (80018fc <HAL_RCC_OscConfig+0x4dc>)
 80018ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f0:	4a02      	ldr	r2, [pc, #8]	; (80018fc <HAL_RCC_OscConfig+0x4dc>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	6713      	str	r3, [r2, #112]	; 0x70
 80018f8:	e05b      	b.n	80019b2 <HAL_RCC_OscConfig+0x592>
 80018fa:	bf00      	nop
 80018fc:	58024400 	.word	0x58024400
 8001900:	58024800 	.word	0x58024800
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d112      	bne.n	8001932 <HAL_RCC_OscConfig+0x512>
 800190c:	4b9d      	ldr	r3, [pc, #628]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 800190e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001910:	4a9c      	ldr	r2, [pc, #624]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001912:	f023 0301 	bic.w	r3, r3, #1
 8001916:	6713      	str	r3, [r2, #112]	; 0x70
 8001918:	4b9a      	ldr	r3, [pc, #616]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 800191a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191c:	4a99      	ldr	r2, [pc, #612]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 800191e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001922:	6713      	str	r3, [r2, #112]	; 0x70
 8001924:	4b97      	ldr	r3, [pc, #604]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001928:	4a96      	ldr	r2, [pc, #600]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 800192a:	f023 0304 	bic.w	r3, r3, #4
 800192e:	6713      	str	r3, [r2, #112]	; 0x70
 8001930:	e03f      	b.n	80019b2 <HAL_RCC_OscConfig+0x592>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	2b05      	cmp	r3, #5
 8001938:	d112      	bne.n	8001960 <HAL_RCC_OscConfig+0x540>
 800193a:	4b92      	ldr	r3, [pc, #584]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 800193c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193e:	4a91      	ldr	r2, [pc, #580]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001940:	f043 0304 	orr.w	r3, r3, #4
 8001944:	6713      	str	r3, [r2, #112]	; 0x70
 8001946:	4b8f      	ldr	r3, [pc, #572]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800194a:	4a8e      	ldr	r2, [pc, #568]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 800194c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001950:	6713      	str	r3, [r2, #112]	; 0x70
 8001952:	4b8c      	ldr	r3, [pc, #560]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001956:	4a8b      	ldr	r2, [pc, #556]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6713      	str	r3, [r2, #112]	; 0x70
 800195e:	e028      	b.n	80019b2 <HAL_RCC_OscConfig+0x592>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2b85      	cmp	r3, #133	; 0x85
 8001966:	d112      	bne.n	800198e <HAL_RCC_OscConfig+0x56e>
 8001968:	4b86      	ldr	r3, [pc, #536]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 800196a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196c:	4a85      	ldr	r2, [pc, #532]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 800196e:	f043 0304 	orr.w	r3, r3, #4
 8001972:	6713      	str	r3, [r2, #112]	; 0x70
 8001974:	4b83      	ldr	r3, [pc, #524]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001978:	4a82      	ldr	r2, [pc, #520]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 800197a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800197e:	6713      	str	r3, [r2, #112]	; 0x70
 8001980:	4b80      	ldr	r3, [pc, #512]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001984:	4a7f      	ldr	r2, [pc, #508]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	6713      	str	r3, [r2, #112]	; 0x70
 800198c:	e011      	b.n	80019b2 <HAL_RCC_OscConfig+0x592>
 800198e:	4b7d      	ldr	r3, [pc, #500]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001992:	4a7c      	ldr	r2, [pc, #496]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001994:	f023 0301 	bic.w	r3, r3, #1
 8001998:	6713      	str	r3, [r2, #112]	; 0x70
 800199a:	4b7a      	ldr	r3, [pc, #488]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 800199c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199e:	4a79      	ldr	r2, [pc, #484]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 80019a0:	f023 0304 	bic.w	r3, r3, #4
 80019a4:	6713      	str	r3, [r2, #112]	; 0x70
 80019a6:	4b77      	ldr	r3, [pc, #476]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 80019a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019aa:	4a76      	ldr	r2, [pc, #472]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 80019ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d015      	beq.n	80019e6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ba:	f7ff fa03 	bl	8000dc4 <HAL_GetTick>
 80019be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019c0:	e00a      	b.n	80019d8 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c2:	f7ff f9ff 	bl	8000dc4 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e14c      	b.n	8001c72 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019d8:	4b6a      	ldr	r3, [pc, #424]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 80019da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0ee      	beq.n	80019c2 <HAL_RCC_OscConfig+0x5a2>
 80019e4:	e014      	b.n	8001a10 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e6:	f7ff f9ed 	bl	8000dc4 <HAL_GetTick>
 80019ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019ec:	e00a      	b.n	8001a04 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ee:	f7ff f9e9 	bl	8000dc4 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e136      	b.n	8001c72 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a04:	4b5f      	ldr	r3, [pc, #380]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1ee      	bne.n	80019ee <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 812b 	beq.w	8001c70 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001a1a:	4b5a      	ldr	r3, [pc, #360]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a22:	2b18      	cmp	r3, #24
 8001a24:	f000 80bb 	beq.w	8001b9e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	f040 8095 	bne.w	8001b5c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a32:	4b54      	ldr	r3, [pc, #336]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a53      	ldr	r2, [pc, #332]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001a38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3e:	f7ff f9c1 	bl	8000dc4 <HAL_GetTick>
 8001a42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a46:	f7ff f9bd 	bl	8000dc4 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e10c      	b.n	8001c72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a58:	4b4a      	ldr	r3, [pc, #296]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1f0      	bne.n	8001a46 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a64:	4b47      	ldr	r3, [pc, #284]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001a66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a68:	4b47      	ldr	r3, [pc, #284]	; (8001b88 <HAL_RCC_OscConfig+0x768>)
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a74:	0112      	lsls	r2, r2, #4
 8001a76:	430a      	orrs	r2, r1
 8001a78:	4942      	ldr	r1, [pc, #264]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	628b      	str	r3, [r1, #40]	; 0x28
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	3b01      	subs	r3, #1
 8001a84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	025b      	lsls	r3, r3, #9
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	041b      	lsls	r3, r3, #16
 8001a9c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	061b      	lsls	r3, r3, #24
 8001aaa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001aae:	4935      	ldr	r1, [pc, #212]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001ab4:	4b33      	ldr	r3, [pc, #204]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab8:	4a32      	ldr	r2, [pc, #200]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001aba:	f023 0301 	bic.w	r3, r3, #1
 8001abe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001ac0:	4b30      	ldr	r3, [pc, #192]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001ac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ac4:	4b31      	ldr	r3, [pc, #196]	; (8001b8c <HAL_RCC_OscConfig+0x76c>)
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001acc:	00d2      	lsls	r2, r2, #3
 8001ace:	492d      	ldr	r1, [pc, #180]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001ad4:	4b2b      	ldr	r3, [pc, #172]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad8:	f023 020c 	bic.w	r2, r3, #12
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	4928      	ldr	r1, [pc, #160]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001ae6:	4b27      	ldr	r3, [pc, #156]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aea:	f023 0202 	bic.w	r2, r3, #2
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	4924      	ldr	r1, [pc, #144]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001af8:	4b22      	ldr	r3, [pc, #136]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afc:	4a21      	ldr	r2, [pc, #132]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001b04:	4b1f      	ldr	r3, [pc, #124]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b08:	4a1e      	ldr	r2, [pc, #120]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001b10:	4b1c      	ldr	r3, [pc, #112]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b14:	4a1b      	ldr	r2, [pc, #108]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001b16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001b1c:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b20:	4a18      	ldr	r2, [pc, #96]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b28:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a15      	ldr	r2, [pc, #84]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001b2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b34:	f7ff f946 	bl	8000dc4 <HAL_GetTick>
 8001b38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b3c:	f7ff f942 	bl	8000dc4 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e091      	b.n	8001c72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b4e:	4b0d      	ldr	r3, [pc, #52]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f0      	beq.n	8001b3c <HAL_RCC_OscConfig+0x71c>
 8001b5a:	e089      	b.n	8001c70 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5c:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a08      	ldr	r2, [pc, #32]	; (8001b84 <HAL_RCC_OscConfig+0x764>)
 8001b62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b68:	f7ff f92c 	bl	8000dc4 <HAL_GetTick>
 8001b6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b6e:	e00f      	b.n	8001b90 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b70:	f7ff f928 	bl	8000dc4 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d908      	bls.n	8001b90 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e077      	b.n	8001c72 <HAL_RCC_OscConfig+0x852>
 8001b82:	bf00      	nop
 8001b84:	58024400 	.word	0x58024400
 8001b88:	fffffc0c 	.word	0xfffffc0c
 8001b8c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b90:	4b3a      	ldr	r3, [pc, #232]	; (8001c7c <HAL_RCC_OscConfig+0x85c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1e9      	bne.n	8001b70 <HAL_RCC_OscConfig+0x750>
 8001b9c:	e068      	b.n	8001c70 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001b9e:	4b37      	ldr	r3, [pc, #220]	; (8001c7c <HAL_RCC_OscConfig+0x85c>)
 8001ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001ba4:	4b35      	ldr	r3, [pc, #212]	; (8001c7c <HAL_RCC_OscConfig+0x85c>)
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba8:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d031      	beq.n	8001c16 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	f003 0203 	and.w	r2, r3, #3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d12a      	bne.n	8001c16 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	091b      	lsrs	r3, r3, #4
 8001bc4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d122      	bne.n	8001c16 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d11a      	bne.n	8001c16 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	0a5b      	lsrs	r3, r3, #9
 8001be4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bec:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d111      	bne.n	8001c16 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	0c1b      	lsrs	r3, r3, #16
 8001bf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bfe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d108      	bne.n	8001c16 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	0e1b      	lsrs	r3, r3, #24
 8001c08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c10:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d001      	beq.n	8001c1a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e02b      	b.n	8001c72 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001c1a:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <HAL_RCC_OscConfig+0x85c>)
 8001c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c1e:	08db      	lsrs	r3, r3, #3
 8001c20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001c24:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d01f      	beq.n	8001c70 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_RCC_OscConfig+0x85c>)
 8001c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c34:	4a11      	ldr	r2, [pc, #68]	; (8001c7c <HAL_RCC_OscConfig+0x85c>)
 8001c36:	f023 0301 	bic.w	r3, r3, #1
 8001c3a:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c3c:	f7ff f8c2 	bl	8000dc4 <HAL_GetTick>
 8001c40:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001c42:	bf00      	nop
 8001c44:	f7ff f8be 	bl	8000dc4 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d0f9      	beq.n	8001c44 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c50:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <HAL_RCC_OscConfig+0x85c>)
 8001c52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c54:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <HAL_RCC_OscConfig+0x860>)
 8001c56:	4013      	ands	r3, r2
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c5c:	00d2      	lsls	r2, r2, #3
 8001c5e:	4907      	ldr	r1, [pc, #28]	; (8001c7c <HAL_RCC_OscConfig+0x85c>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <HAL_RCC_OscConfig+0x85c>)
 8001c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c68:	4a04      	ldr	r2, [pc, #16]	; (8001c7c <HAL_RCC_OscConfig+0x85c>)
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3730      	adds	r7, #48	; 0x30
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	58024400 	.word	0x58024400
 8001c80:	ffff0007 	.word	0xffff0007

08001c84 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e19c      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c98:	4b8a      	ldr	r3, [pc, #552]	; (8001ec4 <HAL_RCC_ClockConfig+0x240>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 030f 	and.w	r3, r3, #15
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d910      	bls.n	8001cc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca6:	4b87      	ldr	r3, [pc, #540]	; (8001ec4 <HAL_RCC_ClockConfig+0x240>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f023 020f 	bic.w	r2, r3, #15
 8001cae:	4985      	ldr	r1, [pc, #532]	; (8001ec4 <HAL_RCC_ClockConfig+0x240>)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb6:	4b83      	ldr	r3, [pc, #524]	; (8001ec4 <HAL_RCC_ClockConfig+0x240>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d001      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e184      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d010      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	691a      	ldr	r2, [r3, #16]
 8001cd8:	4b7b      	ldr	r3, [pc, #492]	; (8001ec8 <HAL_RCC_ClockConfig+0x244>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d908      	bls.n	8001cf6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ce4:	4b78      	ldr	r3, [pc, #480]	; (8001ec8 <HAL_RCC_ClockConfig+0x244>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	4975      	ldr	r1, [pc, #468]	; (8001ec8 <HAL_RCC_ClockConfig+0x244>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d010      	beq.n	8001d24 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	695a      	ldr	r2, [r3, #20]
 8001d06:	4b70      	ldr	r3, [pc, #448]	; (8001ec8 <HAL_RCC_ClockConfig+0x244>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d908      	bls.n	8001d24 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d12:	4b6d      	ldr	r3, [pc, #436]	; (8001ec8 <HAL_RCC_ClockConfig+0x244>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	496a      	ldr	r1, [pc, #424]	; (8001ec8 <HAL_RCC_ClockConfig+0x244>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0310 	and.w	r3, r3, #16
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d010      	beq.n	8001d52 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	699a      	ldr	r2, [r3, #24]
 8001d34:	4b64      	ldr	r3, [pc, #400]	; (8001ec8 <HAL_RCC_ClockConfig+0x244>)
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d908      	bls.n	8001d52 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d40:	4b61      	ldr	r3, [pc, #388]	; (8001ec8 <HAL_RCC_ClockConfig+0x244>)
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	495e      	ldr	r1, [pc, #376]	; (8001ec8 <HAL_RCC_ClockConfig+0x244>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0320 	and.w	r3, r3, #32
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d010      	beq.n	8001d80 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69da      	ldr	r2, [r3, #28]
 8001d62:	4b59      	ldr	r3, [pc, #356]	; (8001ec8 <HAL_RCC_ClockConfig+0x244>)
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d908      	bls.n	8001d80 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001d6e:	4b56      	ldr	r3, [pc, #344]	; (8001ec8 <HAL_RCC_ClockConfig+0x244>)
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	4953      	ldr	r1, [pc, #332]	; (8001ec8 <HAL_RCC_ClockConfig+0x244>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d010      	beq.n	8001dae <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68da      	ldr	r2, [r3, #12]
 8001d90:	4b4d      	ldr	r3, [pc, #308]	; (8001ec8 <HAL_RCC_ClockConfig+0x244>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	f003 030f 	and.w	r3, r3, #15
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d908      	bls.n	8001dae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d9c:	4b4a      	ldr	r3, [pc, #296]	; (8001ec8 <HAL_RCC_ClockConfig+0x244>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	f023 020f 	bic.w	r2, r3, #15
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	4947      	ldr	r1, [pc, #284]	; (8001ec8 <HAL_RCC_ClockConfig+0x244>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d055      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001dba:	4b43      	ldr	r3, [pc, #268]	; (8001ec8 <HAL_RCC_ClockConfig+0x244>)
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	4940      	ldr	r1, [pc, #256]	; (8001ec8 <HAL_RCC_ClockConfig+0x244>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d107      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dd4:	4b3c      	ldr	r3, [pc, #240]	; (8001ec8 <HAL_RCC_ClockConfig+0x244>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d121      	bne.n	8001e24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e0f6      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b03      	cmp	r3, #3
 8001dea:	d107      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001dec:	4b36      	ldr	r3, [pc, #216]	; (8001ec8 <HAL_RCC_ClockConfig+0x244>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d115      	bne.n	8001e24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e0ea      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d107      	bne.n	8001e14 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e04:	4b30      	ldr	r3, [pc, #192]	; (8001ec8 <HAL_RCC_ClockConfig+0x244>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d109      	bne.n	8001e24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e0de      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e14:	4b2c      	ldr	r3, [pc, #176]	; (8001ec8 <HAL_RCC_ClockConfig+0x244>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e0d6      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e24:	4b28      	ldr	r3, [pc, #160]	; (8001ec8 <HAL_RCC_ClockConfig+0x244>)
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	f023 0207 	bic.w	r2, r3, #7
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	4925      	ldr	r1, [pc, #148]	; (8001ec8 <HAL_RCC_ClockConfig+0x244>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e36:	f7fe ffc5 	bl	8000dc4 <HAL_GetTick>
 8001e3a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3c:	e00a      	b.n	8001e54 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e3e:	f7fe ffc1 	bl	8000dc4 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e0be      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e54:	4b1c      	ldr	r3, [pc, #112]	; (8001ec8 <HAL_RCC_ClockConfig+0x244>)
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d1eb      	bne.n	8001e3e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d010      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68da      	ldr	r2, [r3, #12]
 8001e76:	4b14      	ldr	r3, [pc, #80]	; (8001ec8 <HAL_RCC_ClockConfig+0x244>)
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d208      	bcs.n	8001e94 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e82:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <HAL_RCC_ClockConfig+0x244>)
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	f023 020f 	bic.w	r2, r3, #15
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	490e      	ldr	r1, [pc, #56]	; (8001ec8 <HAL_RCC_ClockConfig+0x244>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_ClockConfig+0x240>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 030f 	and.w	r3, r3, #15
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d214      	bcs.n	8001ecc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea2:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HAL_RCC_ClockConfig+0x240>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f023 020f 	bic.w	r2, r3, #15
 8001eaa:	4906      	ldr	r1, [pc, #24]	; (8001ec4 <HAL_RCC_ClockConfig+0x240>)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb2:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <HAL_RCC_ClockConfig+0x240>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d005      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e086      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x34e>
 8001ec4:	52002000 	.word	0x52002000
 8001ec8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d010      	beq.n	8001efa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691a      	ldr	r2, [r3, #16]
 8001edc:	4b3f      	ldr	r3, [pc, #252]	; (8001fdc <HAL_RCC_ClockConfig+0x358>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d208      	bcs.n	8001efa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ee8:	4b3c      	ldr	r3, [pc, #240]	; (8001fdc <HAL_RCC_ClockConfig+0x358>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	4939      	ldr	r1, [pc, #228]	; (8001fdc <HAL_RCC_ClockConfig+0x358>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d010      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	695a      	ldr	r2, [r3, #20]
 8001f0a:	4b34      	ldr	r3, [pc, #208]	; (8001fdc <HAL_RCC_ClockConfig+0x358>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d208      	bcs.n	8001f28 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f16:	4b31      	ldr	r3, [pc, #196]	; (8001fdc <HAL_RCC_ClockConfig+0x358>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	492e      	ldr	r1, [pc, #184]	; (8001fdc <HAL_RCC_ClockConfig+0x358>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0310 	and.w	r3, r3, #16
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d010      	beq.n	8001f56 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	699a      	ldr	r2, [r3, #24]
 8001f38:	4b28      	ldr	r3, [pc, #160]	; (8001fdc <HAL_RCC_ClockConfig+0x358>)
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d208      	bcs.n	8001f56 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f44:	4b25      	ldr	r3, [pc, #148]	; (8001fdc <HAL_RCC_ClockConfig+0x358>)
 8001f46:	69db      	ldr	r3, [r3, #28]
 8001f48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	4922      	ldr	r1, [pc, #136]	; (8001fdc <HAL_RCC_ClockConfig+0x358>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0320 	and.w	r3, r3, #32
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d010      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69da      	ldr	r2, [r3, #28]
 8001f66:	4b1d      	ldr	r3, [pc, #116]	; (8001fdc <HAL_RCC_ClockConfig+0x358>)
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d208      	bcs.n	8001f84 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001f72:	4b1a      	ldr	r3, [pc, #104]	; (8001fdc <HAL_RCC_ClockConfig+0x358>)
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	4917      	ldr	r1, [pc, #92]	; (8001fdc <HAL_RCC_ClockConfig+0x358>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001f84:	f000 f834 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <HAL_RCC_ClockConfig+0x358>)
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	0a1b      	lsrs	r3, r3, #8
 8001f90:	f003 030f 	and.w	r3, r3, #15
 8001f94:	4912      	ldr	r1, [pc, #72]	; (8001fe0 <HAL_RCC_ClockConfig+0x35c>)
 8001f96:	5ccb      	ldrb	r3, [r1, r3]
 8001f98:	f003 031f 	and.w	r3, r3, #31
 8001f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <HAL_RCC_ClockConfig+0x358>)
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	4a0d      	ldr	r2, [pc, #52]	; (8001fe0 <HAL_RCC_ClockConfig+0x35c>)
 8001fac:	5cd3      	ldrb	r3, [r2, r3]
 8001fae:	f003 031f 	and.w	r3, r3, #31
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb8:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <HAL_RCC_ClockConfig+0x360>)
 8001fba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fbc:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <HAL_RCC_ClockConfig+0x364>)
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <HAL_RCC_ClockConfig+0x368>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe feb2 	bl	8000d30 <HAL_InitTick>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	58024400 	.word	0x58024400
 8001fe0:	080053a8 	.word	0x080053a8
 8001fe4:	24000004 	.word	0x24000004
 8001fe8:	24000000 	.word	0x24000000
 8001fec:	24000008 	.word	0x24000008

08001ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b089      	sub	sp, #36	; 0x24
 8001ff4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ff6:	4bb3      	ldr	r3, [pc, #716]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ffe:	2b18      	cmp	r3, #24
 8002000:	f200 8155 	bhi.w	80022ae <HAL_RCC_GetSysClockFreq+0x2be>
 8002004:	a201      	add	r2, pc, #4	; (adr r2, 800200c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800200a:	bf00      	nop
 800200c:	08002071 	.word	0x08002071
 8002010:	080022af 	.word	0x080022af
 8002014:	080022af 	.word	0x080022af
 8002018:	080022af 	.word	0x080022af
 800201c:	080022af 	.word	0x080022af
 8002020:	080022af 	.word	0x080022af
 8002024:	080022af 	.word	0x080022af
 8002028:	080022af 	.word	0x080022af
 800202c:	08002097 	.word	0x08002097
 8002030:	080022af 	.word	0x080022af
 8002034:	080022af 	.word	0x080022af
 8002038:	080022af 	.word	0x080022af
 800203c:	080022af 	.word	0x080022af
 8002040:	080022af 	.word	0x080022af
 8002044:	080022af 	.word	0x080022af
 8002048:	080022af 	.word	0x080022af
 800204c:	0800209d 	.word	0x0800209d
 8002050:	080022af 	.word	0x080022af
 8002054:	080022af 	.word	0x080022af
 8002058:	080022af 	.word	0x080022af
 800205c:	080022af 	.word	0x080022af
 8002060:	080022af 	.word	0x080022af
 8002064:	080022af 	.word	0x080022af
 8002068:	080022af 	.word	0x080022af
 800206c:	080020a3 	.word	0x080020a3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002070:	4b94      	ldr	r3, [pc, #592]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0320 	and.w	r3, r3, #32
 8002078:	2b00      	cmp	r3, #0
 800207a:	d009      	beq.n	8002090 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800207c:	4b91      	ldr	r3, [pc, #580]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	08db      	lsrs	r3, r3, #3
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	4a90      	ldr	r2, [pc, #576]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002088:	fa22 f303 	lsr.w	r3, r2, r3
 800208c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800208e:	e111      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002090:	4b8d      	ldr	r3, [pc, #564]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002092:	61bb      	str	r3, [r7, #24]
      break;
 8002094:	e10e      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002096:	4b8d      	ldr	r3, [pc, #564]	; (80022cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002098:	61bb      	str	r3, [r7, #24]
      break;
 800209a:	e10b      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800209c:	4b8c      	ldr	r3, [pc, #560]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800209e:	61bb      	str	r3, [r7, #24]
      break;
 80020a0:	e108      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80020a2:	4b88      	ldr	r3, [pc, #544]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80020ac:	4b85      	ldr	r3, [pc, #532]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b0:	091b      	lsrs	r3, r3, #4
 80020b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020b6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80020b8:	4b82      	ldr	r3, [pc, #520]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80020c2:	4b80      	ldr	r3, [pc, #512]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c6:	08db      	lsrs	r3, r3, #3
 80020c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	fb02 f303 	mul.w	r3, r2, r3
 80020d2:	ee07 3a90 	vmov	s15, r3
 80020d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020da:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 80e1 	beq.w	80022a8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	f000 8083 	beq.w	80021f4 <HAL_RCC_GetSysClockFreq+0x204>
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	f200 80a1 	bhi.w	8002238 <HAL_RCC_GetSysClockFreq+0x248>
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <HAL_RCC_GetSysClockFreq+0x114>
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d056      	beq.n	80021b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002102:	e099      	b.n	8002238 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002104:	4b6f      	ldr	r3, [pc, #444]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0320 	and.w	r3, r3, #32
 800210c:	2b00      	cmp	r3, #0
 800210e:	d02d      	beq.n	800216c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002110:	4b6c      	ldr	r3, [pc, #432]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	08db      	lsrs	r3, r3, #3
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	4a6b      	ldr	r2, [pc, #428]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800211c:	fa22 f303 	lsr.w	r3, r2, r3
 8002120:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	ee07 3a90 	vmov	s15, r3
 8002128:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	ee07 3a90 	vmov	s15, r3
 8002132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800213a:	4b62      	ldr	r3, [pc, #392]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002142:	ee07 3a90 	vmov	s15, r3
 8002146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800214a:	ed97 6a02 	vldr	s12, [r7, #8]
 800214e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80022d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800215a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800215e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002166:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800216a:	e087      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	ee07 3a90 	vmov	s15, r3
 8002172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002176:	eddf 6a58 	vldr	s13, [pc, #352]	; 80022d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800217a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800217e:	4b51      	ldr	r3, [pc, #324]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002186:	ee07 3a90 	vmov	s15, r3
 800218a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800218e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002192:	eddf 5a50 	vldr	s11, [pc, #320]	; 80022d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800219a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800219e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80021ae:	e065      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	ee07 3a90 	vmov	s15, r3
 80021b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021ba:	eddf 6a48 	vldr	s13, [pc, #288]	; 80022dc <HAL_RCC_GetSysClockFreq+0x2ec>
 80021be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021c2:	4b40      	ldr	r3, [pc, #256]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021ca:	ee07 3a90 	vmov	s15, r3
 80021ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80021d6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80022d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80021f2:	e043      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	ee07 3a90 	vmov	s15, r3
 80021fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021fe:	eddf 6a38 	vldr	s13, [pc, #224]	; 80022e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002206:	4b2f      	ldr	r3, [pc, #188]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800220e:	ee07 3a90 	vmov	s15, r3
 8002212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002216:	ed97 6a02 	vldr	s12, [r7, #8]
 800221a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80022d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800221e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002226:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800222a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800222e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002232:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002236:	e021      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	ee07 3a90 	vmov	s15, r3
 800223e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002242:	eddf 6a26 	vldr	s13, [pc, #152]	; 80022dc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800224a:	4b1e      	ldr	r3, [pc, #120]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002252:	ee07 3a90 	vmov	s15, r3
 8002256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800225a:	ed97 6a02 	vldr	s12, [r7, #8]
 800225e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80022d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800226a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800226e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002276:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800227a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800227c:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800227e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002280:	0a5b      	lsrs	r3, r3, #9
 8002282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002286:	3301      	adds	r3, #1
 8002288:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	ee07 3a90 	vmov	s15, r3
 8002290:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002294:	edd7 6a07 	vldr	s13, [r7, #28]
 8002298:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800229c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022a0:	ee17 3a90 	vmov	r3, s15
 80022a4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80022a6:	e005      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	61bb      	str	r3, [r7, #24]
      break;
 80022ac:	e002      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80022ae:	4b07      	ldr	r3, [pc, #28]	; (80022cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80022b0:	61bb      	str	r3, [r7, #24]
      break;
 80022b2:	bf00      	nop
  }

  return sysclockfreq;
 80022b4:	69bb      	ldr	r3, [r7, #24]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3724      	adds	r7, #36	; 0x24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	58024400 	.word	0x58024400
 80022c8:	03d09000 	.word	0x03d09000
 80022cc:	003d0900 	.word	0x003d0900
 80022d0:	007a1200 	.word	0x007a1200
 80022d4:	46000000 	.word	0x46000000
 80022d8:	4c742400 	.word	0x4c742400
 80022dc:	4a742400 	.word	0x4a742400
 80022e0:	4af42400 	.word	0x4af42400

080022e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80022ea:	f7ff fe81 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 80022ee:	4602      	mov	r2, r0
 80022f0:	4b10      	ldr	r3, [pc, #64]	; (8002334 <HAL_RCC_GetHCLKFreq+0x50>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	0a1b      	lsrs	r3, r3, #8
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	490f      	ldr	r1, [pc, #60]	; (8002338 <HAL_RCC_GetHCLKFreq+0x54>)
 80022fc:	5ccb      	ldrb	r3, [r1, r3]
 80022fe:	f003 031f 	and.w	r3, r3, #31
 8002302:	fa22 f303 	lsr.w	r3, r2, r3
 8002306:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002308:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <HAL_RCC_GetHCLKFreq+0x50>)
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	f003 030f 	and.w	r3, r3, #15
 8002310:	4a09      	ldr	r2, [pc, #36]	; (8002338 <HAL_RCC_GetHCLKFreq+0x54>)
 8002312:	5cd3      	ldrb	r3, [r2, r3]
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	fa22 f303 	lsr.w	r3, r2, r3
 800231e:	4a07      	ldr	r2, [pc, #28]	; (800233c <HAL_RCC_GetHCLKFreq+0x58>)
 8002320:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002322:	4a07      	ldr	r2, [pc, #28]	; (8002340 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002328:	4b04      	ldr	r3, [pc, #16]	; (800233c <HAL_RCC_GetHCLKFreq+0x58>)
 800232a:	681b      	ldr	r3, [r3, #0]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	58024400 	.word	0x58024400
 8002338:	080053a8 	.word	0x080053a8
 800233c:	24000004 	.word	0x24000004
 8002340:	24000000 	.word	0x24000000

08002344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002348:	f7ff ffcc 	bl	80022e4 <HAL_RCC_GetHCLKFreq>
 800234c:	4602      	mov	r2, r0
 800234e:	4b06      	ldr	r3, [pc, #24]	; (8002368 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	091b      	lsrs	r3, r3, #4
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	4904      	ldr	r1, [pc, #16]	; (800236c <HAL_RCC_GetPCLK1Freq+0x28>)
 800235a:	5ccb      	ldrb	r3, [r1, r3]
 800235c:	f003 031f 	and.w	r3, r3, #31
 8002360:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002364:	4618      	mov	r0, r3
 8002366:	bd80      	pop	{r7, pc}
 8002368:	58024400 	.word	0x58024400
 800236c:	080053a8 	.word	0x080053a8

08002370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002374:	f7ff ffb6 	bl	80022e4 <HAL_RCC_GetHCLKFreq>
 8002378:	4602      	mov	r2, r0
 800237a:	4b06      	ldr	r3, [pc, #24]	; (8002394 <HAL_RCC_GetPCLK2Freq+0x24>)
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	0a1b      	lsrs	r3, r3, #8
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	4904      	ldr	r1, [pc, #16]	; (8002398 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002386:	5ccb      	ldrb	r3, [r1, r3]
 8002388:	f003 031f 	and.w	r3, r3, #31
 800238c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002390:	4618      	mov	r0, r3
 8002392:	bd80      	pop	{r7, pc}
 8002394:	58024400 	.word	0x58024400
 8002398:	080053a8 	.word	0x080053a8

0800239c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800239c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023a0:	b0c8      	sub	sp, #288	; 0x120
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023a8:	2300      	movs	r3, #0
 80023aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023ae:	2300      	movs	r3, #0
 80023b0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023bc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80023c0:	2500      	movs	r5, #0
 80023c2:	ea54 0305 	orrs.w	r3, r4, r5
 80023c6:	d049      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80023c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80023d2:	d02f      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80023d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80023d8:	d828      	bhi.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80023da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023de:	d01a      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80023e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023e4:	d822      	bhi.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80023ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023ee:	d007      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023f0:	e01c      	b.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023f2:	4ba7      	ldr	r3, [pc, #668]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f6:	4aa6      	ldr	r2, [pc, #664]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80023fe:	e01a      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002400:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002404:	3308      	adds	r3, #8
 8002406:	2102      	movs	r1, #2
 8002408:	4618      	mov	r0, r3
 800240a:	f001 fc43 	bl	8003c94 <RCCEx_PLL2_Config>
 800240e:	4603      	mov	r3, r0
 8002410:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002414:	e00f      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002416:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800241a:	3328      	adds	r3, #40	; 0x28
 800241c:	2102      	movs	r1, #2
 800241e:	4618      	mov	r0, r3
 8002420:	f001 fcea 	bl	8003df8 <RCCEx_PLL3_Config>
 8002424:	4603      	mov	r3, r0
 8002426:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800242a:	e004      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002432:	e000      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002434:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002436:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10a      	bne.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800243e:	4b94      	ldr	r3, [pc, #592]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002442:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002446:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800244a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800244c:	4a90      	ldr	r2, [pc, #576]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800244e:	430b      	orrs	r3, r1
 8002450:	6513      	str	r3, [r2, #80]	; 0x50
 8002452:	e003      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002454:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002458:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800245c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002464:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002468:	f04f 0900 	mov.w	r9, #0
 800246c:	ea58 0309 	orrs.w	r3, r8, r9
 8002470:	d047      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002472:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002478:	2b04      	cmp	r3, #4
 800247a:	d82a      	bhi.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800247c:	a201      	add	r2, pc, #4	; (adr r2, 8002484 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800247e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002482:	bf00      	nop
 8002484:	08002499 	.word	0x08002499
 8002488:	080024a7 	.word	0x080024a7
 800248c:	080024bd 	.word	0x080024bd
 8002490:	080024db 	.word	0x080024db
 8002494:	080024db 	.word	0x080024db
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002498:	4b7d      	ldr	r3, [pc, #500]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800249a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249c:	4a7c      	ldr	r2, [pc, #496]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800249e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80024a4:	e01a      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80024a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024aa:	3308      	adds	r3, #8
 80024ac:	2100      	movs	r1, #0
 80024ae:	4618      	mov	r0, r3
 80024b0:	f001 fbf0 	bl	8003c94 <RCCEx_PLL2_Config>
 80024b4:	4603      	mov	r3, r0
 80024b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80024ba:	e00f      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80024bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024c0:	3328      	adds	r3, #40	; 0x28
 80024c2:	2100      	movs	r1, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f001 fc97 	bl	8003df8 <RCCEx_PLL3_Config>
 80024ca:	4603      	mov	r3, r0
 80024cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80024d0:	e004      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80024d8:	e000      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80024da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10a      	bne.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024e4:	4b6a      	ldr	r3, [pc, #424]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e8:	f023 0107 	bic.w	r1, r3, #7
 80024ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f2:	4a67      	ldr	r2, [pc, #412]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024f4:	430b      	orrs	r3, r1
 80024f6:	6513      	str	r3, [r2, #80]	; 0x50
 80024f8:	e003      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80024fe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002502:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800250e:	f04f 0b00 	mov.w	fp, #0
 8002512:	ea5a 030b 	orrs.w	r3, sl, fp
 8002516:	d054      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8002518:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800251c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002522:	d036      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002524:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002528:	d82f      	bhi.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800252a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800252e:	d032      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002534:	d829      	bhi.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002536:	2bc0      	cmp	r3, #192	; 0xc0
 8002538:	d02f      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800253a:	2bc0      	cmp	r3, #192	; 0xc0
 800253c:	d825      	bhi.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800253e:	2b80      	cmp	r3, #128	; 0x80
 8002540:	d018      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8002542:	2b80      	cmp	r3, #128	; 0x80
 8002544:	d821      	bhi.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002546:	2b00      	cmp	r3, #0
 8002548:	d002      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800254a:	2b40      	cmp	r3, #64	; 0x40
 800254c:	d007      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800254e:	e01c      	b.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002550:	4b4f      	ldr	r3, [pc, #316]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002554:	4a4e      	ldr	r2, [pc, #312]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002556:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800255a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800255c:	e01e      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800255e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002562:	3308      	adds	r3, #8
 8002564:	2100      	movs	r1, #0
 8002566:	4618      	mov	r0, r3
 8002568:	f001 fb94 	bl	8003c94 <RCCEx_PLL2_Config>
 800256c:	4603      	mov	r3, r0
 800256e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002572:	e013      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002574:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002578:	3328      	adds	r3, #40	; 0x28
 800257a:	2100      	movs	r1, #0
 800257c:	4618      	mov	r0, r3
 800257e:	f001 fc3b 	bl	8003df8 <RCCEx_PLL3_Config>
 8002582:	4603      	mov	r3, r0
 8002584:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002588:	e008      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002590:	e004      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002592:	bf00      	nop
 8002594:	e002      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002596:	bf00      	nop
 8002598:	e000      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800259a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800259c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10a      	bne.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80025a4:	4b3a      	ldr	r3, [pc, #232]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025a8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80025ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b2:	4a37      	ldr	r2, [pc, #220]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025b4:	430b      	orrs	r3, r1
 80025b6:	6513      	str	r3, [r2, #80]	; 0x50
 80025b8:	e003      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80025be:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80025c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ca:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80025ce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80025d2:	2300      	movs	r3, #0
 80025d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80025d8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80025dc:	460b      	mov	r3, r1
 80025de:	4313      	orrs	r3, r2
 80025e0:	d05c      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80025e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025e8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80025ec:	d03b      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80025ee:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80025f2:	d834      	bhi.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80025f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025f8:	d037      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80025fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025fe:	d82e      	bhi.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002600:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002604:	d033      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002606:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800260a:	d828      	bhi.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800260c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002610:	d01a      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8002612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002616:	d822      	bhi.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002618:	2b00      	cmp	r3, #0
 800261a:	d003      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800261c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002620:	d007      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002622:	e01c      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002624:	4b1a      	ldr	r3, [pc, #104]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002628:	4a19      	ldr	r2, [pc, #100]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800262a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800262e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002630:	e01e      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002632:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002636:	3308      	adds	r3, #8
 8002638:	2100      	movs	r1, #0
 800263a:	4618      	mov	r0, r3
 800263c:	f001 fb2a 	bl	8003c94 <RCCEx_PLL2_Config>
 8002640:	4603      	mov	r3, r0
 8002642:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002646:	e013      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002648:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800264c:	3328      	adds	r3, #40	; 0x28
 800264e:	2100      	movs	r1, #0
 8002650:	4618      	mov	r0, r3
 8002652:	f001 fbd1 	bl	8003df8 <RCCEx_PLL3_Config>
 8002656:	4603      	mov	r3, r0
 8002658:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800265c:	e008      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002664:	e004      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002666:	bf00      	nop
 8002668:	e002      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800266a:	bf00      	nop
 800266c:	e000      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800266e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002670:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10d      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002678:	4b05      	ldr	r3, [pc, #20]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800267a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800267c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8002680:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002686:	4a02      	ldr	r2, [pc, #8]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002688:	430b      	orrs	r3, r1
 800268a:	6513      	str	r3, [r2, #80]	; 0x50
 800268c:	e006      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800268e:	bf00      	nop
 8002690:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002694:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002698:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800269c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80026a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80026ac:	2300      	movs	r3, #0
 80026ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80026b2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80026b6:	460b      	mov	r3, r1
 80026b8:	4313      	orrs	r3, r2
 80026ba:	d03a      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80026bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c2:	2b30      	cmp	r3, #48	; 0x30
 80026c4:	d01f      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80026c6:	2b30      	cmp	r3, #48	; 0x30
 80026c8:	d819      	bhi.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x362>
 80026ca:	2b20      	cmp	r3, #32
 80026cc:	d00c      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80026ce:	2b20      	cmp	r3, #32
 80026d0:	d815      	bhi.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x362>
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d019      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80026d6:	2b10      	cmp	r3, #16
 80026d8:	d111      	bne.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026da:	4bae      	ldr	r3, [pc, #696]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80026dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026de:	4aad      	ldr	r2, [pc, #692]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80026e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80026e6:	e011      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80026e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026ec:	3308      	adds	r3, #8
 80026ee:	2102      	movs	r1, #2
 80026f0:	4618      	mov	r0, r3
 80026f2:	f001 facf 	bl	8003c94 <RCCEx_PLL2_Config>
 80026f6:	4603      	mov	r3, r0
 80026f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80026fc:	e006      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002704:	e002      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002706:	bf00      	nop
 8002708:	e000      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800270a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800270c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10a      	bne.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002714:	4b9f      	ldr	r3, [pc, #636]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002718:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800271c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002722:	4a9c      	ldr	r2, [pc, #624]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002724:	430b      	orrs	r3, r1
 8002726:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002728:	e003      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800272a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800272e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002732:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800273e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002742:	2300      	movs	r3, #0
 8002744:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002748:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800274c:	460b      	mov	r3, r1
 800274e:	4313      	orrs	r3, r2
 8002750:	d051      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002752:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002756:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002758:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800275c:	d035      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800275e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002762:	d82e      	bhi.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002764:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002768:	d031      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x432>
 800276a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800276e:	d828      	bhi.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002774:	d01a      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800277a:	d822      	bhi.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800277c:	2b00      	cmp	r3, #0
 800277e:	d003      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002784:	d007      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8002786:	e01c      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002788:	4b82      	ldr	r3, [pc, #520]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800278a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278c:	4a81      	ldr	r2, [pc, #516]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800278e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002792:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002794:	e01c      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002796:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800279a:	3308      	adds	r3, #8
 800279c:	2100      	movs	r1, #0
 800279e:	4618      	mov	r0, r3
 80027a0:	f001 fa78 	bl	8003c94 <RCCEx_PLL2_Config>
 80027a4:	4603      	mov	r3, r0
 80027a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80027aa:	e011      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027b0:	3328      	adds	r3, #40	; 0x28
 80027b2:	2100      	movs	r1, #0
 80027b4:	4618      	mov	r0, r3
 80027b6:	f001 fb1f 	bl	8003df8 <RCCEx_PLL3_Config>
 80027ba:	4603      	mov	r3, r0
 80027bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80027c0:	e006      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80027c8:	e002      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80027ca:	bf00      	nop
 80027cc:	e000      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80027ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10a      	bne.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80027d8:	4b6e      	ldr	r3, [pc, #440]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80027da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027dc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80027e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027e6:	4a6b      	ldr	r2, [pc, #428]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80027e8:	430b      	orrs	r3, r1
 80027ea:	6513      	str	r3, [r2, #80]	; 0x50
 80027ec:	e003      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80027f2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80027f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fe:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002802:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002806:	2300      	movs	r3, #0
 8002808:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800280c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002810:	460b      	mov	r3, r1
 8002812:	4313      	orrs	r3, r2
 8002814:	d053      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002816:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800281a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800281c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002820:	d033      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002822:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002826:	d82c      	bhi.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002828:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800282c:	d02f      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800282e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002832:	d826      	bhi.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002834:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002838:	d02b      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800283a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800283e:	d820      	bhi.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002840:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002844:	d012      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002846:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800284a:	d81a      	bhi.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800284c:	2b00      	cmp	r3, #0
 800284e:	d022      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8002850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002854:	d115      	bne.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002856:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800285a:	3308      	adds	r3, #8
 800285c:	2101      	movs	r1, #1
 800285e:	4618      	mov	r0, r3
 8002860:	f001 fa18 	bl	8003c94 <RCCEx_PLL2_Config>
 8002864:	4603      	mov	r3, r0
 8002866:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800286a:	e015      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800286c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002870:	3328      	adds	r3, #40	; 0x28
 8002872:	2101      	movs	r1, #1
 8002874:	4618      	mov	r0, r3
 8002876:	f001 fabf 	bl	8003df8 <RCCEx_PLL3_Config>
 800287a:	4603      	mov	r3, r0
 800287c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002880:	e00a      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002888:	e006      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800288a:	bf00      	nop
 800288c:	e004      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800288e:	bf00      	nop
 8002890:	e002      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002892:	bf00      	nop
 8002894:	e000      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002896:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002898:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10a      	bne.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80028a0:	4b3c      	ldr	r3, [pc, #240]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80028a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80028a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028ae:	4a39      	ldr	r2, [pc, #228]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80028b0:	430b      	orrs	r3, r1
 80028b2:	6513      	str	r3, [r2, #80]	; 0x50
 80028b4:	e003      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028b6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80028ba:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80028be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80028ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80028ce:	2300      	movs	r3, #0
 80028d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80028d4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80028d8:	460b      	mov	r3, r1
 80028da:	4313      	orrs	r3, r2
 80028dc:	d060      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80028de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80028e6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80028ea:	d039      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80028ec:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80028f0:	d832      	bhi.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80028f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028f6:	d035      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80028f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028fc:	d82c      	bhi.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80028fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002902:	d031      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002908:	d826      	bhi.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800290a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800290e:	d02d      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002910:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002914:	d820      	bhi.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002916:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800291a:	d012      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800291c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002920:	d81a      	bhi.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002922:	2b00      	cmp	r3, #0
 8002924:	d024      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002926:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800292a:	d115      	bne.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800292c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002930:	3308      	adds	r3, #8
 8002932:	2101      	movs	r1, #1
 8002934:	4618      	mov	r0, r3
 8002936:	f001 f9ad 	bl	8003c94 <RCCEx_PLL2_Config>
 800293a:	4603      	mov	r3, r0
 800293c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002940:	e017      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002942:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002946:	3328      	adds	r3, #40	; 0x28
 8002948:	2101      	movs	r1, #1
 800294a:	4618      	mov	r0, r3
 800294c:	f001 fa54 	bl	8003df8 <RCCEx_PLL3_Config>
 8002950:	4603      	mov	r3, r0
 8002952:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002956:	e00c      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800295e:	e008      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002960:	bf00      	nop
 8002962:	e006      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002964:	bf00      	nop
 8002966:	e004      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002968:	bf00      	nop
 800296a:	e002      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800296c:	bf00      	nop
 800296e:	e000      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002970:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002972:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10e      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800297a:	4b06      	ldr	r3, [pc, #24]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800297c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002982:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002986:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800298a:	4a02      	ldr	r2, [pc, #8]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800298c:	430b      	orrs	r3, r1
 800298e:	6593      	str	r3, [r2, #88]	; 0x58
 8002990:	e006      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002992:	bf00      	nop
 8002994:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002998:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800299c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80029a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80029ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80029b0:	2300      	movs	r3, #0
 80029b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80029b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80029ba:	460b      	mov	r3, r1
 80029bc:	4313      	orrs	r3, r2
 80029be:	d037      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80029c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029ca:	d00e      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80029cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029d0:	d816      	bhi.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d018      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80029d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029da:	d111      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029dc:	4bc4      	ldr	r3, [pc, #784]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80029de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e0:	4ac3      	ldr	r2, [pc, #780]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80029e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80029e8:	e00f      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80029ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029ee:	3308      	adds	r3, #8
 80029f0:	2101      	movs	r1, #1
 80029f2:	4618      	mov	r0, r3
 80029f4:	f001 f94e 	bl	8003c94 <RCCEx_PLL2_Config>
 80029f8:	4603      	mov	r3, r0
 80029fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80029fe:	e004      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002a06:	e000      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a0a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10a      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a12:	4bb7      	ldr	r3, [pc, #732]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a16:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002a1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a20:	4ab3      	ldr	r2, [pc, #716]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a22:	430b      	orrs	r3, r1
 8002a24:	6513      	str	r3, [r2, #80]	; 0x50
 8002a26:	e003      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a2c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002a30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a38:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002a3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a40:	2300      	movs	r3, #0
 8002a42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002a46:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	d039      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002a50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d81c      	bhi.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002a5a:	a201      	add	r2, pc, #4	; (adr r2, 8002a60 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a60:	08002a9d 	.word	0x08002a9d
 8002a64:	08002a71 	.word	0x08002a71
 8002a68:	08002a7f 	.word	0x08002a7f
 8002a6c:	08002a9d 	.word	0x08002a9d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a70:	4b9f      	ldr	r3, [pc, #636]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a74:	4a9e      	ldr	r2, [pc, #632]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002a7c:	e00f      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002a7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a82:	3308      	adds	r3, #8
 8002a84:	2102      	movs	r1, #2
 8002a86:	4618      	mov	r0, r3
 8002a88:	f001 f904 	bl	8003c94 <RCCEx_PLL2_Config>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002a92:	e004      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002a9a:	e000      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002a9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a9e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10a      	bne.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002aa6:	4b92      	ldr	r3, [pc, #584]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aaa:	f023 0103 	bic.w	r1, r3, #3
 8002aae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab4:	4a8e      	ldr	r2, [pc, #568]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ab6:	430b      	orrs	r3, r1
 8002ab8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aba:	e003      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002abc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ac0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002acc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002ad0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ada:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f000 8099 	beq.w	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ae6:	4b83      	ldr	r3, [pc, #524]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a82      	ldr	r2, [pc, #520]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002af2:	f7fe f967 	bl	8000dc4 <HAL_GetTick>
 8002af6:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002afa:	e00b      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002afc:	f7fe f962 	bl	8000dc4 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b64      	cmp	r3, #100	; 0x64
 8002b0a:	d903      	bls.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002b12:	e005      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b14:	4b77      	ldr	r3, [pc, #476]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0ed      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002b20:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d173      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002b28:	4b71      	ldr	r3, [pc, #452]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002b34:	4053      	eors	r3, r2
 8002b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d015      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b3e:	4b6c      	ldr	r3, [pc, #432]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b46:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b4a:	4b69      	ldr	r3, [pc, #420]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4e:	4a68      	ldr	r2, [pc, #416]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b54:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b56:	4b66      	ldr	r3, [pc, #408]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5a:	4a65      	ldr	r2, [pc, #404]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b60:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002b62:	4a63      	ldr	r2, [pc, #396]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b68:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b76:	d118      	bne.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b78:	f7fe f924 	bl	8000dc4 <HAL_GetTick>
 8002b7c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b80:	e00d      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b82:	f7fe f91f 	bl	8000dc4 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002b8c:	1ad2      	subs	r2, r2, r3
 8002b8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d903      	bls.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8002b9c:	e005      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b9e:	4b54      	ldr	r3, [pc, #336]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0eb      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002baa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d129      	bne.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bc2:	d10e      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002bc4:	4b4a      	ldr	r3, [pc, #296]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002bd4:	091a      	lsrs	r2, r3, #4
 8002bd6:	4b48      	ldr	r3, [pc, #288]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	4a45      	ldr	r2, [pc, #276]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bdc:	430b      	orrs	r3, r1
 8002bde:	6113      	str	r3, [r2, #16]
 8002be0:	e005      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002be2:	4b43      	ldr	r3, [pc, #268]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	4a42      	ldr	r2, [pc, #264]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002be8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002bec:	6113      	str	r3, [r2, #16]
 8002bee:	4b40      	ldr	r3, [pc, #256]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bf0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bf6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002bfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bfe:	4a3c      	ldr	r2, [pc, #240]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c00:	430b      	orrs	r3, r1
 8002c02:	6713      	str	r3, [r2, #112]	; 0x70
 8002c04:	e008      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c06:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c0a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8002c0e:	e003      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c10:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c14:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c20:	f002 0301 	and.w	r3, r2, #1
 8002c24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c28:	2300      	movs	r3, #0
 8002c2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c2e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4313      	orrs	r3, r2
 8002c36:	f000 8090 	beq.w	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002c3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c42:	2b28      	cmp	r3, #40	; 0x28
 8002c44:	d870      	bhi.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002c46:	a201      	add	r2, pc, #4	; (adr r2, 8002c4c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c4c:	08002d31 	.word	0x08002d31
 8002c50:	08002d29 	.word	0x08002d29
 8002c54:	08002d29 	.word	0x08002d29
 8002c58:	08002d29 	.word	0x08002d29
 8002c5c:	08002d29 	.word	0x08002d29
 8002c60:	08002d29 	.word	0x08002d29
 8002c64:	08002d29 	.word	0x08002d29
 8002c68:	08002d29 	.word	0x08002d29
 8002c6c:	08002cfd 	.word	0x08002cfd
 8002c70:	08002d29 	.word	0x08002d29
 8002c74:	08002d29 	.word	0x08002d29
 8002c78:	08002d29 	.word	0x08002d29
 8002c7c:	08002d29 	.word	0x08002d29
 8002c80:	08002d29 	.word	0x08002d29
 8002c84:	08002d29 	.word	0x08002d29
 8002c88:	08002d29 	.word	0x08002d29
 8002c8c:	08002d13 	.word	0x08002d13
 8002c90:	08002d29 	.word	0x08002d29
 8002c94:	08002d29 	.word	0x08002d29
 8002c98:	08002d29 	.word	0x08002d29
 8002c9c:	08002d29 	.word	0x08002d29
 8002ca0:	08002d29 	.word	0x08002d29
 8002ca4:	08002d29 	.word	0x08002d29
 8002ca8:	08002d29 	.word	0x08002d29
 8002cac:	08002d31 	.word	0x08002d31
 8002cb0:	08002d29 	.word	0x08002d29
 8002cb4:	08002d29 	.word	0x08002d29
 8002cb8:	08002d29 	.word	0x08002d29
 8002cbc:	08002d29 	.word	0x08002d29
 8002cc0:	08002d29 	.word	0x08002d29
 8002cc4:	08002d29 	.word	0x08002d29
 8002cc8:	08002d29 	.word	0x08002d29
 8002ccc:	08002d31 	.word	0x08002d31
 8002cd0:	08002d29 	.word	0x08002d29
 8002cd4:	08002d29 	.word	0x08002d29
 8002cd8:	08002d29 	.word	0x08002d29
 8002cdc:	08002d29 	.word	0x08002d29
 8002ce0:	08002d29 	.word	0x08002d29
 8002ce4:	08002d29 	.word	0x08002d29
 8002ce8:	08002d29 	.word	0x08002d29
 8002cec:	08002d31 	.word	0x08002d31
 8002cf0:	58024400 	.word	0x58024400
 8002cf4:	58024800 	.word	0x58024800
 8002cf8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d00:	3308      	adds	r3, #8
 8002d02:	2101      	movs	r1, #1
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 ffc5 	bl	8003c94 <RCCEx_PLL2_Config>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002d10:	e00f      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d16:	3328      	adds	r3, #40	; 0x28
 8002d18:	2101      	movs	r1, #1
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f001 f86c 	bl	8003df8 <RCCEx_PLL3_Config>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002d26:	e004      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002d2e:	e000      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8002d30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d32:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10b      	bne.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002d3a:	4bc0      	ldr	r3, [pc, #768]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d4a:	4abc      	ldr	r2, [pc, #752]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002d4c:	430b      	orrs	r3, r1
 8002d4e:	6553      	str	r3, [r2, #84]	; 0x54
 8002d50:	e003      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d52:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d56:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d62:	f002 0302 	and.w	r3, r2, #2
 8002d66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002d70:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002d74:	460b      	mov	r3, r1
 8002d76:	4313      	orrs	r3, r2
 8002d78:	d043      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002d7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d82:	2b05      	cmp	r3, #5
 8002d84:	d824      	bhi.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8002d86:	a201      	add	r2, pc, #4	; (adr r2, 8002d8c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8002d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d8c:	08002dd9 	.word	0x08002dd9
 8002d90:	08002da5 	.word	0x08002da5
 8002d94:	08002dbb 	.word	0x08002dbb
 8002d98:	08002dd9 	.word	0x08002dd9
 8002d9c:	08002dd9 	.word	0x08002dd9
 8002da0:	08002dd9 	.word	0x08002dd9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002da4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002da8:	3308      	adds	r3, #8
 8002daa:	2101      	movs	r1, #1
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 ff71 	bl	8003c94 <RCCEx_PLL2_Config>
 8002db2:	4603      	mov	r3, r0
 8002db4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002db8:	e00f      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002dba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dbe:	3328      	adds	r3, #40	; 0x28
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f001 f818 	bl	8003df8 <RCCEx_PLL3_Config>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002dce:	e004      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002dd6:	e000      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8002dd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dda:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10b      	bne.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002de2:	4b96      	ldr	r3, [pc, #600]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de6:	f023 0107 	bic.w	r1, r3, #7
 8002dea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002df2:	4a92      	ldr	r2, [pc, #584]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002df4:	430b      	orrs	r3, r1
 8002df6:	6553      	str	r3, [r2, #84]	; 0x54
 8002df8:	e003      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dfa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002dfe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0a:	f002 0304 	and.w	r3, r2, #4
 8002e0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e12:	2300      	movs	r3, #0
 8002e14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e18:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	d043      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e2a:	2b05      	cmp	r3, #5
 8002e2c:	d824      	bhi.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8002e2e:	a201      	add	r2, pc, #4	; (adr r2, 8002e34 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8002e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e34:	08002e81 	.word	0x08002e81
 8002e38:	08002e4d 	.word	0x08002e4d
 8002e3c:	08002e63 	.word	0x08002e63
 8002e40:	08002e81 	.word	0x08002e81
 8002e44:	08002e81 	.word	0x08002e81
 8002e48:	08002e81 	.word	0x08002e81
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e50:	3308      	adds	r3, #8
 8002e52:	2101      	movs	r1, #1
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 ff1d 	bl	8003c94 <RCCEx_PLL2_Config>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002e60:	e00f      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e66:	3328      	adds	r3, #40	; 0x28
 8002e68:	2101      	movs	r1, #1
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 ffc4 	bl	8003df8 <RCCEx_PLL3_Config>
 8002e70:	4603      	mov	r3, r0
 8002e72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002e76:	e004      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002e7e:	e000      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8002e80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e82:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10b      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e8a:	4b6c      	ldr	r3, [pc, #432]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8e:	f023 0107 	bic.w	r1, r3, #7
 8002e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e9a:	4a68      	ldr	r2, [pc, #416]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002e9c:	430b      	orrs	r3, r1
 8002e9e:	6593      	str	r3, [r2, #88]	; 0x58
 8002ea0:	e003      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ea6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb2:	f002 0320 	and.w	r3, r2, #32
 8002eb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002eba:	2300      	movs	r3, #0
 8002ebc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ec0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	d055      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002eca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ece:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ed2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ed6:	d033      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8002ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002edc:	d82c      	bhi.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee2:	d02f      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8002ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee8:	d826      	bhi.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002eea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002eee:	d02b      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8002ef0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ef4:	d820      	bhi.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002ef6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002efa:	d012      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8002efc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f00:	d81a      	bhi.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d022      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8002f06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f0a:	d115      	bne.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f10:	3308      	adds	r3, #8
 8002f12:	2100      	movs	r1, #0
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 febd 	bl	8003c94 <RCCEx_PLL2_Config>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002f20:	e015      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f26:	3328      	adds	r3, #40	; 0x28
 8002f28:	2102      	movs	r1, #2
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 ff64 	bl	8003df8 <RCCEx_PLL3_Config>
 8002f30:	4603      	mov	r3, r0
 8002f32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002f36:	e00a      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002f3e:	e006      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002f40:	bf00      	nop
 8002f42:	e004      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002f44:	bf00      	nop
 8002f46:	e002      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002f48:	bf00      	nop
 8002f4a:	e000      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002f4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f4e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10b      	bne.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f56:	4b39      	ldr	r3, [pc, #228]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002f5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f66:	4a35      	ldr	r2, [pc, #212]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	6553      	str	r3, [r2, #84]	; 0x54
 8002f6c:	e003      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f6e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f72:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002f76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002f82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f86:	2300      	movs	r3, #0
 8002f88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002f8c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002f90:	460b      	mov	r3, r1
 8002f92:	4313      	orrs	r3, r2
 8002f94:	d058      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002f96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002f9e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002fa2:	d033      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8002fa4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002fa8:	d82c      	bhi.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8002faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fae:	d02f      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8002fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb4:	d826      	bhi.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8002fb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fba:	d02b      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8002fbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fc0:	d820      	bhi.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8002fc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fc6:	d012      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8002fc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fcc:	d81a      	bhi.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d022      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8002fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fd6:	d115      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fdc:	3308      	adds	r3, #8
 8002fde:	2100      	movs	r1, #0
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 fe57 	bl	8003c94 <RCCEx_PLL2_Config>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002fec:	e015      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ff2:	3328      	adds	r3, #40	; 0x28
 8002ff4:	2102      	movs	r1, #2
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 fefe 	bl	8003df8 <RCCEx_PLL3_Config>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003002:	e00a      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800300a:	e006      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800300c:	bf00      	nop
 800300e:	e004      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003010:	bf00      	nop
 8003012:	e002      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003014:	bf00      	nop
 8003016:	e000      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003018:	bf00      	nop
    }

    if (ret == HAL_OK)
 800301a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10e      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003022:	4b06      	ldr	r3, [pc, #24]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003026:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800302a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800302e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003032:	4a02      	ldr	r2, [pc, #8]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003034:	430b      	orrs	r3, r1
 8003036:	6593      	str	r3, [r2, #88]	; 0x58
 8003038:	e006      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800303a:	bf00      	nop
 800303c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003040:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003044:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003048:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800304c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003050:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003054:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003058:	2300      	movs	r3, #0
 800305a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800305e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003062:	460b      	mov	r3, r1
 8003064:	4313      	orrs	r3, r2
 8003066:	d055      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003068:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800306c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003070:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003074:	d033      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003076:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800307a:	d82c      	bhi.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800307c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003080:	d02f      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003086:	d826      	bhi.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003088:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800308c:	d02b      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800308e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003092:	d820      	bhi.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003094:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003098:	d012      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800309a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800309e:	d81a      	bhi.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d022      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80030a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030a8:	d115      	bne.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030ae:	3308      	adds	r3, #8
 80030b0:	2100      	movs	r1, #0
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 fdee 	bl	8003c94 <RCCEx_PLL2_Config>
 80030b8:	4603      	mov	r3, r0
 80030ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80030be:	e015      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80030c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030c4:	3328      	adds	r3, #40	; 0x28
 80030c6:	2102      	movs	r1, #2
 80030c8:	4618      	mov	r0, r3
 80030ca:	f000 fe95 	bl	8003df8 <RCCEx_PLL3_Config>
 80030ce:	4603      	mov	r3, r0
 80030d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80030d4:	e00a      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80030dc:	e006      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80030de:	bf00      	nop
 80030e0:	e004      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80030e2:	bf00      	nop
 80030e4:	e002      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80030e6:	bf00      	nop
 80030e8:	e000      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80030ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10b      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80030f4:	4ba1      	ldr	r3, [pc, #644]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80030f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80030fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003100:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003104:	4a9d      	ldr	r2, [pc, #628]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003106:	430b      	orrs	r3, r1
 8003108:	6593      	str	r3, [r2, #88]	; 0x58
 800310a:	e003      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800310c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003110:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003114:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311c:	f002 0308 	and.w	r3, r2, #8
 8003120:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003124:	2300      	movs	r3, #0
 8003126:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800312a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800312e:	460b      	mov	r3, r1
 8003130:	4313      	orrs	r3, r2
 8003132:	d01e      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003134:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800313c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003140:	d10c      	bne.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003142:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003146:	3328      	adds	r3, #40	; 0x28
 8003148:	2102      	movs	r1, #2
 800314a:	4618      	mov	r0, r3
 800314c:	f000 fe54 	bl	8003df8 <RCCEx_PLL3_Config>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d002      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800315c:	4b87      	ldr	r3, [pc, #540]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800315e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003160:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003164:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800316c:	4a83      	ldr	r2, [pc, #524]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800316e:	430b      	orrs	r3, r1
 8003170:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003172:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317a:	f002 0310 	and.w	r3, r2, #16
 800317e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003182:	2300      	movs	r3, #0
 8003184:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003188:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800318c:	460b      	mov	r3, r1
 800318e:	4313      	orrs	r3, r2
 8003190:	d01e      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003192:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003196:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800319a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800319e:	d10c      	bne.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80031a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031a4:	3328      	adds	r3, #40	; 0x28
 80031a6:	2102      	movs	r1, #2
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 fe25 	bl	8003df8 <RCCEx_PLL3_Config>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031ba:	4b70      	ldr	r3, [pc, #448]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80031ca:	4a6c      	ldr	r2, [pc, #432]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031cc:	430b      	orrs	r3, r1
 80031ce:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80031dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031e0:	2300      	movs	r3, #0
 80031e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031e6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80031ea:	460b      	mov	r3, r1
 80031ec:	4313      	orrs	r3, r2
 80031ee:	d03e      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80031f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80031f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031fc:	d022      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80031fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003202:	d81b      	bhi.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8003208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800320c:	d00b      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800320e:	e015      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003210:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003214:	3308      	adds	r3, #8
 8003216:	2100      	movs	r1, #0
 8003218:	4618      	mov	r0, r3
 800321a:	f000 fd3b 	bl	8003c94 <RCCEx_PLL2_Config>
 800321e:	4603      	mov	r3, r0
 8003220:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003224:	e00f      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003226:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800322a:	3328      	adds	r3, #40	; 0x28
 800322c:	2102      	movs	r1, #2
 800322e:	4618      	mov	r0, r3
 8003230:	f000 fde2 	bl	8003df8 <RCCEx_PLL3_Config>
 8003234:	4603      	mov	r3, r0
 8003236:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800323a:	e004      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003242:	e000      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003244:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003246:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10b      	bne.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800324e:	4b4b      	ldr	r3, [pc, #300]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003252:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003256:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800325a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800325e:	4a47      	ldr	r2, [pc, #284]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003260:	430b      	orrs	r3, r1
 8003262:	6593      	str	r3, [r2, #88]	; 0x58
 8003264:	e003      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003266:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800326a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800326e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003276:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800327a:	67bb      	str	r3, [r7, #120]	; 0x78
 800327c:	2300      	movs	r3, #0
 800327e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003280:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003284:	460b      	mov	r3, r1
 8003286:	4313      	orrs	r3, r2
 8003288:	d03b      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800328a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800328e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003292:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003296:	d01f      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003298:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800329c:	d818      	bhi.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800329e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032a2:	d003      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80032a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032a8:	d007      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80032aa:	e011      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032ac:	4b33      	ldr	r3, [pc, #204]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b0:	4a32      	ldr	r2, [pc, #200]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80032b8:	e00f      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032be:	3328      	adds	r3, #40	; 0x28
 80032c0:	2101      	movs	r1, #1
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 fd98 	bl	8003df8 <RCCEx_PLL3_Config>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80032ce:	e004      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80032d6:	e000      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80032d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10b      	bne.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032e2:	4b26      	ldr	r3, [pc, #152]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80032ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f2:	4a22      	ldr	r2, [pc, #136]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032f4:	430b      	orrs	r3, r1
 80032f6:	6553      	str	r3, [r2, #84]	; 0x54
 80032f8:	e003      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032fe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003302:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800330e:	673b      	str	r3, [r7, #112]	; 0x70
 8003310:	2300      	movs	r3, #0
 8003312:	677b      	str	r3, [r7, #116]	; 0x74
 8003314:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003318:	460b      	mov	r3, r1
 800331a:	4313      	orrs	r3, r2
 800331c:	d034      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800331e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003324:	2b00      	cmp	r3, #0
 8003326:	d003      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8003328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800332c:	d007      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800332e:	e011      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003330:	4b12      	ldr	r3, [pc, #72]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	4a11      	ldr	r2, [pc, #68]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800333a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800333c:	e00e      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800333e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003342:	3308      	adds	r3, #8
 8003344:	2102      	movs	r1, #2
 8003346:	4618      	mov	r0, r3
 8003348:	f000 fca4 	bl	8003c94 <RCCEx_PLL2_Config>
 800334c:	4603      	mov	r3, r0
 800334e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003352:	e003      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800335a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800335c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10d      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003364:	4b05      	ldr	r3, [pc, #20]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003368:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800336c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003372:	4a02      	ldr	r2, [pc, #8]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003374:	430b      	orrs	r3, r1
 8003376:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003378:	e006      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800337a:	bf00      	nop
 800337c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003380:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003384:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003388:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800338c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003390:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003394:	66bb      	str	r3, [r7, #104]	; 0x68
 8003396:	2300      	movs	r3, #0
 8003398:	66fb      	str	r3, [r7, #108]	; 0x6c
 800339a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800339e:	460b      	mov	r3, r1
 80033a0:	4313      	orrs	r3, r2
 80033a2:	d00c      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80033a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033a8:	3328      	adds	r3, #40	; 0x28
 80033aa:	2102      	movs	r1, #2
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 fd23 	bl	8003df8 <RCCEx_PLL3_Config>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d002      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80033be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80033ca:	663b      	str	r3, [r7, #96]	; 0x60
 80033cc:	2300      	movs	r3, #0
 80033ce:	667b      	str	r3, [r7, #100]	; 0x64
 80033d0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80033d4:	460b      	mov	r3, r1
 80033d6:	4313      	orrs	r3, r2
 80033d8:	d038      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80033da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033e6:	d018      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80033e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033ec:	d811      	bhi.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80033ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033f2:	d014      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80033f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033f8:	d80b      	bhi.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d011      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80033fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003402:	d106      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003404:	4bc3      	ldr	r3, [pc, #780]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	4ac2      	ldr	r2, [pc, #776]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800340a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800340e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003410:	e008      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003418:	e004      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800341a:	bf00      	nop
 800341c:	e002      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800341e:	bf00      	nop
 8003420:	e000      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003422:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003424:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10b      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800342c:	4bb9      	ldr	r3, [pc, #740]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800342e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003430:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003434:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343c:	4ab5      	ldr	r2, [pc, #724]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800343e:	430b      	orrs	r3, r1
 8003440:	6553      	str	r3, [r2, #84]	; 0x54
 8003442:	e003      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003444:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003448:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800344c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003454:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003458:	65bb      	str	r3, [r7, #88]	; 0x58
 800345a:	2300      	movs	r3, #0
 800345c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800345e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003462:	460b      	mov	r3, r1
 8003464:	4313      	orrs	r3, r2
 8003466:	d009      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003468:	4baa      	ldr	r3, [pc, #680]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800346a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800346c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003470:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003476:	4aa7      	ldr	r2, [pc, #668]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003478:	430b      	orrs	r3, r1
 800347a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800347c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003484:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003488:	653b      	str	r3, [r7, #80]	; 0x50
 800348a:	2300      	movs	r3, #0
 800348c:	657b      	str	r3, [r7, #84]	; 0x54
 800348e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003492:	460b      	mov	r3, r1
 8003494:	4313      	orrs	r3, r2
 8003496:	d009      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003498:	4b9e      	ldr	r3, [pc, #632]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800349a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800349c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80034a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a6:	4a9b      	ldr	r2, [pc, #620]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034a8:	430b      	orrs	r3, r1
 80034aa:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80034ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80034b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80034ba:	2300      	movs	r3, #0
 80034bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034be:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80034c2:	460b      	mov	r3, r1
 80034c4:	4313      	orrs	r3, r2
 80034c6:	d009      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80034c8:	4b92      	ldr	r3, [pc, #584]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034cc:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 80034d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d6:	4a8f      	ldr	r2, [pc, #572]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034d8:	430b      	orrs	r3, r1
 80034da:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80034dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80034e8:	643b      	str	r3, [r7, #64]	; 0x40
 80034ea:	2300      	movs	r3, #0
 80034ec:	647b      	str	r3, [r7, #68]	; 0x44
 80034ee:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80034f2:	460b      	mov	r3, r1
 80034f4:	4313      	orrs	r3, r2
 80034f6:	d00e      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80034f8:	4b86      	ldr	r3, [pc, #536]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	4a85      	ldr	r2, [pc, #532]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003502:	6113      	str	r3, [r2, #16]
 8003504:	4b83      	ldr	r3, [pc, #524]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003506:	6919      	ldr	r1, [r3, #16]
 8003508:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800350c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003510:	4a80      	ldr	r2, [pc, #512]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003512:	430b      	orrs	r3, r1
 8003514:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003516:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800351a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003522:	63bb      	str	r3, [r7, #56]	; 0x38
 8003524:	2300      	movs	r3, #0
 8003526:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003528:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800352c:	460b      	mov	r3, r1
 800352e:	4313      	orrs	r3, r2
 8003530:	d009      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003532:	4b78      	ldr	r3, [pc, #480]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003536:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800353a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800353e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003540:	4a74      	ldr	r2, [pc, #464]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003542:	430b      	orrs	r3, r1
 8003544:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003546:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800354a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003552:	633b      	str	r3, [r7, #48]	; 0x30
 8003554:	2300      	movs	r3, #0
 8003556:	637b      	str	r3, [r7, #52]	; 0x34
 8003558:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800355c:	460b      	mov	r3, r1
 800355e:	4313      	orrs	r3, r2
 8003560:	d00a      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003562:	4b6c      	ldr	r3, [pc, #432]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003566:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800356a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800356e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003572:	4a68      	ldr	r2, [pc, #416]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003574:	430b      	orrs	r3, r1
 8003576:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003578:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800357c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003580:	2100      	movs	r1, #0
 8003582:	62b9      	str	r1, [r7, #40]	; 0x28
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	62fb      	str	r3, [r7, #44]	; 0x2c
 800358a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800358e:	460b      	mov	r3, r1
 8003590:	4313      	orrs	r3, r2
 8003592:	d011      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003594:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003598:	3308      	adds	r3, #8
 800359a:	2100      	movs	r1, #0
 800359c:	4618      	mov	r0, r3
 800359e:	f000 fb79 	bl	8003c94 <RCCEx_PLL2_Config>
 80035a2:	4603      	mov	r3, r0
 80035a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80035a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035b4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80035b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c0:	2100      	movs	r1, #0
 80035c2:	6239      	str	r1, [r7, #32]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ca:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80035ce:	460b      	mov	r3, r1
 80035d0:	4313      	orrs	r3, r2
 80035d2:	d011      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035d8:	3308      	adds	r3, #8
 80035da:	2101      	movs	r1, #1
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 fb59 	bl	8003c94 <RCCEx_PLL2_Config>
 80035e2:	4603      	mov	r3, r0
 80035e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80035e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80035f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003600:	2100      	movs	r1, #0
 8003602:	61b9      	str	r1, [r7, #24]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	61fb      	str	r3, [r7, #28]
 800360a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800360e:	460b      	mov	r3, r1
 8003610:	4313      	orrs	r3, r2
 8003612:	d011      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003614:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003618:	3308      	adds	r3, #8
 800361a:	2102      	movs	r1, #2
 800361c:	4618      	mov	r0, r3
 800361e:	f000 fb39 	bl	8003c94 <RCCEx_PLL2_Config>
 8003622:	4603      	mov	r3, r0
 8003624:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003628:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800362c:	2b00      	cmp	r3, #0
 800362e:	d003      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003630:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003634:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003638:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800363c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003640:	2100      	movs	r1, #0
 8003642:	6139      	str	r1, [r7, #16]
 8003644:	f003 0308 	and.w	r3, r3, #8
 8003648:	617b      	str	r3, [r7, #20]
 800364a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800364e:	460b      	mov	r3, r1
 8003650:	4313      	orrs	r3, r2
 8003652:	d011      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003654:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003658:	3328      	adds	r3, #40	; 0x28
 800365a:	2100      	movs	r1, #0
 800365c:	4618      	mov	r0, r3
 800365e:	f000 fbcb 	bl	8003df8 <RCCEx_PLL3_Config>
 8003662:	4603      	mov	r3, r0
 8003664:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8003668:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003670:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003674:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003678:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800367c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003680:	2100      	movs	r1, #0
 8003682:	60b9      	str	r1, [r7, #8]
 8003684:	f003 0310 	and.w	r3, r3, #16
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800368e:	460b      	mov	r3, r1
 8003690:	4313      	orrs	r3, r2
 8003692:	d011      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003694:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003698:	3328      	adds	r3, #40	; 0x28
 800369a:	2101      	movs	r1, #1
 800369c:	4618      	mov	r0, r3
 800369e:	f000 fbab 	bl	8003df8 <RCCEx_PLL3_Config>
 80036a2:	4603      	mov	r3, r0
 80036a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80036a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036b4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80036b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c0:	2100      	movs	r1, #0
 80036c2:	6039      	str	r1, [r7, #0]
 80036c4:	f003 0320 	and.w	r3, r3, #32
 80036c8:	607b      	str	r3, [r7, #4]
 80036ca:	e9d7 1200 	ldrd	r1, r2, [r7]
 80036ce:	460b      	mov	r3, r1
 80036d0:	4313      	orrs	r3, r2
 80036d2:	d011      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036d8:	3328      	adds	r3, #40	; 0x28
 80036da:	2102      	movs	r1, #2
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 fb8b 	bl	8003df8 <RCCEx_PLL3_Config>
 80036e2:	4603      	mov	r3, r0
 80036e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80036e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80036f8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8003700:	2300      	movs	r3, #0
 8003702:	e000      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
}
 8003706:	4618      	mov	r0, r3
 8003708:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800370c:	46bd      	mov	sp, r7
 800370e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003712:	bf00      	nop
 8003714:	58024400 	.word	0x58024400

08003718 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800371c:	f7fe fde2 	bl	80022e4 <HAL_RCC_GetHCLKFreq>
 8003720:	4602      	mov	r2, r0
 8003722:	4b06      	ldr	r3, [pc, #24]	; (800373c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	091b      	lsrs	r3, r3, #4
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	4904      	ldr	r1, [pc, #16]	; (8003740 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800372e:	5ccb      	ldrb	r3, [r1, r3]
 8003730:	f003 031f 	and.w	r3, r3, #31
 8003734:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003738:	4618      	mov	r0, r3
 800373a:	bd80      	pop	{r7, pc}
 800373c:	58024400 	.word	0x58024400
 8003740:	080053a8 	.word	0x080053a8

08003744 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003744:	b480      	push	{r7}
 8003746:	b089      	sub	sp, #36	; 0x24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800374c:	4ba1      	ldr	r3, [pc, #644]	; (80039d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800374e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003750:	f003 0303 	and.w	r3, r3, #3
 8003754:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003756:	4b9f      	ldr	r3, [pc, #636]	; (80039d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375a:	0b1b      	lsrs	r3, r3, #12
 800375c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003760:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003762:	4b9c      	ldr	r3, [pc, #624]	; (80039d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003766:	091b      	lsrs	r3, r3, #4
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800376e:	4b99      	ldr	r3, [pc, #612]	; (80039d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003772:	08db      	lsrs	r3, r3, #3
 8003774:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	fb02 f303 	mul.w	r3, r2, r3
 800377e:	ee07 3a90 	vmov	s15, r3
 8003782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003786:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 8111 	beq.w	80039b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	2b02      	cmp	r3, #2
 8003796:	f000 8083 	beq.w	80038a0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	2b02      	cmp	r3, #2
 800379e:	f200 80a1 	bhi.w	80038e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d056      	beq.n	800385c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80037ae:	e099      	b.n	80038e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037b0:	4b88      	ldr	r3, [pc, #544]	; (80039d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0320 	and.w	r3, r3, #32
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d02d      	beq.n	8003818 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80037bc:	4b85      	ldr	r3, [pc, #532]	; (80039d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	08db      	lsrs	r3, r3, #3
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	4a84      	ldr	r2, [pc, #528]	; (80039d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80037c8:	fa22 f303 	lsr.w	r3, r2, r3
 80037cc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	ee07 3a90 	vmov	s15, r3
 80037d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	ee07 3a90 	vmov	s15, r3
 80037de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037e6:	4b7b      	ldr	r3, [pc, #492]	; (80039d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ee:	ee07 3a90 	vmov	s15, r3
 80037f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80037fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80039dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80037fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800380a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800380e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003812:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003816:	e087      	b.n	8003928 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	ee07 3a90 	vmov	s15, r3
 800381e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003822:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80039e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800382a:	4b6a      	ldr	r3, [pc, #424]	; (80039d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800382c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003832:	ee07 3a90 	vmov	s15, r3
 8003836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800383a:	ed97 6a03 	vldr	s12, [r7, #12]
 800383e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80039dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800384a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800384e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003856:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800385a:	e065      	b.n	8003928 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	ee07 3a90 	vmov	s15, r3
 8003862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003866:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80039e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800386a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800386e:	4b59      	ldr	r3, [pc, #356]	; (80039d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003876:	ee07 3a90 	vmov	s15, r3
 800387a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800387e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003882:	eddf 5a56 	vldr	s11, [pc, #344]	; 80039dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800388a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800388e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800389a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800389e:	e043      	b.n	8003928 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	ee07 3a90 	vmov	s15, r3
 80038a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80039e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80038ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038b2:	4b48      	ldr	r3, [pc, #288]	; (80039d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ba:	ee07 3a90 	vmov	s15, r3
 80038be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80038c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80039dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038e2:	e021      	b.n	8003928 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	ee07 3a90 	vmov	s15, r3
 80038ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80039e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80038f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038f6:	4b37      	ldr	r3, [pc, #220]	; (80039d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038fe:	ee07 3a90 	vmov	s15, r3
 8003902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003906:	ed97 6a03 	vldr	s12, [r7, #12]
 800390a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80039dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800390e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003916:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800391a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800391e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003922:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003926:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003928:	4b2a      	ldr	r3, [pc, #168]	; (80039d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800392a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392c:	0a5b      	lsrs	r3, r3, #9
 800392e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003932:	ee07 3a90 	vmov	s15, r3
 8003936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800393a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800393e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003942:	edd7 6a07 	vldr	s13, [r7, #28]
 8003946:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800394a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800394e:	ee17 2a90 	vmov	r2, s15
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003956:	4b1f      	ldr	r3, [pc, #124]	; (80039d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395a:	0c1b      	lsrs	r3, r3, #16
 800395c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003960:	ee07 3a90 	vmov	s15, r3
 8003964:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003968:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800396c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003970:	edd7 6a07 	vldr	s13, [r7, #28]
 8003974:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003978:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800397c:	ee17 2a90 	vmov	r2, s15
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003984:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003988:	0e1b      	lsrs	r3, r3, #24
 800398a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800398e:	ee07 3a90 	vmov	s15, r3
 8003992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003996:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800399a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800399e:	edd7 6a07 	vldr	s13, [r7, #28]
 80039a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039aa:	ee17 2a90 	vmov	r2, s15
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80039b2:	e008      	b.n	80039c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	609a      	str	r2, [r3, #8]
}
 80039c6:	bf00      	nop
 80039c8:	3724      	adds	r7, #36	; 0x24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	58024400 	.word	0x58024400
 80039d8:	03d09000 	.word	0x03d09000
 80039dc:	46000000 	.word	0x46000000
 80039e0:	4c742400 	.word	0x4c742400
 80039e4:	4a742400 	.word	0x4a742400
 80039e8:	4af42400 	.word	0x4af42400

080039ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b089      	sub	sp, #36	; 0x24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039f4:	4ba1      	ldr	r3, [pc, #644]	; (8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80039fe:	4b9f      	ldr	r3, [pc, #636]	; (8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a02:	0d1b      	lsrs	r3, r3, #20
 8003a04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a08:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003a0a:	4b9c      	ldr	r3, [pc, #624]	; (8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0e:	0a1b      	lsrs	r3, r3, #8
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003a16:	4b99      	ldr	r3, [pc, #612]	; (8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	08db      	lsrs	r3, r3, #3
 8003a1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	fb02 f303 	mul.w	r3, r2, r3
 8003a26:	ee07 3a90 	vmov	s15, r3
 8003a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 8111 	beq.w	8003c5c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	f000 8083 	beq.w	8003b48 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	f200 80a1 	bhi.w	8003b8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d056      	beq.n	8003b04 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003a56:	e099      	b.n	8003b8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a58:	4b88      	ldr	r3, [pc, #544]	; (8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0320 	and.w	r3, r3, #32
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d02d      	beq.n	8003ac0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a64:	4b85      	ldr	r3, [pc, #532]	; (8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	08db      	lsrs	r3, r3, #3
 8003a6a:	f003 0303 	and.w	r3, r3, #3
 8003a6e:	4a84      	ldr	r2, [pc, #528]	; (8003c80 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003a70:	fa22 f303 	lsr.w	r3, r2, r3
 8003a74:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	ee07 3a90 	vmov	s15, r3
 8003a7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	ee07 3a90 	vmov	s15, r3
 8003a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a8e:	4b7b      	ldr	r3, [pc, #492]	; (8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a96:	ee07 3a90 	vmov	s15, r3
 8003a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003aa2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003c84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003abe:	e087      	b.n	8003bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	ee07 3a90 	vmov	s15, r3
 8003ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003c88 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ad2:	4b6a      	ldr	r3, [pc, #424]	; (8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ada:	ee07 3a90 	vmov	s15, r3
 8003ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ae2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ae6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003c84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003af2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003afe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b02:	e065      	b.n	8003bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	ee07 3a90 	vmov	s15, r3
 8003b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b0e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003c8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b16:	4b59      	ldr	r3, [pc, #356]	; (8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b1e:	ee07 3a90 	vmov	s15, r3
 8003b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b26:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b2a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003c84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b46:	e043      	b.n	8003bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	ee07 3a90 	vmov	s15, r3
 8003b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b52:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003c90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b5a:	4b48      	ldr	r3, [pc, #288]	; (8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b62:	ee07 3a90 	vmov	s15, r3
 8003b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b6e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003c84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b8a:	e021      	b.n	8003bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	ee07 3a90 	vmov	s15, r3
 8003b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b96:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003c8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003b9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b9e:	4b37      	ldr	r3, [pc, #220]	; (8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ba6:	ee07 3a90 	vmov	s15, r3
 8003baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bae:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bb2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003c84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003bd0:	4b2a      	ldr	r3, [pc, #168]	; (8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd4:	0a5b      	lsrs	r3, r3, #9
 8003bd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bda:	ee07 3a90 	vmov	s15, r3
 8003bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003be2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003be6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bea:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bf6:	ee17 2a90 	vmov	r2, s15
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003bfe:	4b1f      	ldr	r3, [pc, #124]	; (8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	0c1b      	lsrs	r3, r3, #16
 8003c04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c08:	ee07 3a90 	vmov	s15, r3
 8003c0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c18:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c24:	ee17 2a90 	vmov	r2, s15
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003c2c:	4b13      	ldr	r3, [pc, #76]	; (8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c30:	0e1b      	lsrs	r3, r3, #24
 8003c32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c36:	ee07 3a90 	vmov	s15, r3
 8003c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c46:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c52:	ee17 2a90 	vmov	r2, s15
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003c5a:	e008      	b.n	8003c6e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	609a      	str	r2, [r3, #8]
}
 8003c6e:	bf00      	nop
 8003c70:	3724      	adds	r7, #36	; 0x24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	58024400 	.word	0x58024400
 8003c80:	03d09000 	.word	0x03d09000
 8003c84:	46000000 	.word	0x46000000
 8003c88:	4c742400 	.word	0x4c742400
 8003c8c:	4a742400 	.word	0x4a742400
 8003c90:	4af42400 	.word	0x4af42400

08003c94 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ca2:	4b53      	ldr	r3, [pc, #332]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	2b03      	cmp	r3, #3
 8003cac:	d101      	bne.n	8003cb2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e099      	b.n	8003de6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003cb2:	4b4f      	ldr	r3, [pc, #316]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a4e      	ldr	r2, [pc, #312]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003cb8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cbe:	f7fd f881 	bl	8000dc4 <HAL_GetTick>
 8003cc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003cc4:	e008      	b.n	8003cd8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003cc6:	f7fd f87d 	bl	8000dc4 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d901      	bls.n	8003cd8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e086      	b.n	8003de6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003cd8:	4b45      	ldr	r3, [pc, #276]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1f0      	bne.n	8003cc6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003ce4:	4b42      	ldr	r3, [pc, #264]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	031b      	lsls	r3, r3, #12
 8003cf2:	493f      	ldr	r1, [pc, #252]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	628b      	str	r3, [r1, #40]	; 0x28
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	3b01      	subs	r3, #1
 8003d08:	025b      	lsls	r3, r3, #9
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	041b      	lsls	r3, r3, #16
 8003d16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	3b01      	subs	r3, #1
 8003d22:	061b      	lsls	r3, r3, #24
 8003d24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d28:	4931      	ldr	r1, [pc, #196]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003d2e:	4b30      	ldr	r3, [pc, #192]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	492d      	ldr	r1, [pc, #180]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003d40:	4b2b      	ldr	r3, [pc, #172]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d44:	f023 0220 	bic.w	r2, r3, #32
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	4928      	ldr	r1, [pc, #160]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003d52:	4b27      	ldr	r3, [pc, #156]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d56:	4a26      	ldr	r2, [pc, #152]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d58:	f023 0310 	bic.w	r3, r3, #16
 8003d5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003d5e:	4b24      	ldr	r3, [pc, #144]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d62:	4b24      	ldr	r3, [pc, #144]	; (8003df4 <RCCEx_PLL2_Config+0x160>)
 8003d64:	4013      	ands	r3, r2
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	69d2      	ldr	r2, [r2, #28]
 8003d6a:	00d2      	lsls	r2, r2, #3
 8003d6c:	4920      	ldr	r1, [pc, #128]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003d72:	4b1f      	ldr	r3, [pc, #124]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d76:	4a1e      	ldr	r2, [pc, #120]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d78:	f043 0310 	orr.w	r3, r3, #16
 8003d7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d106      	bne.n	8003d92 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003d84:	4b1a      	ldr	r3, [pc, #104]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	4a19      	ldr	r2, [pc, #100]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d90:	e00f      	b.n	8003db2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d106      	bne.n	8003da6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003d98:	4b15      	ldr	r3, [pc, #84]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	4a14      	ldr	r2, [pc, #80]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003da2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003da4:	e005      	b.n	8003db2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003da6:	4b12      	ldr	r3, [pc, #72]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003daa:	4a11      	ldr	r2, [pc, #68]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003dac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003db0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003db2:	4b0f      	ldr	r3, [pc, #60]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a0e      	ldr	r2, [pc, #56]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003db8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003dbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dbe:	f7fd f801 	bl	8000dc4 <HAL_GetTick>
 8003dc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003dc4:	e008      	b.n	8003dd8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003dc6:	f7fc fffd 	bl	8000dc4 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e006      	b.n	8003de6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003dd8:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0f0      	beq.n	8003dc6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	58024400 	.word	0x58024400
 8003df4:	ffff0007 	.word	0xffff0007

08003df8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e06:	4b53      	ldr	r3, [pc, #332]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	d101      	bne.n	8003e16 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e099      	b.n	8003f4a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003e16:	4b4f      	ldr	r3, [pc, #316]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a4e      	ldr	r2, [pc, #312]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e22:	f7fc ffcf 	bl	8000dc4 <HAL_GetTick>
 8003e26:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e28:	e008      	b.n	8003e3c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003e2a:	f7fc ffcb 	bl	8000dc4 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d901      	bls.n	8003e3c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e086      	b.n	8003f4a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e3c:	4b45      	ldr	r3, [pc, #276]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1f0      	bne.n	8003e2a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003e48:	4b42      	ldr	r3, [pc, #264]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	051b      	lsls	r3, r3, #20
 8003e56:	493f      	ldr	r1, [pc, #252]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	628b      	str	r3, [r1, #40]	; 0x28
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	3b01      	subs	r3, #1
 8003e62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	025b      	lsls	r3, r3, #9
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	431a      	orrs	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	041b      	lsls	r3, r3, #16
 8003e7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	3b01      	subs	r3, #1
 8003e86:	061b      	lsls	r3, r3, #24
 8003e88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003e8c:	4931      	ldr	r1, [pc, #196]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003e92:	4b30      	ldr	r3, [pc, #192]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	492d      	ldr	r1, [pc, #180]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003ea4:	4b2b      	ldr	r3, [pc, #172]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	4928      	ldr	r1, [pc, #160]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003eb6:	4b27      	ldr	r3, [pc, #156]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eba:	4a26      	ldr	r2, [pc, #152]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003ebc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ec0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003ec2:	4b24      	ldr	r3, [pc, #144]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003ec4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ec6:	4b24      	ldr	r3, [pc, #144]	; (8003f58 <RCCEx_PLL3_Config+0x160>)
 8003ec8:	4013      	ands	r3, r2
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	69d2      	ldr	r2, [r2, #28]
 8003ece:	00d2      	lsls	r2, r2, #3
 8003ed0:	4920      	ldr	r1, [pc, #128]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003ed6:	4b1f      	ldr	r3, [pc, #124]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eda:	4a1e      	ldr	r2, [pc, #120]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ee0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d106      	bne.n	8003ef6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003ee8:	4b1a      	ldr	r3, [pc, #104]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eec:	4a19      	ldr	r2, [pc, #100]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003eee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ef2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ef4:	e00f      	b.n	8003f16 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d106      	bne.n	8003f0a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003efc:	4b15      	ldr	r3, [pc, #84]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	4a14      	ldr	r2, [pc, #80]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003f02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f08:	e005      	b.n	8003f16 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003f0a:	4b12      	ldr	r3, [pc, #72]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0e:	4a11      	ldr	r2, [pc, #68]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003f10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f14:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003f16:	4b0f      	ldr	r3, [pc, #60]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a0e      	ldr	r2, [pc, #56]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f22:	f7fc ff4f 	bl	8000dc4 <HAL_GetTick>
 8003f26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f28:	e008      	b.n	8003f3c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003f2a:	f7fc ff4b 	bl	8000dc4 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d901      	bls.n	8003f3c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e006      	b.n	8003f4a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f3c:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0f0      	beq.n	8003f2a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	58024400 	.word	0x58024400
 8003f58:	ffff0007 	.word	0xffff0007

08003f5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e042      	b.n	8003ff4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d106      	bne.n	8003f86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7fc fd63 	bl	8000a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2224      	movs	r2, #36	; 0x24
 8003f8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 0201 	bic.w	r2, r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f82c 	bl	8003ffc <UART_SetConfig>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d101      	bne.n	8003fae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e022      	b.n	8003ff4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 fe8c 	bl	8004cd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689a      	ldr	r2, [r3, #8]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0201 	orr.w	r2, r2, #1
 8003fea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 ff13 	bl	8004e18 <UART_CheckIdleState>
 8003ff2:	4603      	mov	r3, r0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004000:	b092      	sub	sp, #72	; 0x48
 8004002:	af00      	add	r7, sp, #0
 8004004:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004006:	2300      	movs	r3, #0
 8004008:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	431a      	orrs	r2, r3
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	431a      	orrs	r2, r3
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	4313      	orrs	r3, r2
 8004022:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	4bbe      	ldr	r3, [pc, #760]	; (8004324 <UART_SetConfig+0x328>)
 800402c:	4013      	ands	r3, r2
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	6812      	ldr	r2, [r2, #0]
 8004032:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004034:	430b      	orrs	r3, r1
 8004036:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4ab3      	ldr	r2, [pc, #716]	; (8004328 <UART_SetConfig+0x32c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d004      	beq.n	8004068 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004064:	4313      	orrs	r3, r2
 8004066:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	4baf      	ldr	r3, [pc, #700]	; (800432c <UART_SetConfig+0x330>)
 8004070:	4013      	ands	r3, r2
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	6812      	ldr	r2, [r2, #0]
 8004076:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004078:	430b      	orrs	r3, r1
 800407a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004082:	f023 010f 	bic.w	r1, r3, #15
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4aa6      	ldr	r2, [pc, #664]	; (8004330 <UART_SetConfig+0x334>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d177      	bne.n	800418c <UART_SetConfig+0x190>
 800409c:	4ba5      	ldr	r3, [pc, #660]	; (8004334 <UART_SetConfig+0x338>)
 800409e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040a4:	2b28      	cmp	r3, #40	; 0x28
 80040a6:	d86d      	bhi.n	8004184 <UART_SetConfig+0x188>
 80040a8:	a201      	add	r2, pc, #4	; (adr r2, 80040b0 <UART_SetConfig+0xb4>)
 80040aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ae:	bf00      	nop
 80040b0:	08004155 	.word	0x08004155
 80040b4:	08004185 	.word	0x08004185
 80040b8:	08004185 	.word	0x08004185
 80040bc:	08004185 	.word	0x08004185
 80040c0:	08004185 	.word	0x08004185
 80040c4:	08004185 	.word	0x08004185
 80040c8:	08004185 	.word	0x08004185
 80040cc:	08004185 	.word	0x08004185
 80040d0:	0800415d 	.word	0x0800415d
 80040d4:	08004185 	.word	0x08004185
 80040d8:	08004185 	.word	0x08004185
 80040dc:	08004185 	.word	0x08004185
 80040e0:	08004185 	.word	0x08004185
 80040e4:	08004185 	.word	0x08004185
 80040e8:	08004185 	.word	0x08004185
 80040ec:	08004185 	.word	0x08004185
 80040f0:	08004165 	.word	0x08004165
 80040f4:	08004185 	.word	0x08004185
 80040f8:	08004185 	.word	0x08004185
 80040fc:	08004185 	.word	0x08004185
 8004100:	08004185 	.word	0x08004185
 8004104:	08004185 	.word	0x08004185
 8004108:	08004185 	.word	0x08004185
 800410c:	08004185 	.word	0x08004185
 8004110:	0800416d 	.word	0x0800416d
 8004114:	08004185 	.word	0x08004185
 8004118:	08004185 	.word	0x08004185
 800411c:	08004185 	.word	0x08004185
 8004120:	08004185 	.word	0x08004185
 8004124:	08004185 	.word	0x08004185
 8004128:	08004185 	.word	0x08004185
 800412c:	08004185 	.word	0x08004185
 8004130:	08004175 	.word	0x08004175
 8004134:	08004185 	.word	0x08004185
 8004138:	08004185 	.word	0x08004185
 800413c:	08004185 	.word	0x08004185
 8004140:	08004185 	.word	0x08004185
 8004144:	08004185 	.word	0x08004185
 8004148:	08004185 	.word	0x08004185
 800414c:	08004185 	.word	0x08004185
 8004150:	0800417d 	.word	0x0800417d
 8004154:	2301      	movs	r3, #1
 8004156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800415a:	e326      	b.n	80047aa <UART_SetConfig+0x7ae>
 800415c:	2304      	movs	r3, #4
 800415e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004162:	e322      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004164:	2308      	movs	r3, #8
 8004166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800416a:	e31e      	b.n	80047aa <UART_SetConfig+0x7ae>
 800416c:	2310      	movs	r3, #16
 800416e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004172:	e31a      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004174:	2320      	movs	r3, #32
 8004176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800417a:	e316      	b.n	80047aa <UART_SetConfig+0x7ae>
 800417c:	2340      	movs	r3, #64	; 0x40
 800417e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004182:	e312      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004184:	2380      	movs	r3, #128	; 0x80
 8004186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800418a:	e30e      	b.n	80047aa <UART_SetConfig+0x7ae>
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a69      	ldr	r2, [pc, #420]	; (8004338 <UART_SetConfig+0x33c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d130      	bne.n	80041f8 <UART_SetConfig+0x1fc>
 8004196:	4b67      	ldr	r3, [pc, #412]	; (8004334 <UART_SetConfig+0x338>)
 8004198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419a:	f003 0307 	and.w	r3, r3, #7
 800419e:	2b05      	cmp	r3, #5
 80041a0:	d826      	bhi.n	80041f0 <UART_SetConfig+0x1f4>
 80041a2:	a201      	add	r2, pc, #4	; (adr r2, 80041a8 <UART_SetConfig+0x1ac>)
 80041a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a8:	080041c1 	.word	0x080041c1
 80041ac:	080041c9 	.word	0x080041c9
 80041b0:	080041d1 	.word	0x080041d1
 80041b4:	080041d9 	.word	0x080041d9
 80041b8:	080041e1 	.word	0x080041e1
 80041bc:	080041e9 	.word	0x080041e9
 80041c0:	2300      	movs	r3, #0
 80041c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041c6:	e2f0      	b.n	80047aa <UART_SetConfig+0x7ae>
 80041c8:	2304      	movs	r3, #4
 80041ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041ce:	e2ec      	b.n	80047aa <UART_SetConfig+0x7ae>
 80041d0:	2308      	movs	r3, #8
 80041d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041d6:	e2e8      	b.n	80047aa <UART_SetConfig+0x7ae>
 80041d8:	2310      	movs	r3, #16
 80041da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041de:	e2e4      	b.n	80047aa <UART_SetConfig+0x7ae>
 80041e0:	2320      	movs	r3, #32
 80041e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041e6:	e2e0      	b.n	80047aa <UART_SetConfig+0x7ae>
 80041e8:	2340      	movs	r3, #64	; 0x40
 80041ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041ee:	e2dc      	b.n	80047aa <UART_SetConfig+0x7ae>
 80041f0:	2380      	movs	r3, #128	; 0x80
 80041f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041f6:	e2d8      	b.n	80047aa <UART_SetConfig+0x7ae>
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a4f      	ldr	r2, [pc, #316]	; (800433c <UART_SetConfig+0x340>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d130      	bne.n	8004264 <UART_SetConfig+0x268>
 8004202:	4b4c      	ldr	r3, [pc, #304]	; (8004334 <UART_SetConfig+0x338>)
 8004204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	2b05      	cmp	r3, #5
 800420c:	d826      	bhi.n	800425c <UART_SetConfig+0x260>
 800420e:	a201      	add	r2, pc, #4	; (adr r2, 8004214 <UART_SetConfig+0x218>)
 8004210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004214:	0800422d 	.word	0x0800422d
 8004218:	08004235 	.word	0x08004235
 800421c:	0800423d 	.word	0x0800423d
 8004220:	08004245 	.word	0x08004245
 8004224:	0800424d 	.word	0x0800424d
 8004228:	08004255 	.word	0x08004255
 800422c:	2300      	movs	r3, #0
 800422e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004232:	e2ba      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004234:	2304      	movs	r3, #4
 8004236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800423a:	e2b6      	b.n	80047aa <UART_SetConfig+0x7ae>
 800423c:	2308      	movs	r3, #8
 800423e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004242:	e2b2      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004244:	2310      	movs	r3, #16
 8004246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800424a:	e2ae      	b.n	80047aa <UART_SetConfig+0x7ae>
 800424c:	2320      	movs	r3, #32
 800424e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004252:	e2aa      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004254:	2340      	movs	r3, #64	; 0x40
 8004256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800425a:	e2a6      	b.n	80047aa <UART_SetConfig+0x7ae>
 800425c:	2380      	movs	r3, #128	; 0x80
 800425e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004262:	e2a2      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a35      	ldr	r2, [pc, #212]	; (8004340 <UART_SetConfig+0x344>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d130      	bne.n	80042d0 <UART_SetConfig+0x2d4>
 800426e:	4b31      	ldr	r3, [pc, #196]	; (8004334 <UART_SetConfig+0x338>)
 8004270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	2b05      	cmp	r3, #5
 8004278:	d826      	bhi.n	80042c8 <UART_SetConfig+0x2cc>
 800427a:	a201      	add	r2, pc, #4	; (adr r2, 8004280 <UART_SetConfig+0x284>)
 800427c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004280:	08004299 	.word	0x08004299
 8004284:	080042a1 	.word	0x080042a1
 8004288:	080042a9 	.word	0x080042a9
 800428c:	080042b1 	.word	0x080042b1
 8004290:	080042b9 	.word	0x080042b9
 8004294:	080042c1 	.word	0x080042c1
 8004298:	2300      	movs	r3, #0
 800429a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800429e:	e284      	b.n	80047aa <UART_SetConfig+0x7ae>
 80042a0:	2304      	movs	r3, #4
 80042a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042a6:	e280      	b.n	80047aa <UART_SetConfig+0x7ae>
 80042a8:	2308      	movs	r3, #8
 80042aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042ae:	e27c      	b.n	80047aa <UART_SetConfig+0x7ae>
 80042b0:	2310      	movs	r3, #16
 80042b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042b6:	e278      	b.n	80047aa <UART_SetConfig+0x7ae>
 80042b8:	2320      	movs	r3, #32
 80042ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042be:	e274      	b.n	80047aa <UART_SetConfig+0x7ae>
 80042c0:	2340      	movs	r3, #64	; 0x40
 80042c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042c6:	e270      	b.n	80047aa <UART_SetConfig+0x7ae>
 80042c8:	2380      	movs	r3, #128	; 0x80
 80042ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042ce:	e26c      	b.n	80047aa <UART_SetConfig+0x7ae>
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a1b      	ldr	r2, [pc, #108]	; (8004344 <UART_SetConfig+0x348>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d142      	bne.n	8004360 <UART_SetConfig+0x364>
 80042da:	4b16      	ldr	r3, [pc, #88]	; (8004334 <UART_SetConfig+0x338>)
 80042dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	2b05      	cmp	r3, #5
 80042e4:	d838      	bhi.n	8004358 <UART_SetConfig+0x35c>
 80042e6:	a201      	add	r2, pc, #4	; (adr r2, 80042ec <UART_SetConfig+0x2f0>)
 80042e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ec:	08004305 	.word	0x08004305
 80042f0:	0800430d 	.word	0x0800430d
 80042f4:	08004315 	.word	0x08004315
 80042f8:	0800431d 	.word	0x0800431d
 80042fc:	08004349 	.word	0x08004349
 8004300:	08004351 	.word	0x08004351
 8004304:	2300      	movs	r3, #0
 8004306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800430a:	e24e      	b.n	80047aa <UART_SetConfig+0x7ae>
 800430c:	2304      	movs	r3, #4
 800430e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004312:	e24a      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004314:	2308      	movs	r3, #8
 8004316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800431a:	e246      	b.n	80047aa <UART_SetConfig+0x7ae>
 800431c:	2310      	movs	r3, #16
 800431e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004322:	e242      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004324:	cfff69f3 	.word	0xcfff69f3
 8004328:	58000c00 	.word	0x58000c00
 800432c:	11fff4ff 	.word	0x11fff4ff
 8004330:	40011000 	.word	0x40011000
 8004334:	58024400 	.word	0x58024400
 8004338:	40004400 	.word	0x40004400
 800433c:	40004800 	.word	0x40004800
 8004340:	40004c00 	.word	0x40004c00
 8004344:	40005000 	.word	0x40005000
 8004348:	2320      	movs	r3, #32
 800434a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800434e:	e22c      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004350:	2340      	movs	r3, #64	; 0x40
 8004352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004356:	e228      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004358:	2380      	movs	r3, #128	; 0x80
 800435a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800435e:	e224      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4ab1      	ldr	r2, [pc, #708]	; (800462c <UART_SetConfig+0x630>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d176      	bne.n	8004458 <UART_SetConfig+0x45c>
 800436a:	4bb1      	ldr	r3, [pc, #708]	; (8004630 <UART_SetConfig+0x634>)
 800436c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004372:	2b28      	cmp	r3, #40	; 0x28
 8004374:	d86c      	bhi.n	8004450 <UART_SetConfig+0x454>
 8004376:	a201      	add	r2, pc, #4	; (adr r2, 800437c <UART_SetConfig+0x380>)
 8004378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437c:	08004421 	.word	0x08004421
 8004380:	08004451 	.word	0x08004451
 8004384:	08004451 	.word	0x08004451
 8004388:	08004451 	.word	0x08004451
 800438c:	08004451 	.word	0x08004451
 8004390:	08004451 	.word	0x08004451
 8004394:	08004451 	.word	0x08004451
 8004398:	08004451 	.word	0x08004451
 800439c:	08004429 	.word	0x08004429
 80043a0:	08004451 	.word	0x08004451
 80043a4:	08004451 	.word	0x08004451
 80043a8:	08004451 	.word	0x08004451
 80043ac:	08004451 	.word	0x08004451
 80043b0:	08004451 	.word	0x08004451
 80043b4:	08004451 	.word	0x08004451
 80043b8:	08004451 	.word	0x08004451
 80043bc:	08004431 	.word	0x08004431
 80043c0:	08004451 	.word	0x08004451
 80043c4:	08004451 	.word	0x08004451
 80043c8:	08004451 	.word	0x08004451
 80043cc:	08004451 	.word	0x08004451
 80043d0:	08004451 	.word	0x08004451
 80043d4:	08004451 	.word	0x08004451
 80043d8:	08004451 	.word	0x08004451
 80043dc:	08004439 	.word	0x08004439
 80043e0:	08004451 	.word	0x08004451
 80043e4:	08004451 	.word	0x08004451
 80043e8:	08004451 	.word	0x08004451
 80043ec:	08004451 	.word	0x08004451
 80043f0:	08004451 	.word	0x08004451
 80043f4:	08004451 	.word	0x08004451
 80043f8:	08004451 	.word	0x08004451
 80043fc:	08004441 	.word	0x08004441
 8004400:	08004451 	.word	0x08004451
 8004404:	08004451 	.word	0x08004451
 8004408:	08004451 	.word	0x08004451
 800440c:	08004451 	.word	0x08004451
 8004410:	08004451 	.word	0x08004451
 8004414:	08004451 	.word	0x08004451
 8004418:	08004451 	.word	0x08004451
 800441c:	08004449 	.word	0x08004449
 8004420:	2301      	movs	r3, #1
 8004422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004426:	e1c0      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004428:	2304      	movs	r3, #4
 800442a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800442e:	e1bc      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004430:	2308      	movs	r3, #8
 8004432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004436:	e1b8      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004438:	2310      	movs	r3, #16
 800443a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800443e:	e1b4      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004440:	2320      	movs	r3, #32
 8004442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004446:	e1b0      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004448:	2340      	movs	r3, #64	; 0x40
 800444a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800444e:	e1ac      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004450:	2380      	movs	r3, #128	; 0x80
 8004452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004456:	e1a8      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a75      	ldr	r2, [pc, #468]	; (8004634 <UART_SetConfig+0x638>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d130      	bne.n	80044c4 <UART_SetConfig+0x4c8>
 8004462:	4b73      	ldr	r3, [pc, #460]	; (8004630 <UART_SetConfig+0x634>)
 8004464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	2b05      	cmp	r3, #5
 800446c:	d826      	bhi.n	80044bc <UART_SetConfig+0x4c0>
 800446e:	a201      	add	r2, pc, #4	; (adr r2, 8004474 <UART_SetConfig+0x478>)
 8004470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004474:	0800448d 	.word	0x0800448d
 8004478:	08004495 	.word	0x08004495
 800447c:	0800449d 	.word	0x0800449d
 8004480:	080044a5 	.word	0x080044a5
 8004484:	080044ad 	.word	0x080044ad
 8004488:	080044b5 	.word	0x080044b5
 800448c:	2300      	movs	r3, #0
 800448e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004492:	e18a      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004494:	2304      	movs	r3, #4
 8004496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800449a:	e186      	b.n	80047aa <UART_SetConfig+0x7ae>
 800449c:	2308      	movs	r3, #8
 800449e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044a2:	e182      	b.n	80047aa <UART_SetConfig+0x7ae>
 80044a4:	2310      	movs	r3, #16
 80044a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044aa:	e17e      	b.n	80047aa <UART_SetConfig+0x7ae>
 80044ac:	2320      	movs	r3, #32
 80044ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044b2:	e17a      	b.n	80047aa <UART_SetConfig+0x7ae>
 80044b4:	2340      	movs	r3, #64	; 0x40
 80044b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044ba:	e176      	b.n	80047aa <UART_SetConfig+0x7ae>
 80044bc:	2380      	movs	r3, #128	; 0x80
 80044be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044c2:	e172      	b.n	80047aa <UART_SetConfig+0x7ae>
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a5b      	ldr	r2, [pc, #364]	; (8004638 <UART_SetConfig+0x63c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d130      	bne.n	8004530 <UART_SetConfig+0x534>
 80044ce:	4b58      	ldr	r3, [pc, #352]	; (8004630 <UART_SetConfig+0x634>)
 80044d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	2b05      	cmp	r3, #5
 80044d8:	d826      	bhi.n	8004528 <UART_SetConfig+0x52c>
 80044da:	a201      	add	r2, pc, #4	; (adr r2, 80044e0 <UART_SetConfig+0x4e4>)
 80044dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e0:	080044f9 	.word	0x080044f9
 80044e4:	08004501 	.word	0x08004501
 80044e8:	08004509 	.word	0x08004509
 80044ec:	08004511 	.word	0x08004511
 80044f0:	08004519 	.word	0x08004519
 80044f4:	08004521 	.word	0x08004521
 80044f8:	2300      	movs	r3, #0
 80044fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044fe:	e154      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004500:	2304      	movs	r3, #4
 8004502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004506:	e150      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004508:	2308      	movs	r3, #8
 800450a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800450e:	e14c      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004510:	2310      	movs	r3, #16
 8004512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004516:	e148      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004518:	2320      	movs	r3, #32
 800451a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800451e:	e144      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004520:	2340      	movs	r3, #64	; 0x40
 8004522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004526:	e140      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004528:	2380      	movs	r3, #128	; 0x80
 800452a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800452e:	e13c      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a41      	ldr	r2, [pc, #260]	; (800463c <UART_SetConfig+0x640>)
 8004536:	4293      	cmp	r3, r2
 8004538:	f040 8082 	bne.w	8004640 <UART_SetConfig+0x644>
 800453c:	4b3c      	ldr	r3, [pc, #240]	; (8004630 <UART_SetConfig+0x634>)
 800453e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004540:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004544:	2b28      	cmp	r3, #40	; 0x28
 8004546:	d86d      	bhi.n	8004624 <UART_SetConfig+0x628>
 8004548:	a201      	add	r2, pc, #4	; (adr r2, 8004550 <UART_SetConfig+0x554>)
 800454a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454e:	bf00      	nop
 8004550:	080045f5 	.word	0x080045f5
 8004554:	08004625 	.word	0x08004625
 8004558:	08004625 	.word	0x08004625
 800455c:	08004625 	.word	0x08004625
 8004560:	08004625 	.word	0x08004625
 8004564:	08004625 	.word	0x08004625
 8004568:	08004625 	.word	0x08004625
 800456c:	08004625 	.word	0x08004625
 8004570:	080045fd 	.word	0x080045fd
 8004574:	08004625 	.word	0x08004625
 8004578:	08004625 	.word	0x08004625
 800457c:	08004625 	.word	0x08004625
 8004580:	08004625 	.word	0x08004625
 8004584:	08004625 	.word	0x08004625
 8004588:	08004625 	.word	0x08004625
 800458c:	08004625 	.word	0x08004625
 8004590:	08004605 	.word	0x08004605
 8004594:	08004625 	.word	0x08004625
 8004598:	08004625 	.word	0x08004625
 800459c:	08004625 	.word	0x08004625
 80045a0:	08004625 	.word	0x08004625
 80045a4:	08004625 	.word	0x08004625
 80045a8:	08004625 	.word	0x08004625
 80045ac:	08004625 	.word	0x08004625
 80045b0:	0800460d 	.word	0x0800460d
 80045b4:	08004625 	.word	0x08004625
 80045b8:	08004625 	.word	0x08004625
 80045bc:	08004625 	.word	0x08004625
 80045c0:	08004625 	.word	0x08004625
 80045c4:	08004625 	.word	0x08004625
 80045c8:	08004625 	.word	0x08004625
 80045cc:	08004625 	.word	0x08004625
 80045d0:	08004615 	.word	0x08004615
 80045d4:	08004625 	.word	0x08004625
 80045d8:	08004625 	.word	0x08004625
 80045dc:	08004625 	.word	0x08004625
 80045e0:	08004625 	.word	0x08004625
 80045e4:	08004625 	.word	0x08004625
 80045e8:	08004625 	.word	0x08004625
 80045ec:	08004625 	.word	0x08004625
 80045f0:	0800461d 	.word	0x0800461d
 80045f4:	2301      	movs	r3, #1
 80045f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045fa:	e0d6      	b.n	80047aa <UART_SetConfig+0x7ae>
 80045fc:	2304      	movs	r3, #4
 80045fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004602:	e0d2      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004604:	2308      	movs	r3, #8
 8004606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800460a:	e0ce      	b.n	80047aa <UART_SetConfig+0x7ae>
 800460c:	2310      	movs	r3, #16
 800460e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004612:	e0ca      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004614:	2320      	movs	r3, #32
 8004616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800461a:	e0c6      	b.n	80047aa <UART_SetConfig+0x7ae>
 800461c:	2340      	movs	r3, #64	; 0x40
 800461e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004622:	e0c2      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004624:	2380      	movs	r3, #128	; 0x80
 8004626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800462a:	e0be      	b.n	80047aa <UART_SetConfig+0x7ae>
 800462c:	40011400 	.word	0x40011400
 8004630:	58024400 	.word	0x58024400
 8004634:	40007800 	.word	0x40007800
 8004638:	40007c00 	.word	0x40007c00
 800463c:	40011800 	.word	0x40011800
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4aad      	ldr	r2, [pc, #692]	; (80048fc <UART_SetConfig+0x900>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d176      	bne.n	8004738 <UART_SetConfig+0x73c>
 800464a:	4bad      	ldr	r3, [pc, #692]	; (8004900 <UART_SetConfig+0x904>)
 800464c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004652:	2b28      	cmp	r3, #40	; 0x28
 8004654:	d86c      	bhi.n	8004730 <UART_SetConfig+0x734>
 8004656:	a201      	add	r2, pc, #4	; (adr r2, 800465c <UART_SetConfig+0x660>)
 8004658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465c:	08004701 	.word	0x08004701
 8004660:	08004731 	.word	0x08004731
 8004664:	08004731 	.word	0x08004731
 8004668:	08004731 	.word	0x08004731
 800466c:	08004731 	.word	0x08004731
 8004670:	08004731 	.word	0x08004731
 8004674:	08004731 	.word	0x08004731
 8004678:	08004731 	.word	0x08004731
 800467c:	08004709 	.word	0x08004709
 8004680:	08004731 	.word	0x08004731
 8004684:	08004731 	.word	0x08004731
 8004688:	08004731 	.word	0x08004731
 800468c:	08004731 	.word	0x08004731
 8004690:	08004731 	.word	0x08004731
 8004694:	08004731 	.word	0x08004731
 8004698:	08004731 	.word	0x08004731
 800469c:	08004711 	.word	0x08004711
 80046a0:	08004731 	.word	0x08004731
 80046a4:	08004731 	.word	0x08004731
 80046a8:	08004731 	.word	0x08004731
 80046ac:	08004731 	.word	0x08004731
 80046b0:	08004731 	.word	0x08004731
 80046b4:	08004731 	.word	0x08004731
 80046b8:	08004731 	.word	0x08004731
 80046bc:	08004719 	.word	0x08004719
 80046c0:	08004731 	.word	0x08004731
 80046c4:	08004731 	.word	0x08004731
 80046c8:	08004731 	.word	0x08004731
 80046cc:	08004731 	.word	0x08004731
 80046d0:	08004731 	.word	0x08004731
 80046d4:	08004731 	.word	0x08004731
 80046d8:	08004731 	.word	0x08004731
 80046dc:	08004721 	.word	0x08004721
 80046e0:	08004731 	.word	0x08004731
 80046e4:	08004731 	.word	0x08004731
 80046e8:	08004731 	.word	0x08004731
 80046ec:	08004731 	.word	0x08004731
 80046f0:	08004731 	.word	0x08004731
 80046f4:	08004731 	.word	0x08004731
 80046f8:	08004731 	.word	0x08004731
 80046fc:	08004729 	.word	0x08004729
 8004700:	2301      	movs	r3, #1
 8004702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004706:	e050      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004708:	2304      	movs	r3, #4
 800470a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800470e:	e04c      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004710:	2308      	movs	r3, #8
 8004712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004716:	e048      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004718:	2310      	movs	r3, #16
 800471a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800471e:	e044      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004720:	2320      	movs	r3, #32
 8004722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004726:	e040      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004728:	2340      	movs	r3, #64	; 0x40
 800472a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800472e:	e03c      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004730:	2380      	movs	r3, #128	; 0x80
 8004732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004736:	e038      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a71      	ldr	r2, [pc, #452]	; (8004904 <UART_SetConfig+0x908>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d130      	bne.n	80047a4 <UART_SetConfig+0x7a8>
 8004742:	4b6f      	ldr	r3, [pc, #444]	; (8004900 <UART_SetConfig+0x904>)
 8004744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	2b05      	cmp	r3, #5
 800474c:	d826      	bhi.n	800479c <UART_SetConfig+0x7a0>
 800474e:	a201      	add	r2, pc, #4	; (adr r2, 8004754 <UART_SetConfig+0x758>)
 8004750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004754:	0800476d 	.word	0x0800476d
 8004758:	08004775 	.word	0x08004775
 800475c:	0800477d 	.word	0x0800477d
 8004760:	08004785 	.word	0x08004785
 8004764:	0800478d 	.word	0x0800478d
 8004768:	08004795 	.word	0x08004795
 800476c:	2302      	movs	r3, #2
 800476e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004772:	e01a      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004774:	2304      	movs	r3, #4
 8004776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800477a:	e016      	b.n	80047aa <UART_SetConfig+0x7ae>
 800477c:	2308      	movs	r3, #8
 800477e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004782:	e012      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004784:	2310      	movs	r3, #16
 8004786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800478a:	e00e      	b.n	80047aa <UART_SetConfig+0x7ae>
 800478c:	2320      	movs	r3, #32
 800478e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004792:	e00a      	b.n	80047aa <UART_SetConfig+0x7ae>
 8004794:	2340      	movs	r3, #64	; 0x40
 8004796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800479a:	e006      	b.n	80047aa <UART_SetConfig+0x7ae>
 800479c:	2380      	movs	r3, #128	; 0x80
 800479e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047a2:	e002      	b.n	80047aa <UART_SetConfig+0x7ae>
 80047a4:	2380      	movs	r3, #128	; 0x80
 80047a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a55      	ldr	r2, [pc, #340]	; (8004904 <UART_SetConfig+0x908>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	f040 80f8 	bne.w	80049a6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80047ba:	2b20      	cmp	r3, #32
 80047bc:	dc46      	bgt.n	800484c <UART_SetConfig+0x850>
 80047be:	2b02      	cmp	r3, #2
 80047c0:	db75      	blt.n	80048ae <UART_SetConfig+0x8b2>
 80047c2:	3b02      	subs	r3, #2
 80047c4:	2b1e      	cmp	r3, #30
 80047c6:	d872      	bhi.n	80048ae <UART_SetConfig+0x8b2>
 80047c8:	a201      	add	r2, pc, #4	; (adr r2, 80047d0 <UART_SetConfig+0x7d4>)
 80047ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ce:	bf00      	nop
 80047d0:	08004853 	.word	0x08004853
 80047d4:	080048af 	.word	0x080048af
 80047d8:	0800485b 	.word	0x0800485b
 80047dc:	080048af 	.word	0x080048af
 80047e0:	080048af 	.word	0x080048af
 80047e4:	080048af 	.word	0x080048af
 80047e8:	0800486b 	.word	0x0800486b
 80047ec:	080048af 	.word	0x080048af
 80047f0:	080048af 	.word	0x080048af
 80047f4:	080048af 	.word	0x080048af
 80047f8:	080048af 	.word	0x080048af
 80047fc:	080048af 	.word	0x080048af
 8004800:	080048af 	.word	0x080048af
 8004804:	080048af 	.word	0x080048af
 8004808:	0800487b 	.word	0x0800487b
 800480c:	080048af 	.word	0x080048af
 8004810:	080048af 	.word	0x080048af
 8004814:	080048af 	.word	0x080048af
 8004818:	080048af 	.word	0x080048af
 800481c:	080048af 	.word	0x080048af
 8004820:	080048af 	.word	0x080048af
 8004824:	080048af 	.word	0x080048af
 8004828:	080048af 	.word	0x080048af
 800482c:	080048af 	.word	0x080048af
 8004830:	080048af 	.word	0x080048af
 8004834:	080048af 	.word	0x080048af
 8004838:	080048af 	.word	0x080048af
 800483c:	080048af 	.word	0x080048af
 8004840:	080048af 	.word	0x080048af
 8004844:	080048af 	.word	0x080048af
 8004848:	080048a1 	.word	0x080048a1
 800484c:	2b40      	cmp	r3, #64	; 0x40
 800484e:	d02a      	beq.n	80048a6 <UART_SetConfig+0x8aa>
 8004850:	e02d      	b.n	80048ae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004852:	f7fe ff61 	bl	8003718 <HAL_RCCEx_GetD3PCLK1Freq>
 8004856:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004858:	e02f      	b.n	80048ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800485a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800485e:	4618      	mov	r0, r3
 8004860:	f7fe ff70 	bl	8003744 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004866:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004868:	e027      	b.n	80048ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800486a:	f107 0318 	add.w	r3, r7, #24
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff f8bc 	bl	80039ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004878:	e01f      	b.n	80048ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800487a:	4b21      	ldr	r3, [pc, #132]	; (8004900 <UART_SetConfig+0x904>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0320 	and.w	r3, r3, #32
 8004882:	2b00      	cmp	r3, #0
 8004884:	d009      	beq.n	800489a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004886:	4b1e      	ldr	r3, [pc, #120]	; (8004900 <UART_SetConfig+0x904>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	08db      	lsrs	r3, r3, #3
 800488c:	f003 0303 	and.w	r3, r3, #3
 8004890:	4a1d      	ldr	r2, [pc, #116]	; (8004908 <UART_SetConfig+0x90c>)
 8004892:	fa22 f303 	lsr.w	r3, r2, r3
 8004896:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004898:	e00f      	b.n	80048ba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800489a:	4b1b      	ldr	r3, [pc, #108]	; (8004908 <UART_SetConfig+0x90c>)
 800489c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800489e:	e00c      	b.n	80048ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80048a0:	4b1a      	ldr	r3, [pc, #104]	; (800490c <UART_SetConfig+0x910>)
 80048a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80048a4:	e009      	b.n	80048ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80048ac:	e005      	b.n	80048ba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80048b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 81ee 	beq.w	8004c9e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	4a12      	ldr	r2, [pc, #72]	; (8004910 <UART_SetConfig+0x914>)
 80048c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048cc:	461a      	mov	r2, r3
 80048ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80048d4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	4613      	mov	r3, r2
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	4413      	add	r3, r2
 80048e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d305      	bcc.n	80048f2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d910      	bls.n	8004914 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80048f8:	e1d1      	b.n	8004c9e <UART_SetConfig+0xca2>
 80048fa:	bf00      	nop
 80048fc:	40011c00 	.word	0x40011c00
 8004900:	58024400 	.word	0x58024400
 8004904:	58000c00 	.word	0x58000c00
 8004908:	03d09000 	.word	0x03d09000
 800490c:	003d0900 	.word	0x003d0900
 8004910:	080053b8 	.word	0x080053b8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004916:	2200      	movs	r2, #0
 8004918:	60bb      	str	r3, [r7, #8]
 800491a:	60fa      	str	r2, [r7, #12]
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	4ac0      	ldr	r2, [pc, #768]	; (8004c24 <UART_SetConfig+0xc28>)
 8004922:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004926:	b29b      	uxth	r3, r3
 8004928:	2200      	movs	r2, #0
 800492a:	603b      	str	r3, [r7, #0]
 800492c:	607a      	str	r2, [r7, #4]
 800492e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004932:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004936:	f7fb fcd9 	bl	80002ec <__aeabi_uldivmod>
 800493a:	4602      	mov	r2, r0
 800493c:	460b      	mov	r3, r1
 800493e:	4610      	mov	r0, r2
 8004940:	4619      	mov	r1, r3
 8004942:	f04f 0200 	mov.w	r2, #0
 8004946:	f04f 0300 	mov.w	r3, #0
 800494a:	020b      	lsls	r3, r1, #8
 800494c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004950:	0202      	lsls	r2, r0, #8
 8004952:	6979      	ldr	r1, [r7, #20]
 8004954:	6849      	ldr	r1, [r1, #4]
 8004956:	0849      	lsrs	r1, r1, #1
 8004958:	2000      	movs	r0, #0
 800495a:	460c      	mov	r4, r1
 800495c:	4605      	mov	r5, r0
 800495e:	eb12 0804 	adds.w	r8, r2, r4
 8004962:	eb43 0905 	adc.w	r9, r3, r5
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	469a      	mov	sl, r3
 800496e:	4693      	mov	fp, r2
 8004970:	4652      	mov	r2, sl
 8004972:	465b      	mov	r3, fp
 8004974:	4640      	mov	r0, r8
 8004976:	4649      	mov	r1, r9
 8004978:	f7fb fcb8 	bl	80002ec <__aeabi_uldivmod>
 800497c:	4602      	mov	r2, r0
 800497e:	460b      	mov	r3, r1
 8004980:	4613      	mov	r3, r2
 8004982:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004986:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800498a:	d308      	bcc.n	800499e <UART_SetConfig+0x9a2>
 800498c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004992:	d204      	bcs.n	800499e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800499a:	60da      	str	r2, [r3, #12]
 800499c:	e17f      	b.n	8004c9e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80049a4:	e17b      	b.n	8004c9e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ae:	f040 80bd 	bne.w	8004b2c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80049b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80049b6:	2b20      	cmp	r3, #32
 80049b8:	dc48      	bgt.n	8004a4c <UART_SetConfig+0xa50>
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	db7b      	blt.n	8004ab6 <UART_SetConfig+0xaba>
 80049be:	2b20      	cmp	r3, #32
 80049c0:	d879      	bhi.n	8004ab6 <UART_SetConfig+0xaba>
 80049c2:	a201      	add	r2, pc, #4	; (adr r2, 80049c8 <UART_SetConfig+0x9cc>)
 80049c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c8:	08004a53 	.word	0x08004a53
 80049cc:	08004a5b 	.word	0x08004a5b
 80049d0:	08004ab7 	.word	0x08004ab7
 80049d4:	08004ab7 	.word	0x08004ab7
 80049d8:	08004a63 	.word	0x08004a63
 80049dc:	08004ab7 	.word	0x08004ab7
 80049e0:	08004ab7 	.word	0x08004ab7
 80049e4:	08004ab7 	.word	0x08004ab7
 80049e8:	08004a73 	.word	0x08004a73
 80049ec:	08004ab7 	.word	0x08004ab7
 80049f0:	08004ab7 	.word	0x08004ab7
 80049f4:	08004ab7 	.word	0x08004ab7
 80049f8:	08004ab7 	.word	0x08004ab7
 80049fc:	08004ab7 	.word	0x08004ab7
 8004a00:	08004ab7 	.word	0x08004ab7
 8004a04:	08004ab7 	.word	0x08004ab7
 8004a08:	08004a83 	.word	0x08004a83
 8004a0c:	08004ab7 	.word	0x08004ab7
 8004a10:	08004ab7 	.word	0x08004ab7
 8004a14:	08004ab7 	.word	0x08004ab7
 8004a18:	08004ab7 	.word	0x08004ab7
 8004a1c:	08004ab7 	.word	0x08004ab7
 8004a20:	08004ab7 	.word	0x08004ab7
 8004a24:	08004ab7 	.word	0x08004ab7
 8004a28:	08004ab7 	.word	0x08004ab7
 8004a2c:	08004ab7 	.word	0x08004ab7
 8004a30:	08004ab7 	.word	0x08004ab7
 8004a34:	08004ab7 	.word	0x08004ab7
 8004a38:	08004ab7 	.word	0x08004ab7
 8004a3c:	08004ab7 	.word	0x08004ab7
 8004a40:	08004ab7 	.word	0x08004ab7
 8004a44:	08004ab7 	.word	0x08004ab7
 8004a48:	08004aa9 	.word	0x08004aa9
 8004a4c:	2b40      	cmp	r3, #64	; 0x40
 8004a4e:	d02e      	beq.n	8004aae <UART_SetConfig+0xab2>
 8004a50:	e031      	b.n	8004ab6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a52:	f7fd fc77 	bl	8002344 <HAL_RCC_GetPCLK1Freq>
 8004a56:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004a58:	e033      	b.n	8004ac2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a5a:	f7fd fc89 	bl	8002370 <HAL_RCC_GetPCLK2Freq>
 8004a5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004a60:	e02f      	b.n	8004ac2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7fe fe6c 	bl	8003744 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a70:	e027      	b.n	8004ac2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a72:	f107 0318 	add.w	r3, r7, #24
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fe ffb8 	bl	80039ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a80:	e01f      	b.n	8004ac2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a82:	4b69      	ldr	r3, [pc, #420]	; (8004c28 <UART_SetConfig+0xc2c>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d009      	beq.n	8004aa2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004a8e:	4b66      	ldr	r3, [pc, #408]	; (8004c28 <UART_SetConfig+0xc2c>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	08db      	lsrs	r3, r3, #3
 8004a94:	f003 0303 	and.w	r3, r3, #3
 8004a98:	4a64      	ldr	r2, [pc, #400]	; (8004c2c <UART_SetConfig+0xc30>)
 8004a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004aa0:	e00f      	b.n	8004ac2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8004aa2:	4b62      	ldr	r3, [pc, #392]	; (8004c2c <UART_SetConfig+0xc30>)
 8004aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004aa6:	e00c      	b.n	8004ac2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004aa8:	4b61      	ldr	r3, [pc, #388]	; (8004c30 <UART_SetConfig+0xc34>)
 8004aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004aac:	e009      	b.n	8004ac2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ab4:	e005      	b.n	8004ac2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004ac0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 80ea 	beq.w	8004c9e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	4a55      	ldr	r2, [pc, #340]	; (8004c24 <UART_SetConfig+0xc28>)
 8004ad0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ad8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004adc:	005a      	lsls	r2, r3, #1
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	085b      	lsrs	r3, r3, #1
 8004ae4:	441a      	add	r2, r3
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aee:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af2:	2b0f      	cmp	r3, #15
 8004af4:	d916      	bls.n	8004b24 <UART_SetConfig+0xb28>
 8004af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004afc:	d212      	bcs.n	8004b24 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	f023 030f 	bic.w	r3, r3, #15
 8004b06:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0a:	085b      	lsrs	r3, r3, #1
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	f003 0307 	and.w	r3, r3, #7
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b16:	4313      	orrs	r3, r2
 8004b18:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004b20:	60da      	str	r2, [r3, #12]
 8004b22:	e0bc      	b.n	8004c9e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004b2a:	e0b8      	b.n	8004c9e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b2c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004b30:	2b20      	cmp	r3, #32
 8004b32:	dc4b      	bgt.n	8004bcc <UART_SetConfig+0xbd0>
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f2c0 8087 	blt.w	8004c48 <UART_SetConfig+0xc4c>
 8004b3a:	2b20      	cmp	r3, #32
 8004b3c:	f200 8084 	bhi.w	8004c48 <UART_SetConfig+0xc4c>
 8004b40:	a201      	add	r2, pc, #4	; (adr r2, 8004b48 <UART_SetConfig+0xb4c>)
 8004b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b46:	bf00      	nop
 8004b48:	08004bd3 	.word	0x08004bd3
 8004b4c:	08004bdb 	.word	0x08004bdb
 8004b50:	08004c49 	.word	0x08004c49
 8004b54:	08004c49 	.word	0x08004c49
 8004b58:	08004be3 	.word	0x08004be3
 8004b5c:	08004c49 	.word	0x08004c49
 8004b60:	08004c49 	.word	0x08004c49
 8004b64:	08004c49 	.word	0x08004c49
 8004b68:	08004bf3 	.word	0x08004bf3
 8004b6c:	08004c49 	.word	0x08004c49
 8004b70:	08004c49 	.word	0x08004c49
 8004b74:	08004c49 	.word	0x08004c49
 8004b78:	08004c49 	.word	0x08004c49
 8004b7c:	08004c49 	.word	0x08004c49
 8004b80:	08004c49 	.word	0x08004c49
 8004b84:	08004c49 	.word	0x08004c49
 8004b88:	08004c03 	.word	0x08004c03
 8004b8c:	08004c49 	.word	0x08004c49
 8004b90:	08004c49 	.word	0x08004c49
 8004b94:	08004c49 	.word	0x08004c49
 8004b98:	08004c49 	.word	0x08004c49
 8004b9c:	08004c49 	.word	0x08004c49
 8004ba0:	08004c49 	.word	0x08004c49
 8004ba4:	08004c49 	.word	0x08004c49
 8004ba8:	08004c49 	.word	0x08004c49
 8004bac:	08004c49 	.word	0x08004c49
 8004bb0:	08004c49 	.word	0x08004c49
 8004bb4:	08004c49 	.word	0x08004c49
 8004bb8:	08004c49 	.word	0x08004c49
 8004bbc:	08004c49 	.word	0x08004c49
 8004bc0:	08004c49 	.word	0x08004c49
 8004bc4:	08004c49 	.word	0x08004c49
 8004bc8:	08004c3b 	.word	0x08004c3b
 8004bcc:	2b40      	cmp	r3, #64	; 0x40
 8004bce:	d037      	beq.n	8004c40 <UART_SetConfig+0xc44>
 8004bd0:	e03a      	b.n	8004c48 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bd2:	f7fd fbb7 	bl	8002344 <HAL_RCC_GetPCLK1Freq>
 8004bd6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004bd8:	e03c      	b.n	8004c54 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bda:	f7fd fbc9 	bl	8002370 <HAL_RCC_GetPCLK2Freq>
 8004bde:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004be0:	e038      	b.n	8004c54 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fe fdac 	bl	8003744 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bf0:	e030      	b.n	8004c54 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bf2:	f107 0318 	add.w	r3, r7, #24
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7fe fef8 	bl	80039ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c00:	e028      	b.n	8004c54 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c02:	4b09      	ldr	r3, [pc, #36]	; (8004c28 <UART_SetConfig+0xc2c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0320 	and.w	r3, r3, #32
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d012      	beq.n	8004c34 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004c0e:	4b06      	ldr	r3, [pc, #24]	; (8004c28 <UART_SetConfig+0xc2c>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	08db      	lsrs	r3, r3, #3
 8004c14:	f003 0303 	and.w	r3, r3, #3
 8004c18:	4a04      	ldr	r2, [pc, #16]	; (8004c2c <UART_SetConfig+0xc30>)
 8004c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c20:	e018      	b.n	8004c54 <UART_SetConfig+0xc58>
 8004c22:	bf00      	nop
 8004c24:	080053b8 	.word	0x080053b8
 8004c28:	58024400 	.word	0x58024400
 8004c2c:	03d09000 	.word	0x03d09000
 8004c30:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8004c34:	4b24      	ldr	r3, [pc, #144]	; (8004cc8 <UART_SetConfig+0xccc>)
 8004c36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c38:	e00c      	b.n	8004c54 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004c3a:	4b24      	ldr	r3, [pc, #144]	; (8004ccc <UART_SetConfig+0xcd0>)
 8004c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c3e:	e009      	b.n	8004c54 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c46:	e005      	b.n	8004c54 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004c52:	bf00      	nop
    }

    if (pclk != 0U)
 8004c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d021      	beq.n	8004c9e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	4a1c      	ldr	r2, [pc, #112]	; (8004cd0 <UART_SetConfig+0xcd4>)
 8004c60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c64:	461a      	mov	r2, r3
 8004c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c68:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	085b      	lsrs	r3, r3, #1
 8004c72:	441a      	add	r2, r3
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c80:	2b0f      	cmp	r3, #15
 8004c82:	d909      	bls.n	8004c98 <UART_SetConfig+0xc9c>
 8004c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c8a:	d205      	bcs.n	8004c98 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	60da      	str	r2, [r3, #12]
 8004c96:	e002      	b.n	8004c9e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004cba:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3748      	adds	r7, #72	; 0x48
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cc8:	03d09000 	.word	0x03d09000
 8004ccc:	003d0900 	.word	0x003d0900
 8004cd0:	080053b8 	.word	0x080053b8

08004cd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00a      	beq.n	8004d42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d68:	f003 0310 	and.w	r3, r3, #16
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00a      	beq.n	8004d86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8a:	f003 0320 	and.w	r3, r3, #32
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00a      	beq.n	8004da8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d01a      	beq.n	8004dea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dd2:	d10a      	bne.n	8004dea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	605a      	str	r2, [r3, #4]
  }
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b098      	sub	sp, #96	; 0x60
 8004e1c:	af02      	add	r7, sp, #8
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e28:	f7fb ffcc 	bl	8000dc4 <HAL_GetTick>
 8004e2c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0308 	and.w	r3, r3, #8
 8004e38:	2b08      	cmp	r3, #8
 8004e3a:	d12f      	bne.n	8004e9c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e44:	2200      	movs	r2, #0
 8004e46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f88e 	bl	8004f6c <UART_WaitOnFlagUntilTimeout>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d022      	beq.n	8004e9c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5e:	e853 3f00 	ldrex	r3, [r3]
 8004e62:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e6a:	653b      	str	r3, [r7, #80]	; 0x50
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	461a      	mov	r2, r3
 8004e72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e74:	647b      	str	r3, [r7, #68]	; 0x44
 8004e76:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e7c:	e841 2300 	strex	r3, r2, [r1]
 8004e80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1e6      	bne.n	8004e56 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e063      	b.n	8004f64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0304 	and.w	r3, r3, #4
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	d149      	bne.n	8004f3e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eaa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 f857 	bl	8004f6c <UART_WaitOnFlagUntilTimeout>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d03c      	beq.n	8004f3e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	e853 3f00 	ldrex	r3, [r3]
 8004ed0:	623b      	str	r3, [r7, #32]
   return(result);
 8004ed2:	6a3b      	ldr	r3, [r7, #32]
 8004ed4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ee2:	633b      	str	r3, [r7, #48]	; 0x30
 8004ee4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eea:	e841 2300 	strex	r3, r2, [r1]
 8004eee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1e6      	bne.n	8004ec4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3308      	adds	r3, #8
 8004efc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	e853 3f00 	ldrex	r3, [r3]
 8004f04:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f023 0301 	bic.w	r3, r3, #1
 8004f0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3308      	adds	r3, #8
 8004f14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f16:	61fa      	str	r2, [r7, #28]
 8004f18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1a:	69b9      	ldr	r1, [r7, #24]
 8004f1c:	69fa      	ldr	r2, [r7, #28]
 8004f1e:	e841 2300 	strex	r3, r2, [r1]
 8004f22:	617b      	str	r3, [r7, #20]
   return(result);
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1e5      	bne.n	8004ef6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e012      	b.n	8004f64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2220      	movs	r2, #32
 8004f4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3758      	adds	r7, #88	; 0x58
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	603b      	str	r3, [r7, #0]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f7c:	e049      	b.n	8005012 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f84:	d045      	beq.n	8005012 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f86:	f7fb ff1d 	bl	8000dc4 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d302      	bcc.n	8004f9c <UART_WaitOnFlagUntilTimeout+0x30>
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e048      	b.n	8005032 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0304 	and.w	r3, r3, #4
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d031      	beq.n	8005012 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	69db      	ldr	r3, [r3, #28]
 8004fb4:	f003 0308 	and.w	r3, r3, #8
 8004fb8:	2b08      	cmp	r3, #8
 8004fba:	d110      	bne.n	8004fde <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2208      	movs	r2, #8
 8004fc2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 f839 	bl	800503c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2208      	movs	r2, #8
 8004fce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e029      	b.n	8005032 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fe8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fec:	d111      	bne.n	8005012 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ff6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f000 f81f 	bl	800503c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2220      	movs	r2, #32
 8005002:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e00f      	b.n	8005032 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69da      	ldr	r2, [r3, #28]
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	4013      	ands	r3, r2
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	429a      	cmp	r2, r3
 8005020:	bf0c      	ite	eq
 8005022:	2301      	moveq	r3, #1
 8005024:	2300      	movne	r3, #0
 8005026:	b2db      	uxtb	r3, r3
 8005028:	461a      	mov	r2, r3
 800502a:	79fb      	ldrb	r3, [r7, #7]
 800502c:	429a      	cmp	r2, r3
 800502e:	d0a6      	beq.n	8004f7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
	...

0800503c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800503c:	b480      	push	{r7}
 800503e:	b095      	sub	sp, #84	; 0x54
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800504c:	e853 3f00 	ldrex	r3, [r3]
 8005050:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005054:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005058:	64fb      	str	r3, [r7, #76]	; 0x4c
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	461a      	mov	r2, r3
 8005060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005062:	643b      	str	r3, [r7, #64]	; 0x40
 8005064:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005066:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005068:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800506a:	e841 2300 	strex	r3, r2, [r1]
 800506e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1e6      	bne.n	8005044 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3308      	adds	r3, #8
 800507c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507e:	6a3b      	ldr	r3, [r7, #32]
 8005080:	e853 3f00 	ldrex	r3, [r3]
 8005084:	61fb      	str	r3, [r7, #28]
   return(result);
 8005086:	69fa      	ldr	r2, [r7, #28]
 8005088:	4b1e      	ldr	r3, [pc, #120]	; (8005104 <UART_EndRxTransfer+0xc8>)
 800508a:	4013      	ands	r3, r2
 800508c:	64bb      	str	r3, [r7, #72]	; 0x48
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	3308      	adds	r3, #8
 8005094:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005096:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005098:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800509c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800509e:	e841 2300 	strex	r3, r2, [r1]
 80050a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1e5      	bne.n	8005076 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d118      	bne.n	80050e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	e853 3f00 	ldrex	r3, [r3]
 80050be:	60bb      	str	r3, [r7, #8]
   return(result);
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	f023 0310 	bic.w	r3, r3, #16
 80050c6:	647b      	str	r3, [r7, #68]	; 0x44
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	461a      	mov	r2, r3
 80050ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050d0:	61bb      	str	r3, [r7, #24]
 80050d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d4:	6979      	ldr	r1, [r7, #20]
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	e841 2300 	strex	r3, r2, [r1]
 80050dc:	613b      	str	r3, [r7, #16]
   return(result);
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1e6      	bne.n	80050b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2220      	movs	r2, #32
 80050e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80050f8:	bf00      	nop
 80050fa:	3754      	adds	r7, #84	; 0x54
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	effffffe 	.word	0xeffffffe

08005108 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005116:	2b01      	cmp	r3, #1
 8005118:	d101      	bne.n	800511e <HAL_UARTEx_DisableFifoMode+0x16>
 800511a:	2302      	movs	r3, #2
 800511c:	e027      	b.n	800516e <HAL_UARTEx_DisableFifoMode+0x66>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2224      	movs	r2, #36	; 0x24
 800512a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f022 0201 	bic.w	r2, r2, #1
 8005144:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800514c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2220      	movs	r2, #32
 8005160:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b084      	sub	sp, #16
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
 8005182:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800518a:	2b01      	cmp	r3, #1
 800518c:	d101      	bne.n	8005192 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800518e:	2302      	movs	r3, #2
 8005190:	e02d      	b.n	80051ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2224      	movs	r2, #36	; 0x24
 800519e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0201 	bic.w	r2, r2, #1
 80051b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f850 	bl	8005274 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2220      	movs	r2, #32
 80051e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b084      	sub	sp, #16
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
 80051fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005206:	2b01      	cmp	r3, #1
 8005208:	d101      	bne.n	800520e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800520a:	2302      	movs	r3, #2
 800520c:	e02d      	b.n	800526a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2224      	movs	r2, #36	; 0x24
 800521a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 0201 	bic.w	r2, r2, #1
 8005234:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f812 	bl	8005274 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2220      	movs	r2, #32
 800525c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
	...

08005274 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005280:	2b00      	cmp	r3, #0
 8005282:	d108      	bne.n	8005296 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005294:	e031      	b.n	80052fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005296:	2310      	movs	r3, #16
 8005298:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800529a:	2310      	movs	r3, #16
 800529c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	0e5b      	lsrs	r3, r3, #25
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	f003 0307 	and.w	r3, r3, #7
 80052ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	0f5b      	lsrs	r3, r3, #29
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	f003 0307 	and.w	r3, r3, #7
 80052bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052be:	7bbb      	ldrb	r3, [r7, #14]
 80052c0:	7b3a      	ldrb	r2, [r7, #12]
 80052c2:	4911      	ldr	r1, [pc, #68]	; (8005308 <UARTEx_SetNbDataToProcess+0x94>)
 80052c4:	5c8a      	ldrb	r2, [r1, r2]
 80052c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80052ca:	7b3a      	ldrb	r2, [r7, #12]
 80052cc:	490f      	ldr	r1, [pc, #60]	; (800530c <UARTEx_SetNbDataToProcess+0x98>)
 80052ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
 80052de:	7b7a      	ldrb	r2, [r7, #13]
 80052e0:	4909      	ldr	r1, [pc, #36]	; (8005308 <UARTEx_SetNbDataToProcess+0x94>)
 80052e2:	5c8a      	ldrb	r2, [r1, r2]
 80052e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80052e8:	7b7a      	ldrb	r2, [r7, #13]
 80052ea:	4908      	ldr	r1, [pc, #32]	; (800530c <UARTEx_SetNbDataToProcess+0x98>)
 80052ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80052fa:	bf00      	nop
 80052fc:	3714      	adds	r7, #20
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	080053d0 	.word	0x080053d0
 800530c:	080053d8 	.word	0x080053d8

08005310 <add>:
#include "CalcManager.h"

uint8_t add(uint8_t n1, uint8_t n2)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	4603      	mov	r3, r0
 8005318:	460a      	mov	r2, r1
 800531a:	71fb      	strb	r3, [r7, #7]
 800531c:	4613      	mov	r3, r2
 800531e:	71bb      	strb	r3, [r7, #6]
	uint8_t rep = n1 + n2;
 8005320:	79fa      	ldrb	r2, [r7, #7]
 8005322:	79bb      	ldrb	r3, [r7, #6]
 8005324:	4413      	add	r3, r2
 8005326:	73fb      	strb	r3, [r7, #15]
	return rep;
 8005328:	7bfb      	ldrb	r3, [r7, #15]
}
 800532a:	4618      	mov	r0, r3
 800532c:	3714      	adds	r7, #20
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
	...

08005338 <__libc_init_array>:
 8005338:	b570      	push	{r4, r5, r6, lr}
 800533a:	4d0d      	ldr	r5, [pc, #52]	; (8005370 <__libc_init_array+0x38>)
 800533c:	4c0d      	ldr	r4, [pc, #52]	; (8005374 <__libc_init_array+0x3c>)
 800533e:	1b64      	subs	r4, r4, r5
 8005340:	10a4      	asrs	r4, r4, #2
 8005342:	2600      	movs	r6, #0
 8005344:	42a6      	cmp	r6, r4
 8005346:	d109      	bne.n	800535c <__libc_init_array+0x24>
 8005348:	4d0b      	ldr	r5, [pc, #44]	; (8005378 <__libc_init_array+0x40>)
 800534a:	4c0c      	ldr	r4, [pc, #48]	; (800537c <__libc_init_array+0x44>)
 800534c:	f000 f820 	bl	8005390 <_init>
 8005350:	1b64      	subs	r4, r4, r5
 8005352:	10a4      	asrs	r4, r4, #2
 8005354:	2600      	movs	r6, #0
 8005356:	42a6      	cmp	r6, r4
 8005358:	d105      	bne.n	8005366 <__libc_init_array+0x2e>
 800535a:	bd70      	pop	{r4, r5, r6, pc}
 800535c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005360:	4798      	blx	r3
 8005362:	3601      	adds	r6, #1
 8005364:	e7ee      	b.n	8005344 <__libc_init_array+0xc>
 8005366:	f855 3b04 	ldr.w	r3, [r5], #4
 800536a:	4798      	blx	r3
 800536c:	3601      	adds	r6, #1
 800536e:	e7f2      	b.n	8005356 <__libc_init_array+0x1e>
 8005370:	080053e8 	.word	0x080053e8
 8005374:	080053e8 	.word	0x080053e8
 8005378:	080053e8 	.word	0x080053e8
 800537c:	080053ec 	.word	0x080053ec

08005380 <memset>:
 8005380:	4402      	add	r2, r0
 8005382:	4603      	mov	r3, r0
 8005384:	4293      	cmp	r3, r2
 8005386:	d100      	bne.n	800538a <memset+0xa>
 8005388:	4770      	bx	lr
 800538a:	f803 1b01 	strb.w	r1, [r3], #1
 800538e:	e7f9      	b.n	8005384 <memset+0x4>

08005390 <_init>:
 8005390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005392:	bf00      	nop
 8005394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005396:	bc08      	pop	{r3}
 8005398:	469e      	mov	lr, r3
 800539a:	4770      	bx	lr

0800539c <_fini>:
 800539c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800539e:	bf00      	nop
 80053a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053a2:	bc08      	pop	{r3}
 80053a4:	469e      	mov	lr, r3
 80053a6:	4770      	bx	lr
